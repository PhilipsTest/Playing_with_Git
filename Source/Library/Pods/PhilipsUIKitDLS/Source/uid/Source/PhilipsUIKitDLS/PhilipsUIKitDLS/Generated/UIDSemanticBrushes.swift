//  Copyright Â© 2018 Philips. All rights reserved.

/// This file is auto-generated from a json file.
/// Do not edit this file directly, but change the generation process whenever needed.
/// Generation on 11/09/2018 from git revision revision

import Foundation
import UIKit

// swiftlint:disable type_body_length
// swiftlint:disable file_length

/// A generated PhilipsUIKitDLS list of semantic brushes. Maps Control colors and UIDTonalRange to UIDColorLevel.
@objcMembers class UIDSemanticBrushes: NSObject {
    weak var theme: UIDTheme!

    func aboutScreenFullScreen(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 1)
        case .veryLight: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 1)
        case .bright: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 1)
        case .veryDark: return UIDBrush(brush: contentPrimary(tonalRange: tonalRange))
        }
    }

    func aboutScreenIcon(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: aboutScreenText(tonalRange: tonalRange), alpha: 0.7)
        case .veryLight: return UIDBrush(brush: aboutScreenText(tonalRange: tonalRange), alpha: 0.7)
        case .bright: return UIDBrush(brush: aboutScreenText(tonalRange: tonalRange), alpha: 0.7)
        case .veryDark: return UIDBrush(brush: aboutScreenText(tonalRange: tonalRange), alpha: 0.7)
        }
    }

    func aboutScreenSubTitle(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: aboutScreenTitle(tonalRange: tonalRange))
        case .veryLight: return UIDBrush(brush: aboutScreenTitle(tonalRange: tonalRange))
        case .bright: return UIDBrush(brush: aboutScreenTitle(tonalRange: tonalRange))
        case .veryDark: return UIDBrush(brush: aboutScreenTitle(tonalRange: tonalRange))
        }
    }

    func aboutScreenText(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color75, fixedColorRange: .gray, alpha: 0.8)
        case .veryLight: return UIDBrush(colorLevel: .color75, fixedColorRange: .gray, alpha: 0.8)
        case .bright: return UIDBrush(colorLevel: .color75, fixedColorRange: .gray, alpha: 0.8)
        case .veryDark: return UIDBrush(brush: textSecondary(tonalRange: tonalRange))
        }
    }

    func aboutScreenTitle(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color75, fixedColorRange: .gray)
        case .veryLight: return UIDBrush(colorLevel: .color75, fixedColorRange: .gray)
        case .bright: return UIDBrush(colorLevel: .color75, fixedColorRange: .gray)
        case .veryDark: return UIDBrush(brush: textPrimary(tonalRange: tonalRange))
        }
    }

    func arrowIcon(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: neutralTextSecondary(tonalRange: tonalRange))
        case .veryLight: return UIDBrush(brush: neutralTextSecondary(tonalRange: tonalRange))
        case .bright: return UIDBrush(brush: neutralTextSecondary(tonalRange: tonalRange))
        case .veryDark: return UIDBrush(brush: neutralTextSecondary(tonalRange: tonalRange))
        }
    }

    func arrowIconDisabled(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: neutralTextDisabled(tonalRange: tonalRange))
        case .veryLight: return UIDBrush(brush: colorTextVerydarkDisabled(tonalRange: tonalRange))
        case .bright: return UIDBrush(brush: neutralTextDisabled(tonalRange: tonalRange))
        case .veryDark: return UIDBrush(brush: neutralTextDisabled(tonalRange: tonalRange))
        }
    }

    func arrowIconQuiet(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: arrowIcon(tonalRange: tonalRange))
        case .veryLight: return UIDBrush(brush: arrowIcon(tonalRange: tonalRange))
        case .bright: return UIDBrush(brush: lightTextSecondary(tonalRange: tonalRange))
        case .veryDark: return UIDBrush(brush: lightTextSecondary(tonalRange: tonalRange))
        }
    }

    func arrowIconQuietDisabled(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: neutralTextDisabled(tonalRange: tonalRange))
        case .veryLight: return UIDBrush(brush: colorTextVerydarkDisabled(tonalRange: tonalRange))
        case .bright: return UIDBrush(brush: lightTextDisabled(tonalRange: tonalRange))
        case .veryDark: return UIDBrush(brush: lightTextDisabled(tonalRange: tonalRange))
        }
    }

    func brandingScreen(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color45)
        case .veryLight: return UIDBrush(colorLevel: .color45)
        case .bright: return UIDBrush(colorLevel: .color45)
        case .veryDark: return UIDBrush(colorLevel: .color45)
        }
    }

    func brandingScreenLight(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 0.3)
        case .veryLight: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 0.3)
        case .bright: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 0.3)
        case .veryDark: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 0.3)
        }
    }

    func brandingScreenText(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 1)
        case .veryLight: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 1)
        case .bright: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 1)
        case .veryDark: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 1)
        }
    }

    func breadcrumbFocus(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color75, fixedColorRange: .gray, alpha: 0.8)
        case .veryLight: return UIDBrush(colorLevel: .color75, alpha: 0.8)
        case .bright: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 0.85)
        case .veryDark: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 0.8)
        }
    }

    func breadcrumbHover(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color75, fixedColorRange: .gray, alpha: 0.8)
        case .veryLight: return UIDBrush(colorLevel: .color75, alpha: 0.8)
        case .bright: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 0.85)
        case .veryDark: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 0.8)
        }
    }

    func breadcrumbNormal(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color75, fixedColorRange: .gray, alpha: 0.8)
        case .veryLight: return UIDBrush(colorLevel: .color75, alpha: 0.8)
        case .bright: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 0.85)
        case .veryDark: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 0.8)
        }
    }

    func breadcrumbNormalOn(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color75, fixedColorRange: .gray)
        case .veryLight: return UIDBrush(colorLevel: .color75)
        case .bright: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 1)
        case .veryDark: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 1)
        }
    }

    func breadcrumbPressed(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color75, fixedColorRange: .gray, alpha: 0.8)
        case .veryLight: return UIDBrush(colorLevel: .color75, alpha: 0.8)
        case .bright: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 0.85)
        case .veryDark: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 0.8)
        }
    }

    func buttonSeparator(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color35, alpha: 0.3)
        case .veryLight: return UIDBrush(colorLevel: .color35, alpha: 0.3)
        case .bright: return UIDBrush(colorLevel: .color30, alpha: 0.3)
        case .veryDark: return UIDBrush(colorLevel: .color35, alpha: 0.2)
        }
    }

    func buttonSeparatorDisabled(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color35, alpha: 0.1)
        case .veryLight: return UIDBrush(colorLevel: .color35, alpha: 0.1)
        case .bright: return UIDBrush(colorLevel: .color30, alpha: 0.1)
        case .veryDark: return UIDBrush(colorLevel: .color35, alpha: 0.1)
        }
    }

    func buttonSignalErrorDisabled(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: buttonSignalErrorNormal(tonalRange: tonalRange), alpha: 0.35)
        case .veryLight: return UIDBrush(brush: buttonSignalErrorNormal(tonalRange: tonalRange), alpha: 0.35)
        case .bright: return UIDBrush(brush: buttonSignalErrorNormal(tonalRange: tonalRange), alpha: 0.35)
        case .veryDark: return UIDBrush(brush: buttonSignalErrorNormal(tonalRange: tonalRange), alpha: 0.35)
        }
    }

    func buttonSignalErrorFocusBackground(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: buttonSignalErrorNormal(tonalRange: tonalRange))
        case .veryLight: return UIDBrush(brush: buttonSignalErrorNormal(tonalRange: tonalRange))
        case .bright: return UIDBrush(brush: buttonSignalErrorNormal(tonalRange: tonalRange))
        case .veryDark: return UIDBrush(brush: buttonSignalErrorNormal(tonalRange: tonalRange))
        }
    }

    func buttonSignalErrorFocusBorder(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color50, fixedColorRange: .signalRed, alpha: 0.2)
        case .veryLight: return UIDBrush(colorLevel: .color60, fixedColorRange: .signalRed, alpha: 0.25)
        case .bright: return UIDBrush(colorLevel: .color60, fixedColorRange: .signalRed, alpha: 0.25)
        case .veryDark: return UIDBrush(colorLevel: .color50, fixedColorRange: .signalRed, alpha: 0.25)
        }
    }

    func buttonSignalErrorHover(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: buttonSignalErrorPressed(tonalRange: tonalRange))
        case .veryLight: return UIDBrush(brush: buttonSignalErrorPressed(tonalRange: tonalRange))
        case .bright: return UIDBrush(brush: buttonSignalErrorPressed(tonalRange: tonalRange))
        case .veryDark: return UIDBrush(brush: buttonSignalErrorPressed(tonalRange: tonalRange))
        }
    }

    func buttonSignalErrorNormal(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color50, fixedColorRange: .signalRed)
        case .veryLight: return UIDBrush(colorLevel: .color45, fixedColorRange: .signalRed)
        case .bright: return UIDBrush(colorLevel: .color45, fixedColorRange: .signalRed)
        case .veryDark: return UIDBrush(colorLevel: .color50, fixedColorRange: .signalRed)
        }
    }

    func buttonSignalErrorPressed(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color60, fixedColorRange: .signalRed)
        case .veryLight: return UIDBrush(colorLevel: .color50, fixedColorRange: .signalRed)
        case .bright: return UIDBrush(colorLevel: .color50, fixedColorRange: .signalRed)
        case .veryDark: return UIDBrush(colorLevel: .color60, fixedColorRange: .signalRed)
        }
    }

    func buttonSignalSuccessDisabled(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: buttonSignalSuccessNormal(tonalRange: tonalRange), alpha: 0.35)
        case .veryLight: return UIDBrush(brush: buttonSignalSuccessNormal(tonalRange: tonalRange), alpha: 0.35)
        case .bright: return UIDBrush(brush: buttonSignalSuccessNormal(tonalRange: tonalRange), alpha: 0.35)
        case .veryDark: return UIDBrush(brush: buttonSignalSuccessNormal(tonalRange: tonalRange), alpha: 0.35)
        }
    }

    func buttonSignalSuccessFocusBackground(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: buttonSignalSuccessNormal(tonalRange: tonalRange))
        case .veryLight: return UIDBrush(brush: buttonSignalSuccessNormal(tonalRange: tonalRange))
        case .bright: return UIDBrush(brush: buttonSignalSuccessNormal(tonalRange: tonalRange))
        case .veryDark: return UIDBrush(brush: buttonSignalSuccessNormal(tonalRange: tonalRange))
        }
    }

    func buttonSignalSuccessFocusBorder(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color50, fixedColorRange: .signalGreen, alpha: 0.2)
        case .veryLight: return UIDBrush(colorLevel: .color60, fixedColorRange: .signalGreen, alpha: 0.25)
        case .bright: return UIDBrush(colorLevel: .color60, fixedColorRange: .signalGreen, alpha: 0.25)
        case .veryDark: return UIDBrush(colorLevel: .color50, fixedColorRange: .signalGreen, alpha: 0.25)
        }
    }

    func buttonSignalSuccessHover(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: buttonSignalSuccessPressed(tonalRange: tonalRange))
        case .veryLight: return UIDBrush(brush: buttonSignalSuccessPressed(tonalRange: tonalRange))
        case .bright: return UIDBrush(brush: buttonSignalSuccessPressed(tonalRange: tonalRange))
        case .veryDark: return UIDBrush(brush: buttonSignalSuccessPressed(tonalRange: tonalRange))
        }
    }

    func buttonSignalSuccessNormal(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color50, fixedColorRange: .signalGreen)
        case .veryLight: return UIDBrush(colorLevel: .color50, fixedColorRange: .signalGreen)
        case .bright: return UIDBrush(colorLevel: .color50, fixedColorRange: .signalGreen)
        case .veryDark: return UIDBrush(colorLevel: .color50, fixedColorRange: .signalGreen)
        }
    }

    func buttonSignalSuccessPressed(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color60, fixedColorRange: .signalGreen)
        case .veryLight: return UIDBrush(colorLevel: .color60, fixedColorRange: .signalGreen)
        case .bright: return UIDBrush(colorLevel: .color60, fixedColorRange: .signalGreen)
        case .veryDark: return UIDBrush(colorLevel: .color60, fixedColorRange: .signalGreen)
        }
    }

    func buttonSignalWarningDisabled(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: buttonSignalWarningNormal(tonalRange: tonalRange), alpha: 0.35)
        case .veryLight: return UIDBrush(brush: buttonSignalWarningNormal(tonalRange: tonalRange), alpha: 0.35)
        case .bright: return UIDBrush(brush: buttonSignalWarningNormal(tonalRange: tonalRange), alpha: 0.35)
        case .veryDark: return UIDBrush(brush: buttonSignalWarningNormal(tonalRange: tonalRange), alpha: 0.35)
        }
    }

    func buttonSignalWarningFocusBackground(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: buttonSignalWarningNormal(tonalRange: tonalRange))
        case .veryLight: return UIDBrush(brush: buttonSignalWarningNormal(tonalRange: tonalRange))
        case .bright: return UIDBrush(brush: buttonSignalWarningNormal(tonalRange: tonalRange))
        case .veryDark: return UIDBrush(brush: buttonSignalWarningNormal(tonalRange: tonalRange))
        }
    }

    func buttonSignalWarningFocusBorder(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color60, fixedColorRange: .signalOrange, alpha: 0.2)
        case .veryLight: return UIDBrush(colorLevel: .color60, fixedColorRange: .signalOrange, alpha: 0.25)
        case .bright: return UIDBrush(colorLevel: .color60, fixedColorRange: .signalOrange, alpha: 0.25)
        case .veryDark: return UIDBrush(colorLevel: .color50, fixedColorRange: .signalOrange, alpha: 0.25)
        }
    }

    func buttonSignalWarningHover(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: buttonSignalWarningPressed(tonalRange: tonalRange))
        case .veryLight: return UIDBrush(brush: buttonSignalWarningPressed(tonalRange: tonalRange))
        case .bright: return UIDBrush(brush: buttonSignalWarningPressed(tonalRange: tonalRange))
        case .veryDark: return UIDBrush(brush: buttonSignalWarningPressed(tonalRange: tonalRange))
        }
    }

    func buttonSignalWarningNormal(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color50, fixedColorRange: .signalOrange)
        case .veryLight: return UIDBrush(colorLevel: .color50, fixedColorRange: .signalOrange)
        case .bright: return UIDBrush(colorLevel: .color50, fixedColorRange: .signalOrange)
        case .veryDark: return UIDBrush(colorLevel: .color50, fixedColorRange: .signalOrange)
        }
    }

    func buttonSignalWarningPressed(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color60, fixedColorRange: .signalOrange)
        case .veryLight: return UIDBrush(colorLevel: .color60, fixedColorRange: .signalOrange)
        case .bright: return UIDBrush(colorLevel: .color60, fixedColorRange: .signalOrange)
        case .veryDark: return UIDBrush(colorLevel: .color60, fixedColorRange: .signalOrange)
        }
    }

    func chartsTargetBackground(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color45, alpha: 0.1)
        case .veryLight: return UIDBrush(colorLevel: .color45, alpha: 0.1)
        case .bright: return UIDBrush(colorLevel: .color10, alpha: 0.1)
        case .veryDark: return UIDBrush(colorLevel: .color20, alpha: 0.1)
        }
    }

    func circularButtonWhite(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 1)
        case .veryLight: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 1)
        case .bright: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 1)
        case .veryDark: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 1)
        }
    }

    func colorTextBright(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color45)
        case .veryLight: return UIDBrush(colorLevel: .color45)
        case .bright: return UIDBrush(colorLevel: .color45)
        case .veryDark: return UIDBrush(colorLevel: .color45)
        }
    }

    func colorTextBrightDisabled(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color45, alpha: 0.35)
        case .veryLight: return UIDBrush(colorLevel: .color45, alpha: 0.35)
        case .bright: return UIDBrush(colorLevel: .color45, alpha: 0.35)
        case .veryDark: return UIDBrush(colorLevel: .color45, alpha: 0.35)
        }
    }

    func colorTextDark(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color60)
        case .veryLight: return UIDBrush(colorLevel: .color60)
        case .bright: return UIDBrush(colorLevel: .color60)
        case .veryDark: return UIDBrush(colorLevel: .color60)
        }
    }

    func colorTextDarkDisabled(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color60, alpha: 0.35)
        case .veryLight: return UIDBrush(colorLevel: .color60, alpha: 0.35)
        case .bright: return UIDBrush(colorLevel: .color60, alpha: 0.35)
        case .veryDark: return UIDBrush(colorLevel: .color60, alpha: 0.35)
        }
    }

    func colorTextLight(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color30)
        case .veryLight: return UIDBrush(colorLevel: .color30)
        case .bright: return UIDBrush(colorLevel: .color30)
        case .veryDark: return UIDBrush(colorLevel: .color30)
        }
    }

    func colorTextLightDisabled(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color30, alpha: 0.35)
        case .veryLight: return UIDBrush(colorLevel: .color30, alpha: 0.35)
        case .bright: return UIDBrush(colorLevel: .color30, alpha: 0.35)
        case .veryDark: return UIDBrush(colorLevel: .color30, alpha: 0.35)
        }
    }

    func colorTextVerydarkDisabled(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color75, alpha: 0.35)
        case .veryLight: return UIDBrush(colorLevel: .color75, alpha: 0.35)
        case .bright: return UIDBrush(colorLevel: .color75, alpha: 0.35)
        case .veryDark: return UIDBrush(colorLevel: .color75, alpha: 0.35)
        }
    }

    func colorTextVerydarkPrimary(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color75)
        case .veryLight: return UIDBrush(colorLevel: .color75)
        case .bright: return UIDBrush(colorLevel: .color75)
        case .veryDark: return UIDBrush(colorLevel: .color75)
        }
    }

    func colorTextVerydarkSecondary(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color75, alpha: 0.8)
        case .veryLight: return UIDBrush(colorLevel: .color75, alpha: 0.8)
        case .bright: return UIDBrush(colorLevel: .color75, alpha: 0.8)
        case .veryDark: return UIDBrush(colorLevel: .color75, alpha: 0.8)
        }
    }

    func colorTextVerydarkTertiary(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color75, alpha: 0.5)
        case .veryLight: return UIDBrush(colorLevel: .color75, alpha: 0.5)
        case .bright: return UIDBrush(colorLevel: .color75, alpha: 0.5)
        case .veryDark: return UIDBrush(colorLevel: .color75, alpha: 0.5)
        }
    }

    func colorTextVerylight(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color15)
        case .veryLight: return UIDBrush(colorLevel: .color15)
        case .bright: return UIDBrush(colorLevel: .color15)
        case .veryDark: return UIDBrush(colorLevel: .color15)
        }
    }

    func colorTextVerylightDisabled(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color15, alpha: 0.35)
        case .veryLight: return UIDBrush(colorLevel: .color15, alpha: 0.35)
        case .bright: return UIDBrush(colorLevel: .color15, alpha: 0.35)
        case .veryDark: return UIDBrush(colorLevel: .color15, alpha: 0.35)
        }
    }

    func contentButtonIcon(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color75, fixedColorRange: .gray)
        case .veryLight: return UIDBrush(colorLevel: .color75, fixedColorRange: .gray)
        case .bright: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 1)
        case .veryDark: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 1)
        }
    }

    func contentCircularButtonIcon(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color75, fixedColorRange: .gray)
        case .veryLight: return UIDBrush(colorLevel: .color75, fixedColorRange: .gray)
        case .bright: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 1)
        case .veryDark: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 1)
        }
    }

    func contentCircularButtonNormal(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 1)
        case .veryLight: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 1)
        case .bright: return UIDBrush(colorLevel: .color60)
        case .veryDark: return UIDBrush(colorLevel: .color65)
        }
    }

    func contentCircularButtonPressed(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color5)
        case .veryLight: return UIDBrush(colorLevel: .color10)
        case .bright: return UIDBrush(colorLevel: .color65)
        case .veryDark: return UIDBrush(colorLevel: .color60)
        }
    }

    func contentPrimary(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 1)
        case .veryLight: return UIDBrush(colorLevel: .color20)
        case .bright: return UIDBrush(colorLevel: .color50)
        case .veryDark: return UIDBrush(colorLevel: .color80)
        }
    }

    func contentPrimaryDisabled(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 0.35)
        case .veryLight: return UIDBrush(colorLevel: .color20, alpha: 0.35)
        case .bright: return UIDBrush(colorLevel: .color50, alpha: 0.35)
        case .veryDark: return UIDBrush(colorLevel: .color80, alpha: 0.35)
        }
    }

    func contentPrimaryPickerIosGradientStart(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: contentPrimary(tonalRange: tonalRange), alpha: 0.2)
        case .veryLight: return UIDBrush(brush: contentPrimary(tonalRange: tonalRange), alpha: 0.2)
        case .bright: return UIDBrush(brush: contentPrimary(tonalRange: tonalRange), alpha: 0.2)
        case .veryDark: return UIDBrush(brush: contentPrimary(tonalRange: tonalRange), alpha: 0.2)
        }
    }

    func contentPrimaryPickerIosGradientStop(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: contentPrimary(tonalRange: tonalRange), alpha: 0.6)
        case .veryLight: return UIDBrush(brush: contentPrimary(tonalRange: tonalRange), alpha: 0.6)
        case .bright: return UIDBrush(brush: contentPrimary(tonalRange: tonalRange), alpha: 0.6)
        case .veryDark: return UIDBrush(brush: contentPrimary(tonalRange: tonalRange), alpha: 0.6)
        }
    }

    func contentSecondary(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color5)
        case .veryLight: return UIDBrush(colorLevel: .color15)
        case .bright: return UIDBrush(colorLevel: .color45)
        case .veryDark: return UIDBrush(colorLevel: .color75)
        }
    }

    func contentSecondaryNeutral(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color5, fixedColorRange: .gray)
        case .veryLight: return UIDBrush(brush: contentSecondary(tonalRange: tonalRange))
        case .bright: return UIDBrush(brush: contentSecondary(tonalRange: tonalRange))
        case .veryDark: return UIDBrush(brush: contentSecondary(tonalRange: tonalRange))
        }
    }

    func contentSecondaryNeutralPickerIosGradientStart(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: contentSecondaryNeutral(tonalRange: tonalRange), alpha: 0.2)
        case .veryLight: return UIDBrush(brush: contentSecondaryNeutral(tonalRange: tonalRange), alpha: 0.2)
        case .bright: return UIDBrush(brush: contentSecondaryNeutral(tonalRange: tonalRange), alpha: 0.2)
        case .veryDark: return UIDBrush(brush: contentSecondaryNeutral(tonalRange: tonalRange), alpha: 0.2)
        }
    }

    func contentSecondaryNeutralPickerIosGradientStop(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: contentSecondaryNeutral(tonalRange: tonalRange), alpha: 0.6)
        case .veryLight: return UIDBrush(brush: contentSecondaryNeutral(tonalRange: tonalRange), alpha: 0.6)
        case .bright: return UIDBrush(brush: contentSecondaryNeutral(tonalRange: tonalRange), alpha: 0.6)
        case .veryDark: return UIDBrush(brush: contentSecondaryNeutral(tonalRange: tonalRange), alpha: 0.6)
        }
    }

    func contentSecondaryPickerIosGradientStart(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: contentSecondary(tonalRange: tonalRange), alpha: 0.2)
        case .veryLight: return UIDBrush(brush: contentSecondary(tonalRange: tonalRange), alpha: 0.2)
        case .bright: return UIDBrush(brush: contentSecondary(tonalRange: tonalRange), alpha: 0.2)
        case .veryDark: return UIDBrush(brush: contentSecondary(tonalRange: tonalRange), alpha: 0.2)
        }
    }

    func contentSecondaryPickerIosGradientStop(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: contentSecondary(tonalRange: tonalRange), alpha: 0.6)
        case .veryLight: return UIDBrush(brush: contentSecondary(tonalRange: tonalRange), alpha: 0.6)
        case .bright: return UIDBrush(brush: contentSecondary(tonalRange: tonalRange), alpha: 0.6)
        case .veryDark: return UIDBrush(brush: contentSecondary(tonalRange: tonalRange), alpha: 0.6)
        }
    }

    func contentTertiary(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color10)
        case .veryLight: return UIDBrush(colorLevel: .color25)
        case .bright: return UIDBrush(colorLevel: .color55)
        case .veryDark: return UIDBrush(colorLevel: .color85)
        }
    }

    func contentTertiaryNeutral(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color10, fixedColorRange: .gray)
        case .veryLight: return UIDBrush(brush: contentTertiary(tonalRange: tonalRange))
        case .bright: return UIDBrush(brush: contentTertiary(tonalRange: tonalRange))
        case .veryDark: return UIDBrush(brush: contentTertiary(tonalRange: tonalRange))
        }
    }

    func controlAccent(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color45)
        case .veryLight: return UIDBrush(colorLevel: .color50)
        case .bright: return UIDBrush(colorLevel: .color45)
        case .veryDark: return UIDBrush(colorLevel: .color45)
        }
    }

    func controlAccentDisabled(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: controlAccent(tonalRange: tonalRange), alpha: 0.35)
        case .veryLight: return UIDBrush(brush: controlAccent(tonalRange: tonalRange), alpha: 0.35)
        case .bright: return UIDBrush(brush: controlAccent(tonalRange: tonalRange), alpha: 0.35)
        case .veryDark: return UIDBrush(brush: controlAccent(tonalRange: tonalRange), alpha: 0.35)
        }
    }

    func controlAccentFocus(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color45)
        case .veryLight: return UIDBrush(colorLevel: .color50)
        case .bright: return UIDBrush(colorLevel: .color45)
        case .veryDark: return UIDBrush(colorLevel: .color45)
        }
    }

    func controlAccentFocusBorder(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: controlAccent(tonalRange: tonalRange), alpha: 0.2)
        case .veryLight: return UIDBrush(brush: controlAccent(tonalRange: tonalRange), alpha: 0.2)
        case .bright: return UIDBrush(brush: controlAccent(tonalRange: tonalRange), alpha: 0.25)
        case .veryDark: return UIDBrush(brush: controlAccent(tonalRange: tonalRange), alpha: 0.35)
        }
    }

    func controlAccentHover(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: controlAccent(tonalRange: tonalRange), offset: 5)
        case .veryLight: return UIDBrush(brush: controlAccent(tonalRange: tonalRange), offset: 5)
        case .bright: return UIDBrush(brush: controlAccent(tonalRange: tonalRange), offset: 5)
        case .veryDark: return UIDBrush(brush: controlAccent(tonalRange: tonalRange), offset: 5)
        }
    }

    func controlAccentPressed(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: controlAccent(tonalRange: tonalRange), offset: 10)
        case .veryLight: return UIDBrush(brush: controlAccent(tonalRange: tonalRange), offset: 10)
        case .bright: return UIDBrush(brush: controlAccent(tonalRange: tonalRange), offset: 10)
        case .veryDark: return UIDBrush(brush: controlAccent(tonalRange: tonalRange), offset: 10)
        }
    }

    func controlAccentText(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 1)
        case .veryLight: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 1)
        case .bright: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 1)
        case .veryDark: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 1)
        }
    }

    func controlAccentTextDisabled(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: controlAccentText(tonalRange: tonalRange), alpha: 0.5)
        case .veryLight: return UIDBrush(brush: controlAccentText(tonalRange: tonalRange), alpha: 0.5)
        case .bright: return UIDBrush(brush: controlAccentText(tonalRange: tonalRange), alpha: 0.5)
        case .veryDark: return UIDBrush(brush: controlAccentText(tonalRange: tonalRange), alpha: 0.5)
        }
    }

    func controlBright(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color45)
        case .veryLight: return UIDBrush(colorLevel: .color45)
        case .bright: return UIDBrush(colorLevel: .color45)
        case .veryDark: return UIDBrush(colorLevel: .color45)
        }
    }

    func controlBuffer(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: controlPrimaryDetail(tonalRange: tonalRange), alpha: 0.3)
        case .veryLight: return UIDBrush(brush: controlPrimaryDetail(tonalRange: tonalRange), alpha: 0.3)
        case .bright: return UIDBrush(brush: controlPrimaryDetail(tonalRange: tonalRange), alpha: 0.3)
        case .veryDark: return UIDBrush(brush: controlPrimaryDetail(tonalRange: tonalRange), alpha: 0.3)
        }
    }

    func controlNotification(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return validationControlNotification(components:UIDBrushComponents(colorLevel: .color60))
        case .veryLight: return validationControlNotification(components:UIDBrushComponents(colorLevel: .color60))
        case .bright: return validationControlNotification(components:UIDBrushComponents(colorLevel: .color60))
        case .veryDark: return validationControlNotification(components:UIDBrushComponents(colorLevel: .color60))
        }
    }

    func controlPrimary(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color45)
        case .veryLight: return UIDBrush(colorLevel: .color45)
        case .bright: return UIDBrush(colorLevel: .color75)
        case .veryDark: return UIDBrush(colorLevel: .color45)
        }
    }

    func controlPrimaryDetail(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color45)
        case .veryLight: return UIDBrush(colorLevel: .color45)
        case .bright: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 1)
        case .veryDark: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 1)
        }
    }

    func controlPrimaryDetailDisabled(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: controlPrimaryText(tonalRange: tonalRange), alpha: 0.5)
        case .veryLight: return UIDBrush(brush: controlPrimaryText(tonalRange: tonalRange), alpha: 0.5)
        case .bright: return UIDBrush(brush: controlPrimaryText(tonalRange: tonalRange), alpha: 0.5)
        case .veryDark: return UIDBrush(brush: controlPrimaryText(tonalRange: tonalRange), alpha: 0.5)
        }
    }

    func controlPrimaryDisabled(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: controlPrimary(tonalRange: tonalRange), alpha: 0.35)
        case .veryLight: return UIDBrush(brush: controlPrimary(tonalRange: tonalRange), alpha: 0.35)
        case .bright: return UIDBrush(brush: controlPrimary(tonalRange: tonalRange), alpha: 0.35)
        case .veryDark: return UIDBrush(brush: controlPrimary(tonalRange: tonalRange), alpha: 0.35)
        }
    }

    func controlPrimaryFocus(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color45)
        case .veryLight: return UIDBrush(colorLevel: .color45)
        case .bright: return UIDBrush(colorLevel: .color75)
        case .veryDark: return UIDBrush(colorLevel: .color45)
        }
    }

    func controlPrimaryFocusBorder(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: controlPrimary(tonalRange: tonalRange), alpha: 0.2)
        case .veryLight: return UIDBrush(brush: controlPrimary(tonalRange: tonalRange), alpha: 0.2)
        case .bright: return UIDBrush(brush: controlPrimary(tonalRange: tonalRange), alpha: 0.25)
        case .veryDark: return UIDBrush(brush: controlPrimary(tonalRange: tonalRange), alpha: 0.35)
        }
    }

    func controlPrimaryHover(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: controlPrimary(tonalRange: tonalRange), offset: 5)
        case .veryLight: return UIDBrush(brush: controlPrimary(tonalRange: tonalRange), offset: 5)
        case .bright: return UIDBrush(brush: controlPrimary(tonalRange: tonalRange), offset: 5)
        case .veryDark: return UIDBrush(brush: controlPrimary(tonalRange: tonalRange), offset: 5)
        }
    }

    func controlPrimaryOff(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: controlPrimary(tonalRange: tonalRange), alpha: 0.6)
        case .veryLight: return UIDBrush(brush: controlPrimary(tonalRange: tonalRange), alpha: 0.6)
        case .bright: return UIDBrush(brush: controlPrimary(tonalRange: tonalRange), alpha: 0.6)
        case .veryDark: return UIDBrush(brush: controlPrimary(tonalRange: tonalRange), alpha: 0.6)
        }
    }

    func controlPrimaryOnVdg(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color45)
        case .veryLight: return UIDBrush(colorLevel: .color45)
        case .bright: return UIDBrush(colorLevel: .color75)
        case .veryDark: return UIDBrush(colorLevel: .color45)
        }
    }

    func controlPrimaryPressed(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: controlPrimary(tonalRange: tonalRange), offset: 10)
        case .veryLight: return UIDBrush(brush: controlPrimary(tonalRange: tonalRange), offset: 10)
        case .bright: return UIDBrush(brush: controlPrimary(tonalRange: tonalRange), offset: 10)
        case .veryDark: return UIDBrush(brush: controlPrimary(tonalRange: tonalRange), offset: 10)
        }
    }

    func controlPrimarySeparator(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: separatorWhite(tonalRange: tonalRange))
        case .veryLight: return UIDBrush(brush: separatorWhite(tonalRange: tonalRange))
        case .bright: return UIDBrush(brush: separatorBlack(tonalRange: tonalRange))
        case .veryDark: return UIDBrush(brush: separatorWhite(tonalRange: tonalRange))
        }
    }

    func controlPrimaryText(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 1)
        case .veryLight: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 1)
        case .bright: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 1)
        case .veryDark: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 1)
        }
    }

    func controlPrimaryTextDisabled(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: controlPrimaryText(tonalRange: tonalRange), alpha: 0.5)
        case .veryLight: return UIDBrush(brush: controlPrimaryText(tonalRange: tonalRange), alpha: 0.5)
        case .bright: return UIDBrush(brush: controlPrimaryText(tonalRange: tonalRange), alpha: 0.5)
        case .veryDark: return UIDBrush(brush: controlPrimaryText(tonalRange: tonalRange), alpha: 0.5)
        }
    }

    func controlPrimaryTrackOff(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: controlPrimary(tonalRange: tonalRange), alpha: 0.3)
        case .veryLight: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 0.7)
        case .bright: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 0.6)
        case .veryDark: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 0.6)
        }
    }

    func controlSecondary(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color15)
        case .veryLight: return UIDBrush(colorLevel: .color75)
        case .bright: return UIDBrush(colorLevel: .color15)
        case .veryDark: return UIDBrush(colorLevel: .color15)
        }
    }

    func controlSecondaryDetail(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: controlPrimaryDetail(tonalRange: tonalRange), alpha: 0.85)
        case .veryLight: return UIDBrush(brush: controlPrimaryDetail(tonalRange: tonalRange), alpha: 0.85)
        case .bright: return UIDBrush(brush: controlPrimaryDetail(tonalRange: tonalRange), alpha: 0.85)
        case .veryDark: return UIDBrush(brush: controlPrimaryDetail(tonalRange: tonalRange), alpha: 0.85)
        }
    }

    func controlSecondaryDisabled(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: controlSecondary(tonalRange: tonalRange), alpha: 0.5)
        case .veryLight: return UIDBrush(brush: controlSecondary(tonalRange: tonalRange), alpha: 0.35)
        case .bright: return UIDBrush(brush: controlSecondary(tonalRange: tonalRange), alpha: 0.35)
        case .veryDark: return UIDBrush(brush: controlSecondary(tonalRange: tonalRange), alpha: 0.35)
        }
    }

    func controlSecondaryFocus(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color15)
        case .veryLight: return UIDBrush(colorLevel: .color75)
        case .bright: return UIDBrush(colorLevel: .color15)
        case .veryDark: return UIDBrush(colorLevel: .color15)
        }
    }

    func controlSecondaryFocusBorder(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: controlSecondary(tonalRange: tonalRange), alpha: 0.2)
        case .veryLight: return UIDBrush(brush: controlSecondary(tonalRange: tonalRange), alpha: 0.2)
        case .bright: return UIDBrush(brush: controlSecondary(tonalRange: tonalRange), alpha: 0.25)
        case .veryDark: return UIDBrush(brush: controlSecondary(tonalRange: tonalRange), alpha: 0.35)
        }
    }

    func controlSecondaryHover(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: controlSecondary(tonalRange: tonalRange), offset: 5)
        case .veryLight: return UIDBrush(brush: controlSecondary(tonalRange: tonalRange), offset: 5)
        case .bright: return UIDBrush(brush: controlSecondary(tonalRange: tonalRange), offset: 5)
        case .veryDark: return UIDBrush(brush: controlSecondary(tonalRange: tonalRange), offset: 5)
        }
    }

    func controlSecondaryPressed(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: controlSecondary(tonalRange: tonalRange), offset: 10)
        case .veryLight: return UIDBrush(brush: controlSecondary(tonalRange: tonalRange), offset: 10)
        case .bright: return UIDBrush(brush: controlSecondary(tonalRange: tonalRange), offset: 10)
        case .veryDark: return UIDBrush(brush: controlSecondary(tonalRange: tonalRange), offset: 10)
        }
    }

    func controlSecondarySeparator(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: separatorBlack(tonalRange: tonalRange))
        case .veryLight: return UIDBrush(brush: separatorWhite(tonalRange: tonalRange))
        case .bright: return UIDBrush(brush: separatorBlack(tonalRange: tonalRange))
        case .veryDark: return UIDBrush(brush: separatorBlack(tonalRange: tonalRange))
        }
    }

    func controlSecondaryText(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color75)
        case .veryLight: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 1)
        case .bright: return UIDBrush(colorLevel: .color75)
        case .veryDark: return UIDBrush(colorLevel: .color75)
        }
    }

    func controlSecondaryTextDisabled(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: controlSecondaryText(tonalRange: tonalRange), alpha: 0.5)
        case .veryLight: return UIDBrush(brush: controlSecondaryText(tonalRange: tonalRange), alpha: 0.5)
        case .bright: return UIDBrush(brush: controlSecondaryText(tonalRange: tonalRange), alpha: 0.5)
        case .veryDark: return UIDBrush(brush: controlSecondaryText(tonalRange: tonalRange), alpha: 0.5)
        }
    }

    func controlTrackDisabled(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: controlTrackOff(tonalRange: tonalRange), alpha: 0.15)
        case .veryLight: return UIDBrush(brush: controlTrackOff(tonalRange: tonalRange), alpha: 0.15)
        case .bright: return UIDBrush(brush: controlTrackOff(tonalRange: tonalRange), alpha: 0.15)
        case .veryDark: return UIDBrush(brush: controlTrackOff(tonalRange: tonalRange), alpha: 0.15)
        }
    }

    func controlTrackOff(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color45, alpha: 0.25)
        case .veryLight: return UIDBrush(colorLevel: .color45, alpha: 0.3)
        case .bright: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 0.25)
        case .veryDark: return UIDBrush(colorLevel: .color30, alpha: 0.3)
        }
    }

    func controlWhite(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: noColor(tonalRange: tonalRange))
        case .veryLight: return UIDBrush(brush: noColor(tonalRange: tonalRange))
        case .bright: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 1)
        case .veryDark: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 1)
        }
    }

    func controlWhitePressed(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: noColor(tonalRange: tonalRange))
        case .veryLight: return UIDBrush(brush: controlWhite(tonalRange: tonalRange), offset: 10)
        case .bright: return UIDBrush(brush: controlWhite(tonalRange: tonalRange), offset: 10)
        case .veryDark: return UIDBrush(brush: controlWhite(tonalRange: tonalRange), offset: 10)
        }
    }

    func controlWhiteText(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: noColor(tonalRange: tonalRange))
        case .veryLight: return UIDBrush(brush: noColor(tonalRange: tonalRange))
        case .bright: return UIDBrush(colorLevel: .color50)
        case .veryDark: return UIDBrush(colorLevel: .color80)
        }
    }

    func dataColor1(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color45)
        case .veryLight: return UIDBrush(colorLevel: .color45)
        case .bright: return UIDBrush(colorLevel: .color10)
        case .veryDark: return UIDBrush(colorLevel: .color20)
        }
    }

    func dataColor1Disabled(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: dataColor1(tonalRange: tonalRange), alpha: 0.35)
        case .veryLight: return UIDBrush(brush: dataColor1(tonalRange: tonalRange), alpha: 0.35)
        case .bright: return UIDBrush(brush: dataColor1(tonalRange: tonalRange), alpha: 0.35)
        case .veryDark: return UIDBrush(brush: dataColor1(tonalRange: tonalRange), alpha: 0.35)
        }
    }

    func dataColor1Outline(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: dataColor1(tonalRange: tonalRange), alpha: 0.3)
        case .veryLight: return UIDBrush(brush: dataColor1(tonalRange: tonalRange), alpha: 0.3)
        case .bright: return UIDBrush(brush: dataColor1(tonalRange: tonalRange), alpha: 0.3)
        case .veryDark: return UIDBrush(brush: dataColor1(tonalRange: tonalRange), alpha: 0.3)
        }
    }

    func dataColor2(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color35)
        case .veryLight: return UIDBrush(colorLevel: .color35)
        case .bright: return UIDBrush(colorLevel: .color20)
        case .veryDark: return UIDBrush(colorLevel: .color30)
        }
    }

    func dataColor2Disabled(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: dataColor2(tonalRange: tonalRange), alpha: 0.35)
        case .veryLight: return UIDBrush(brush: dataColor2(tonalRange: tonalRange), alpha: 0.35)
        case .bright: return UIDBrush(brush: dataColor2(tonalRange: tonalRange), alpha: 0.35)
        case .veryDark: return UIDBrush(brush: dataColor2(tonalRange: tonalRange), alpha: 0.35)
        }
    }

    func dataColor2Outline(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: dataColor2(tonalRange: tonalRange), alpha: 0.3)
        case .veryLight: return UIDBrush(brush: dataColor2(tonalRange: tonalRange), alpha: 0.3)
        case .bright: return UIDBrush(brush: dataColor2(tonalRange: tonalRange), alpha: 0.3)
        case .veryDark: return UIDBrush(brush: dataColor2(tonalRange: tonalRange), alpha: 0.3)
        }
    }

    func dataColor3(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color25)
        case .veryLight: return UIDBrush(colorLevel: .color25)
        case .bright: return UIDBrush(colorLevel: .color30)
        case .veryDark: return UIDBrush(colorLevel: .color40)
        }
    }

    func dataColor3Disabled(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: dataColor3(tonalRange: tonalRange), alpha: 0.35)
        case .veryLight: return UIDBrush(brush: dataColor3(tonalRange: tonalRange), alpha: 0.35)
        case .bright: return UIDBrush(brush: dataColor3(tonalRange: tonalRange), alpha: 0.35)
        case .veryDark: return UIDBrush(brush: dataColor3(tonalRange: tonalRange), alpha: 0.35)
        }
    }

    func dataColor3Outline(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: dataColor3(tonalRange: tonalRange), alpha: 0.3)
        case .veryLight: return UIDBrush(brush: dataColor3(tonalRange: tonalRange), alpha: 0.3)
        case .bright: return UIDBrush(brush: dataColor3(tonalRange: tonalRange), alpha: 0.3)
        case .veryDark: return UIDBrush(brush: dataColor3(tonalRange: tonalRange), alpha: 0.3)
        }
    }

    func dataColor4(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color55)
        case .veryLight: return UIDBrush(colorLevel: .color55)
        case .bright: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 1)
        case .veryDark: return UIDBrush(colorLevel: .color50)
        }
    }

    func dataColor4Disabled(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: dataColor4(tonalRange: tonalRange), alpha: 0.35)
        case .veryLight: return UIDBrush(brush: dataColor4(tonalRange: tonalRange), alpha: 0.35)
        case .bright: return UIDBrush(brush: dataColor4(tonalRange: tonalRange), alpha: 0.35)
        case .veryDark: return UIDBrush(brush: dataColor4(tonalRange: tonalRange), alpha: 0.35)
        }
    }

    func dataColor4Outline(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: dataColor4(tonalRange: tonalRange), alpha: 0.3)
        case .veryLight: return UIDBrush(brush: dataColor4(tonalRange: tonalRange), alpha: 0.3)
        case .bright: return UIDBrush(brush: dataColor4(tonalRange: tonalRange), alpha: 0.3)
        case .veryDark: return UIDBrush(brush: dataColor4(tonalRange: tonalRange), alpha: 0.3)
        }
    }

    func datePickerDisabledOnText(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: controlPrimary(tonalRange: tonalRange))
        case .veryDark: return UIDBrush(brush: textDisabled(tonalRange: tonalRange))
        default: return UIDBrush()
        }
    }

    func datePickerDisabledRangeText(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: controlPrimaryDisabled(tonalRange: tonalRange))
        case .veryDark: return UIDBrush(brush: textDisabled(tonalRange: tonalRange))
        default: return UIDBrush()
        }
    }

    func datePickerHeader(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: controlPrimary(tonalRange: tonalRange), alpha: 0.6)
        case .veryLight: return UIDBrush(brush: controlPrimary(tonalRange: tonalRange), alpha: 0.6)
        case .bright: return UIDBrush(brush: controlPrimary(tonalRange: tonalRange), alpha: 0.6)
        case .veryDark: return UIDBrush(brush: navigationText(tonalRange: tonalRange), alpha: 0.6)
        }
    }

    func dialog(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 1)
        case .veryLight: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 1)
        case .bright: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 1)
        case .veryDark: return UIDBrush(colorLevel: .color70)
        }
    }

    func dimStrong(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color90, alpha: 0.8)
        case .veryLight: return UIDBrush(colorLevel: .color90, alpha: 0.8)
        case .bright: return UIDBrush(colorLevel: .color90, alpha: 0.8)
        case .veryDark: return UIDBrush(colorLevel: .color90, alpha: 0.8)
        }
    }

    func dimSubtle(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color90, alpha: 0.3)
        case .veryLight: return UIDBrush(colorLevel: .color90, alpha: 0.3)
        case .bright: return UIDBrush(colorLevel: .color90, alpha: 0.3)
        case .veryDark: return UIDBrush(colorLevel: .color90, alpha: 0.3)
        }
    }

    func dot(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: controlPrimary(tonalRange: tonalRange), alpha: 0.35)
        case .veryLight: return UIDBrush(brush: controlPrimary(tonalRange: tonalRange), alpha: 0.35)
        case .bright: return UIDBrush(brush: textPrimary(tonalRange: tonalRange), alpha: 0.35)
        case .veryDark: return UIDBrush(brush: textPrimary(tonalRange: tonalRange), alpha: 0.35)
        }
    }

    func dotActive(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: controlPrimary(tonalRange: tonalRange))
        case .veryLight: return UIDBrush(brush: controlPrimary(tonalRange: tonalRange))
        case .bright: return UIDBrush(brush: textPrimary(tonalRange: tonalRange))
        case .veryDark: return UIDBrush(brush: textPrimary(tonalRange: tonalRange))
        }
    }

    func dotHover(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: controlPrimary(tonalRange: tonalRange), alpha: 0.7)
        case .veryLight: return UIDBrush(brush: controlPrimary(tonalRange: tonalRange), alpha: 0.7)
        case .bright: return UIDBrush(brush: textPrimary(tonalRange: tonalRange), alpha: 0.7)
        case .veryDark: return UIDBrush(brush: textPrimary(tonalRange: tonalRange), alpha: 0.7)
        }
    }

    func fallbackColor(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color60, fixedColorRange: .signalRed)
        case .veryLight: return UIDBrush(colorLevel: .color60, fixedColorRange: .signalRed)
        case .bright: return UIDBrush(colorLevel: .color60, fixedColorRange: .signalRed)
        case .veryDark: return UIDBrush(colorLevel: .color60, fixedColorRange: .signalRed)
        }
    }

    func grayPrimaryText(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color75, fixedColorRange: .gray)
        case .veryLight: return UIDBrush(colorLevel: .color75, fixedColorRange: .gray)
        case .bright: return UIDBrush(colorLevel: .color75, fixedColorRange: .gray)
        case .veryDark: return UIDBrush(colorLevel: .color75, fixedColorRange: .gray)
        }
    }

    func graySecondaryText(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color65, fixedColorRange: .gray)
        case .veryLight: return UIDBrush(colorLevel: .color65, fixedColorRange: .gray)
        case .bright: return UIDBrush(colorLevel: .color65, fixedColorRange: .gray)
        case .veryDark: return UIDBrush(colorLevel: .color65, fixedColorRange: .gray)
        }
    }

    func grayTertiaryText(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: graySecondaryText(tonalRange: tonalRange), alpha: 0.7)
        case .veryLight: return UIDBrush(brush: graySecondaryText(tonalRange: tonalRange), alpha: 0.7)
        case .bright: return UIDBrush(brush: graySecondaryText(tonalRange: tonalRange), alpha: 0.7)
        case .veryDark: return UIDBrush(brush: graySecondaryText(tonalRange: tonalRange), alpha: 0.7)
        }
    }

    func gridViewBackgroundDark(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color90)
        case .veryLight: return UIDBrush(colorLevel: .color90)
        case .bright: return UIDBrush(colorLevel: .color90)
        case .veryDark: return UIDBrush(colorLevel: .color90)
        }
    }

    func gridViewBackgroundLight(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 1)
        case .veryLight: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 1)
        case .bright: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 1)
        case .veryDark: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 1)
        }
    }

    func gridViewHeaderGradientEnd(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: gridViewHeaderGradientStart(tonalRange: tonalRange), alpha: 0.0)
        case .veryLight: return UIDBrush(brush: gridViewHeaderGradientStart(tonalRange: tonalRange), alpha: 0.0)
        case .bright: return UIDBrush(brush: gridViewHeaderGradientStart(tonalRange: tonalRange), alpha: 0.0)
        case .veryDark: return UIDBrush(brush: gridViewHeaderGradientStart(tonalRange: tonalRange), alpha: 0.0)
        }
    }

    func gridViewHeaderGradientStart(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color90)
        case .veryLight: return UIDBrush(colorLevel: .color90)
        case .bright: return UIDBrush(colorLevel: .color90)
        case .veryDark: return UIDBrush(colorLevel: .color90)
        }
    }

    func gridViewHeaderNoGradient(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color90, alpha: 0.6)
        case .veryLight: return UIDBrush(colorLevel: .color90, alpha: 0.6)
        case .bright: return UIDBrush(colorLevel: .color90, alpha: 0.6)
        case .veryDark: return UIDBrush(colorLevel: .color90, alpha: 0.6)
        }
    }

    func gridViewHeaderPrimary(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color5)
        case .veryLight: return UIDBrush(colorLevel: .color15)
        case .bright: return UIDBrush(colorLevel: .color45)
        case .veryDark: return UIDBrush(colorLevel: .color75)
        }
    }

    func gridViewHeaderSecondary(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 1)
        case .veryLight: return UIDBrush(colorLevel: .color10)
        case .bright: return UIDBrush(colorLevel: .color40)
        case .veryDark: return UIDBrush(colorLevel: .color70)
        }
    }

    func hyperlinkHover(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color55)
        case .veryLight: return UIDBrush(colorLevel: .color55)
        case .bright: return UIDBrush(colorLevel: .color5)
        case .veryDark: return UIDBrush(colorLevel: .color10)
        }
    }

    func hyperlinkNormal(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color45)
        case .veryLight: return UIDBrush(colorLevel: .color45)
        case .bright: return UIDBrush(colorLevel: .color10)
        case .veryDark: return UIDBrush(colorLevel: .color20)
        }
    }

    func hyperlinkPressed(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color65)
        case .veryLight: return UIDBrush(colorLevel: .color65)
        case .bright: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 1)
        case .veryDark: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 1)
        }
    }

    func hyperlinkVisited(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color45, alpha: 0.7)
        case .veryLight: return UIDBrush(colorLevel: .color45, alpha: 0.7)
        case .bright: return UIDBrush(colorLevel: .color10, alpha: 0.7)
        case .veryDark: return UIDBrush(colorLevel: .color20, alpha: 0.7)
        }
    }

    func iconOff(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: neutralTextTertiary(tonalRange: tonalRange))
        case .veryLight: return UIDBrush(brush: colorTextVerydarkTertiary(tonalRange: tonalRange))
        case .bright: return UIDBrush(brush: lightTextTertiary(tonalRange: tonalRange))
        case .veryDark: return UIDBrush(brush: lightTextTertiary(tonalRange: tonalRange))
        }
    }

    func iconOn(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: colorTextBright(tonalRange: tonalRange))
        case .veryLight: return UIDBrush(brush: colorTextBright(tonalRange: tonalRange))
        case .bright: return UIDBrush(brush: lightTextSecondary(tonalRange: tonalRange))
        case .veryDark: return UIDBrush(brush: lightTextSecondary(tonalRange: tonalRange))
        }
    }

    func indicatorDisabled(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: indicatorOff(tonalRange: tonalRange), alpha: 0.2)
        case .veryLight: return UIDBrush(brush: indicatorOff(tonalRange: tonalRange), alpha: 0.2)
        case .bright: return UIDBrush(brush: indicatorOff(tonalRange: tonalRange), alpha: 0.2)
        case .veryDark: return UIDBrush(brush: indicatorOff(tonalRange: tonalRange), alpha: 0.2)
        }
    }

    func indicatorOff(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color90, alpha: 0.3)
        case .veryLight: return UIDBrush(colorLevel: .color90, alpha: 0.3)
        case .bright: return UIDBrush(colorLevel: .color90, alpha: 0.3)
        case .veryDark: return UIDBrush(colorLevel: .color90, alpha: 0.3)
        }
    }

    func indicatorOn(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color45, fixedColorRange: .signalGreen)
        case .veryLight: return UIDBrush(colorLevel: .color45, fixedColorRange: .signalGreen)
        case .bright: return UIDBrush(colorLevel: .color45, fixedColorRange: .signalGreen)
        case .veryDark: return UIDBrush(colorLevel: .color45, fixedColorRange: .signalGreen)
        }
    }

    func input(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 1)
        case .veryLight: return UIDBrush(colorLevel: .color5)
        case .bright: return UIDBrush(colorLevel: .color5)
        case .veryDark: return UIDBrush(colorLevel: .color10)
        }
    }

    func inputBorder(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color20, fixedColorRange: .gray)
        case .veryLight: return UIDBrush(brush: noColor(tonalRange: tonalRange))
        case .bright: return UIDBrush(brush: noColor(tonalRange: tonalRange))
        case .veryDark: return UIDBrush(brush: noColor(tonalRange: tonalRange))
        }
    }

    func inputBorderDisabled(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: inputBorder(tonalRange: tonalRange), alpha: 0.35)
        case .veryLight: return UIDBrush(brush: noColor(tonalRange: tonalRange))
        case .bright: return UIDBrush(brush: noColor(tonalRange: tonalRange))
        case .veryDark: return UIDBrush(brush: noColor(tonalRange: tonalRange))
        }
    }

    func inputBorderFocus(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: controlPrimary(tonalRange: tonalRange))
        case .veryLight: return UIDBrush(brush: noColor(tonalRange: tonalRange))
        case .bright: return UIDBrush(brush: noColor(tonalRange: tonalRange))
        case .veryDark: return UIDBrush(brush: noColor(tonalRange: tonalRange))
        }
    }

    func inputBorderFocusV2(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: controlPrimary(tonalRange: tonalRange))
        case .veryLight: return UIDBrush(colorLevel: .color75, alpha: 0.3)
        case .bright: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 0.35)
        case .veryDark: return UIDBrush(brush: controlPrimary(tonalRange: tonalRange))
        }
    }

    func inputBorderHover(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color30, fixedColorRange: .gray)
        case .veryLight: return UIDBrush(brush: noColor(tonalRange: tonalRange))
        case .bright: return UIDBrush(brush: noColor(tonalRange: tonalRange))
        case .veryDark: return UIDBrush(brush: noColor(tonalRange: tonalRange))
        }
    }

    func inputBorderHoverV2(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color75, fixedColorRange: .gray, alpha: 0.35)
        case .veryLight: return UIDBrush(colorLevel: .color75, alpha: 0.2)
        case .bright: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 0.25)
        case .veryDark: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 0.25)
        }
    }

    func inputButtonHover(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: inputButtonQuietHover(tonalRange: tonalRange))
        case .veryLight: return UIDBrush(colorLevel: .color75, alpha: 0.05)
        case .bright: return UIDBrush(colorLevel: .color75, alpha: 0.1)
        case .veryDark: return UIDBrush(colorLevel: .color75, alpha: 0.1)
        }
    }

    func inputButtonPressed(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: inputButtonQuietHover(tonalRange: tonalRange), alpha: 0.1)
        case .veryLight: return UIDBrush(brush: inputButtonHover(tonalRange: tonalRange), alpha: 0.1)
        case .bright: return UIDBrush(brush: inputButtonHover(tonalRange: tonalRange), alpha: 0.15)
        case .veryDark: return UIDBrush(brush: inputButtonHover(tonalRange: tonalRange), alpha: 0.15)
        }
    }

    func inputButtonQuietHover(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(hexColorStr: "#000000", alpha: 0.05)
        case .veryLight: return UIDBrush(colorLevel: .color75, alpha: 0.05)
        case .bright: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 0.05)
        case .veryDark: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 0.05)
        }
    }

    func inputButtonQuietPressed(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: inputButtonQuietHover(tonalRange: tonalRange), alpha: 0.1)
        case .veryLight: return UIDBrush(brush: inputButtonQuietHover(tonalRange: tonalRange), alpha: 0.1)
        case .bright: return UIDBrush(brush: inputButtonQuietHover(tonalRange: tonalRange), alpha: 0.1)
        case .veryDark: return UIDBrush(brush: inputButtonQuietHover(tonalRange: tonalRange), alpha: 0.1)
        }
    }

    func inputDisabled(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: input(tonalRange: tonalRange), alpha: 0.35)
        case .veryLight: return UIDBrush(brush: input(tonalRange: tonalRange), alpha: 0.35)
        case .bright: return UIDBrush(brush: input(tonalRange: tonalRange), alpha: 0.35)
        case .veryDark: return UIDBrush(brush: input(tonalRange: tonalRange), alpha: 0.35)
        }
    }

    func inputFocus(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 1)
        case .veryLight: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 1)
        case .bright: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 1)
        case .veryDark: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 1)
        }
    }

    func inputHintText(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color35, fixedColorRange: .gray)
        case .veryLight: return UIDBrush(colorLevel: .color35, fixedColorRange: .gray)
        case .bright: return UIDBrush(colorLevel: .color35, fixedColorRange: .gray)
        case .veryDark: return UIDBrush(colorLevel: .color35, fixedColorRange: .gray)
        }
    }

    func inputHover(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 1)
        case .veryLight: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 1)
        case .bright: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 1)
        case .veryDark: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 1)
        }
    }

    func inputOutline(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: noColor(tonalRange: tonalRange))
        case .veryLight: return UIDBrush(brush: controlPrimary(tonalRange: tonalRange), alpha: 0.2)
        case .bright: return UIDBrush(brush: controlPrimary(tonalRange: tonalRange), alpha: 0.25)
        case .veryDark: return UIDBrush(brush: controlPrimary(tonalRange: tonalRange), alpha: 0.35)
        }
    }

    func inputSeparator(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color20, fixedColorRange: .gray)
        case .veryLight: return UIDBrush(colorLevel: .color15)
        case .bright: return UIDBrush(colorLevel: .color15)
        case .veryDark: return UIDBrush(colorLevel: .color15)
        }
    }

    func inputSeparatorDisabled(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: inputSeparator(tonalRange: tonalRange), alpha: 0.35)
        case .veryLight: return UIDBrush(brush: inputSeparator(tonalRange: tonalRange), alpha: 0.35)
        case .bright: return UIDBrush(brush: inputSeparator(tonalRange: tonalRange), alpha: 0.35)
        case .veryDark: return UIDBrush(brush: inputSeparator(tonalRange: tonalRange), alpha: 0.35)
        }
    }

    func inputSeparatorDisabledV2(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: inputSeparatorV2(tonalRange: tonalRange), alpha: 0.1)
        case .veryLight: return UIDBrush(brush: inputSeparatorV2(tonalRange: tonalRange), alpha: 0.08)
        case .bright: return UIDBrush(brush: inputSeparatorV2(tonalRange: tonalRange), alpha: 0.08)
        case .veryDark: return UIDBrush(brush: inputSeparatorV2(tonalRange: tonalRange), alpha: 0.08)
        }
    }

    func inputSeparatorQuietV2(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: inputSeparatorV2(tonalRange: tonalRange))
        case .veryLight: return UIDBrush(colorLevel: .color75, alpha: 0.15)
        case .bright: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 0.25)
        case .veryDark: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 0.25)
        }
    }

    func inputSeparatorV2(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color75, fixedColorRange: .gray, alpha: 0.25)
        case .veryLight: return UIDBrush(colorLevel: .color75, alpha: 0.12)
        case .bright: return UIDBrush(colorLevel: .color75, alpha: 0.12)
        case .veryDark: return UIDBrush(colorLevel: .color75, alpha: 0.12)
        }
    }

    func inputTextDisabled(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: neutralTextDisabled(tonalRange: tonalRange))
        case .veryLight: return UIDBrush(brush: colorTextVerydarkDisabled(tonalRange: tonalRange))
        case .bright: return UIDBrush(brush: neutralTextDisabled(tonalRange: tonalRange))
        case .veryDark: return UIDBrush(brush: neutralTextDisabled(tonalRange: tonalRange))
        }
    }

    func inputTextEmphasis(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: colorTextBright(tonalRange: tonalRange))
        case .veryLight: return UIDBrush(brush: colorTextBright(tonalRange: tonalRange))
        case .bright: return UIDBrush(brush: colorTextBright(tonalRange: tonalRange))
        case .veryDark: return UIDBrush(brush: colorTextLight(tonalRange: tonalRange))
        }
    }

    func inputTextEmphasisDisabled(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: colorTextBrightDisabled(tonalRange: tonalRange))
        case .veryLight: return UIDBrush(brush: colorTextBrightDisabled(tonalRange: tonalRange))
        case .bright: return UIDBrush(brush: colorTextBrightDisabled(tonalRange: tonalRange))
        case .veryDark: return UIDBrush(brush: colorTextLightDisabled(tonalRange: tonalRange))
        }
    }

    func inputTextPrimary(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: neutralTextPrimary(tonalRange: tonalRange))
        case .veryLight: return UIDBrush(brush: colorTextVerydarkPrimary(tonalRange: tonalRange))
        case .bright: return UIDBrush(brush: neutralTextPrimary(tonalRange: tonalRange))
        case .veryDark: return UIDBrush(brush: neutralTextPrimary(tonalRange: tonalRange))
        }
    }

    func inputTextSecondary(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: neutralTextSecondary(tonalRange: tonalRange))
        case .veryLight: return UIDBrush(brush: colorTextVerydarkSecondary(tonalRange: tonalRange))
        case .bright: return UIDBrush(brush: neutralTextSecondary(tonalRange: tonalRange))
        case .veryDark: return UIDBrush(brush: neutralTextSecondary(tonalRange: tonalRange))
        }
    }

    func inputTextSelectionBackground(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color45, alpha: 0.2)
        case .veryLight: return UIDBrush(colorLevel: .color55, alpha: 0.2)
        case .bright: return UIDBrush(colorLevel: .color45, alpha: 0.2)
        case .veryDark: return UIDBrush(colorLevel: .color75, alpha: 0.2)
        }
    }

    func inputTextTertiary(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: neutralTextTertiary(tonalRange: tonalRange))
        case .veryLight: return UIDBrush(brush: colorTextVerydarkTertiary(tonalRange: tonalRange))
        case .bright: return UIDBrush(brush: neutralTextTertiary(tonalRange: tonalRange))
        case .veryDark: return UIDBrush(brush: neutralTextTertiary(tonalRange: tonalRange))
        }
    }

    func inputToolbar(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color75, fixedColorRange: .gray, alpha: 0.05)
        case .veryLight: return UIDBrush(colorLevel: .color75, fixedColorRange: .gray, alpha: 0.05)
        case .bright: return UIDBrush(colorLevel: .color75, fixedColorRange: .gray, alpha: 0.05)
        case .veryDark: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 0.12)
        }
    }

    func inputV2(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: input(tonalRange: tonalRange))
        case .veryLight: return UIDBrush(brush: noColor(tonalRange: tonalRange))
        case .bright: return UIDBrush(brush: noColor(tonalRange: tonalRange))
        case .veryDark: return UIDBrush(brush: noColor(tonalRange: tonalRange))
        }
    }

    func inputValidatedBackground(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return validationInputValidatedBackground(components:UIDBrushComponents())
        case .veryLight: return validationInputValidatedBackground(components:UIDBrushComponents())
        case .bright: return validationInputValidatedBackground(components:UIDBrushComponents())
        case .veryDark: return validationInputValidatedBackground(components:UIDBrushComponents())
        }
    }

    func inputValidatedBorder(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return validationInputValidatedBorder(components:UIDBrushComponents(colorLevel: .color60))
        case .veryLight: return UIDBrush(brush: noColor(tonalRange: tonalRange))
        case .bright: return UIDBrush(brush: noColor(tonalRange: tonalRange))
        case .veryDark: return UIDBrush(brush: noColor(tonalRange: tonalRange))
        }
    }

    func inputValidatedText(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return validationInputValidatedText(components:UIDBrushComponents(colorLevel: .color60))
        case .veryLight: return validationInputValidatedText(components:UIDBrushComponents(colorLevel: .color60))
        case .bright: return validationInputValidatedText(components:UIDBrushComponents(colorLevel: .color60))
        case .veryDark: return validationInputValidatedText(components:UIDBrushComponents(colorLevel: .color60))
        }
    }

    func itemOn(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: colorTextBright(tonalRange: tonalRange))
        case .veryLight: return UIDBrush(brush: colorTextBright(tonalRange: tonalRange))
        case .bright: return UIDBrush(brush: lightTextPrimary(tonalRange: tonalRange))
        case .veryDark: return UIDBrush(brush: lightTextPrimary(tonalRange: tonalRange))
        }
    }

    func lightCenter(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 0.3)
        case .veryLight: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 0.3)
        case .bright: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 0.3)
        case .veryDark: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 0.3)
        }
    }

    func lightEdge(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 0.0)
        case .veryLight: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 0.0)
        case .bright: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 0.0)
        case .veryDark: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 0.0)
        }
    }

    func lightSecondaryText(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color5)
        case .veryLight: return UIDBrush(colorLevel: .color5)
        case .bright: return UIDBrush(colorLevel: .color5)
        case .veryDark: return UIDBrush(colorLevel: .color5)
        }
    }

    func lightTextDisabled(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 0.35)
        case .veryLight: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 0.35)
        case .bright: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 0.35)
        case .veryDark: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 0.35)
        }
    }

    func lightTextPrimary(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 1)
        case .veryLight: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 1)
        case .bright: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 1)
        case .veryDark: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 1)
        }
    }

    func lightTextSecondary(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 0.8)
        case .veryLight: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 0.8)
        case .bright: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 0.8)
        case .veryDark: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 0.8)
        }
    }

    func lightTextTertiary(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 0.5)
        case .veryLight: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 0.5)
        case .bright: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 0.5)
        case .veryDark: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 0.5)
        }
    }

    func listFocus(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color75, fixedColorRange: .gray, alpha: 0.05)
        case .veryLight: return UIDBrush(colorLevel: .color75, alpha: 0.05)
        case .bright: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 0.1)
        case .veryDark: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 0.1)
        }
    }

    func listHover(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color75, fixedColorRange: .gray, alpha: 0.1)
        case .veryLight: return UIDBrush(colorLevel: .color75, alpha: 0.15)
        case .bright: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 0.15)
        case .veryDark: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 0.15)
        }
    }

    func listSelected(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color45, alpha: 0.1)
        case .veryLight: return UIDBrush(colorLevel: .color45, alpha: 0.15)
        case .bright: return UIDBrush(colorLevel: .color75, alpha: 0.15)
        case .veryDark: return UIDBrush(colorLevel: .color45, alpha: 0.15)
        }
    }

    func listSelectedDisabled(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: listSelected(tonalRange: tonalRange), alpha: 0.05)
        case .veryLight: return UIDBrush(brush: listSelected(tonalRange: tonalRange), alpha: 0.05)
        case .bright: return UIDBrush(brush: listSelected(tonalRange: tonalRange), alpha: 0.05)
        case .veryDark: return UIDBrush(brush: listSelected(tonalRange: tonalRange), alpha: 0.05)
        }
    }

    func moviebar(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: notYetDefined(tonalRange: tonalRange))
        case .veryLight: return UIDBrush(brush: notYetDefined(tonalRange: tonalRange))
        case .bright: return UIDBrush(brush: notYetDefined(tonalRange: tonalRange))
        case .veryDark: return UIDBrush(brush: notYetDefined(tonalRange: tonalRange))
        }
    }

    func navigationPrimary(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 1)
        case .veryLight: return UIDBrush(colorLevel: .color10)
        case .bright: return UIDBrush(colorLevel: .color40)
        case .veryDark: return UIDBrush(colorLevel: .color70)
        }
    }

    func navigationSecondary(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color5)
        case .veryLight: return UIDBrush(colorLevel: .color15)
        case .bright: return UIDBrush(colorLevel: .color45)
        case .veryDark: return UIDBrush(colorLevel: .color75)
        }
    }

    func navigationText(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: colorTextBright(tonalRange: tonalRange))
        case .veryLight: return UIDBrush(brush: colorTextBright(tonalRange: tonalRange))
        case .bright: return UIDBrush(brush: textPrimary(tonalRange: tonalRange))
        case .veryDark: return UIDBrush(brush: textPrimary(tonalRange: tonalRange))
        }
    }

    func neutralTextDisabled(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color75, fixedColorRange: .gray, alpha: 0.35)
        case .veryLight: return UIDBrush(colorLevel: .color75, fixedColorRange: .gray, alpha: 0.35)
        case .bright: return UIDBrush(colorLevel: .color75, fixedColorRange: .gray, alpha: 0.35)
        case .veryDark: return UIDBrush(colorLevel: .color75, fixedColorRange: .gray, alpha: 0.35)
        }
    }

    func neutralTextPrimary(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color75, fixedColorRange: .gray)
        case .veryLight: return UIDBrush(colorLevel: .color75, fixedColorRange: .gray)
        case .bright: return UIDBrush(colorLevel: .color75, fixedColorRange: .gray)
        case .veryDark: return UIDBrush(colorLevel: .color75, fixedColorRange: .gray)
        }
    }

    func neutralTextSecondary(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color75, fixedColorRange: .gray, alpha: 0.8)
        case .veryLight: return UIDBrush(colorLevel: .color75, fixedColorRange: .gray, alpha: 0.8)
        case .bright: return UIDBrush(colorLevel: .color75, fixedColorRange: .gray, alpha: 0.8)
        case .veryDark: return UIDBrush(colorLevel: .color75, fixedColorRange: .gray, alpha: 0.8)
        }
    }

    func neutralTextTertiary(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color75, fixedColorRange: .gray, alpha: 0.5)
        case .veryLight: return UIDBrush(colorLevel: .color75, fixedColorRange: .gray, alpha: 0.5)
        case .bright: return UIDBrush(colorLevel: .color75, fixedColorRange: .gray, alpha: 0.5)
        case .veryDark: return UIDBrush(colorLevel: .color75, fixedColorRange: .gray, alpha: 0.5)
        }
    }

    func noColor(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 0.0)
        case .veryLight: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 0.0)
        case .bright: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 0.0)
        case .veryDark: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 0.0)
        }
    }

    func notYetDefined(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color60, fixedColorRange: .signalPink)
        case .veryLight: return UIDBrush(colorLevel: .color60, fixedColorRange: .signalPink)
        case .bright: return UIDBrush(colorLevel: .color60, fixedColorRange: .signalPink)
        case .veryDark: return UIDBrush(colorLevel: .color60, fixedColorRange: .signalPink)
        }
    }

    func notYetDefinedBorder(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color30, fixedColorRange: .signalCyan)
        case .veryLight: return UIDBrush(colorLevel: .color30, fixedColorRange: .signalCyan)
        case .bright: return UIDBrush(colorLevel: .color30, fixedColorRange: .signalCyan)
        case .veryDark: return UIDBrush(colorLevel: .color30, fixedColorRange: .signalCyan)
        }
    }

    func notYetDefinedBorderDisabled(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: notYetDefinedBorder(tonalRange: tonalRange), alpha: 0.35)
        case .veryLight: return UIDBrush(brush: notYetDefinedBorder(tonalRange: tonalRange), alpha: 0.35)
        case .bright: return UIDBrush(brush: notYetDefinedBorder(tonalRange: tonalRange), alpha: 0.35)
        case .veryDark: return UIDBrush(brush: notYetDefinedBorder(tonalRange: tonalRange), alpha: 0.35)
        }
    }

    func notYetDefinedDisabled(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: notYetDefined(tonalRange: tonalRange), alpha: 0.35)
        case .veryLight: return UIDBrush(brush: notYetDefined(tonalRange: tonalRange), alpha: 0.35)
        case .bright: return UIDBrush(brush: notYetDefined(tonalRange: tonalRange), alpha: 0.35)
        case .veryDark: return UIDBrush(brush: notYetDefined(tonalRange: tonalRange), alpha: 0.35)
        }
    }

    func notYetDefinedHover(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: notYetDefined(tonalRange: tonalRange), alpha: 0.7)
        case .veryLight: return UIDBrush(brush: notYetDefined(tonalRange: tonalRange), alpha: 0.7)
        case .bright: return UIDBrush(brush: notYetDefined(tonalRange: tonalRange), alpha: 0.7)
        case .veryDark: return UIDBrush(brush: notYetDefined(tonalRange: tonalRange), alpha: 0.7)
        }
    }

    func notYetDefinedText(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color30, fixedColorRange: .signalYellow)
        case .veryLight: return UIDBrush(colorLevel: .color30, fixedColorRange: .signalYellow)
        case .bright: return UIDBrush(colorLevel: .color30, fixedColorRange: .signalYellow)
        case .veryDark: return UIDBrush(colorLevel: .color30, fixedColorRange: .signalYellow)
        }
    }

    func notYetDefinedTextDisabled(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: notYetDefinedText(tonalRange: tonalRange), alpha: 0.35)
        case .veryLight: return UIDBrush(brush: notYetDefinedText(tonalRange: tonalRange), alpha: 0.35)
        case .bright: return UIDBrush(brush: notYetDefinedText(tonalRange: tonalRange), alpha: 0.35)
        case .veryDark: return UIDBrush(brush: notYetDefinedText(tonalRange: tonalRange), alpha: 0.35)
        }
    }

    func notYetDefinedTextOff(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: notYetDefinedText(tonalRange: tonalRange), alpha: 0.45)
        case .veryLight: return UIDBrush(brush: notYetDefinedText(tonalRange: tonalRange), alpha: 0.45)
        case .bright: return UIDBrush(brush: notYetDefinedText(tonalRange: tonalRange), alpha: 0.45)
        case .veryDark: return UIDBrush(brush: notYetDefinedText(tonalRange: tonalRange), alpha: 0.45)
        }
    }

    func notificationBackground(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 1)
        case .veryLight: return UIDBrush(colorLevel: .color15)
        case .veryDark: return UIDBrush(colorLevel: .color65)
        default: return UIDBrush()
        }
    }

    func notificationHeaderErrorText(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color60, fixedColorRange: .signalRed)
        case .veryLight: return UIDBrush(colorLevel: .color75)
        case .veryDark: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 1)
        default: return UIDBrush()
        }
    }

    func notificationHeaderInfoText(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color60, fixedColorRange: .signalBlue)
        case .veryLight: return UIDBrush(colorLevel: .color75)
        case .veryDark: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 1)
        default: return UIDBrush()
        }
    }

    func notificationHeaderSuccessText(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color60, fixedColorRange: .signalGreen)
        case .veryLight: return UIDBrush(colorLevel: .color75)
        case .veryDark: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 1)
        default: return UIDBrush()
        }
    }

    func notificationHeaderText(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color75, fixedColorRange: .gray)
        case .veryLight: return UIDBrush(colorLevel: .color75)
        case .veryDark: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 1)
        default: return UIDBrush()
        }
    }

    func notificationHeaderWarningText(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color60, fixedColorRange: .signalOrange)
        case .veryLight: return UIDBrush(colorLevel: .color75)
        case .veryDark: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 1)
        default: return UIDBrush()
        }
    }

    func notificationIcon(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: textPrimary(tonalRange: tonalRange))
        case .veryLight: return UIDBrush(brush: textPrimary(tonalRange: tonalRange))
        case .veryDark: return UIDBrush(brush: textPrimary(tonalRange: tonalRange))
        default: return UIDBrush()
        }
    }

    func notificationSignalError(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: signalError(tonalRange: tonalRange))
        case .veryLight: return UIDBrush(brush: signalError(tonalRange: tonalRange))
        case .veryDark: return UIDBrush(brush: signalError(tonalRange: tonalRange))
        default: return UIDBrush()
        }
    }

    func notificationSignalInfo(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: signalInfo(tonalRange: tonalRange))
        case .veryLight: return UIDBrush(brush: signalInfo(tonalRange: tonalRange))
        case .veryDark: return UIDBrush(brush: signalInfo(tonalRange: tonalRange))
        default: return UIDBrush()
        }
    }

    func notificationSignalSignalError(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .bright: return UIDBrush(colorLevel: .color60, fixedColorRange: .signalRed)
        default: return UIDBrush()
        }
    }

    func notificationSignalSignalInfo(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .bright: return UIDBrush(colorLevel: .color60, fixedColorRange: .signalBlue)
        default: return UIDBrush()
        }
    }

    func notificationSignalSignalSucces(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .bright: return UIDBrush(colorLevel: .color60, fixedColorRange: .signalGreen)
        default: return UIDBrush()
        }
    }

    func notificationSignalSignalWarning(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .bright: return UIDBrush(colorLevel: .color60, fixedColorRange: .signalOrange)
        default: return UIDBrush()
        }
    }

    func notificationSignalSuccess(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: signalSuccess(tonalRange: tonalRange))
        case .veryLight: return UIDBrush(brush: signalSuccess(tonalRange: tonalRange))
        case .veryDark: return UIDBrush(brush: signalSuccess(tonalRange: tonalRange))
        default: return UIDBrush()
        }
    }

    func notificationSignalWarning(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: signalWarning(tonalRange: tonalRange))
        case .veryLight: return UIDBrush(brush: signalWarning(tonalRange: tonalRange))
        case .veryDark: return UIDBrush(brush: signalWarning(tonalRange: tonalRange))
        default: return UIDBrush()
        }
    }

    func notificationThemedBackground(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color65)
        case .veryLight: return UIDBrush(colorLevel: .color65)
        case .bright: return UIDBrush(colorLevel: .color65)
        case .veryDark: return UIDBrush(colorLevel: .color65)
        }
    }

    func philipsBlue(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(hexColorStr: "#0B5ED7", alpha: 1)
        case .veryLight: return UIDBrush(hexColorStr: "#0B5ED7", alpha: 1)
        case .bright: return UIDBrush(hexColorStr: "#0B5ED7", alpha: 1)
        case .veryDark: return UIDBrush(hexColorStr: "#0B5ED7", alpha: 1)
        }
    }

    func philipsShield(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: philipsBlue(tonalRange: tonalRange))
        case .veryLight: return UIDBrush(brush: philipsBlue(tonalRange: tonalRange))
        case .bright: return UIDBrush(brush: philipsBlue(tonalRange: tonalRange))
        case .veryDark: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 1)
        }
    }

    func pictorialHeaderDisabled(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        default: return UIDBrush()
        }
    }

    func pictorialIndexHeaderBackgroundHover(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        default: return UIDBrush()
        }
    }

    func popup(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 1)
        case .veryLight: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 1)
        case .bright: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 1)
        case .veryDark: return UIDBrush(colorLevel: .color65)
        }
    }

    func primaryText(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color75, fixedColorRange: .gray)
        case .veryLight: return UIDBrush(colorLevel: .color75)
        case .bright: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 1)
        case .veryDark: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 1)
        }
    }

    func primaryTextDisabled(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color75, fixedColorRange: .gray, alpha: 0.35)
        case .veryLight: return UIDBrush(colorLevel: .color75, alpha: 0.35)
        case .bright: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 0.35)
        case .veryDark: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 0.35)
        }
    }

    func quietToggleOffHover(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: controlPrimary(tonalRange: tonalRange), alpha: 0.1)
        case .veryLight: return UIDBrush(brush: controlPrimary(tonalRange: tonalRange), alpha: 0.1)
        case .bright: return UIDBrush(colorLevel: .color10, alpha: 0.1)
        case .veryDark: return UIDBrush(colorLevel: .color10, alpha: 0.1)
        }
    }

    func quietToggleOffText(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: controlPrimary(tonalRange: tonalRange), alpha: 0.5, offset: 10)
        case .veryLight: return UIDBrush(brush: controlPrimary(tonalRange: tonalRange), alpha: 0.5, offset: 10)
        case .bright: return UIDBrush(colorLevel: .color5, alpha: 0.5)
        case .veryDark: return UIDBrush(colorLevel: .color5, alpha: 0.5)
        }
    }

    func quietToggleOffTextDisabled(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: controlPrimary(tonalRange: tonalRange), alpha: 0.2, offset: 10)
        case .veryLight: return UIDBrush(brush: controlPrimary(tonalRange: tonalRange), alpha: 0.2, offset: 10)
        case .bright: return UIDBrush(colorLevel: .color5, alpha: 0.2)
        case .veryDark: return UIDBrush(colorLevel: .color5, alpha: 0.2)
        }
    }

    func quietToggleOffTextHover(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: controlPrimary(tonalRange: tonalRange), offset: 10)
        case .veryLight: return UIDBrush(brush: controlPrimary(tonalRange: tonalRange), offset: 10)
        case .bright: return UIDBrush(colorLevel: .color5)
        case .veryDark: return UIDBrush(colorLevel: .color5)
        }
    }

    func quietToggleOn(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: controlPrimary(tonalRange: tonalRange))
        case .veryLight: return UIDBrush(brush: controlPrimary(tonalRange: tonalRange))
        case .bright: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 1)
        case .veryDark: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 1)
        }
    }

    func quietToggleOnDisabled(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: controlPrimary(tonalRange: tonalRange), alpha: 0.35)
        case .veryLight: return UIDBrush(brush: controlPrimary(tonalRange: tonalRange), alpha: 0.35)
        case .bright: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 0.35)
        case .veryDark: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 0.35)
        }
    }

    func quietToggleOnText(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 1)
        case .veryLight: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 1)
        case .bright: return UIDBrush(colorLevel: .color75)
        case .veryDark: return UIDBrush(colorLevel: .color75)
        }
    }

    func quietToggleOnTextDisabled(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 0.7)
        case .veryLight: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 0.7)
        case .bright: return UIDBrush(colorLevel: .color75, alpha: 0.5)
        case .veryDark: return UIDBrush(colorLevel: .color75, alpha: 0.5)
        }
    }

    func ratingStarOff(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: textPrimary(tonalRange: tonalRange), alpha: 0.25)
        case .veryLight: return UIDBrush(brush: textPrimary(tonalRange: tonalRange), alpha: 0.25)
        case .bright: return UIDBrush(brush: textPrimary(tonalRange: tonalRange), alpha: 0.3)
        case .veryDark: return UIDBrush(brush: textPrimary(tonalRange: tonalRange), alpha: 0.3)
        }
    }

    func ratingStarOn(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color60, fixedColorRange: .signalOrange)
        case .veryLight: return UIDBrush(colorLevel: .color60, fixedColorRange: .signalOrange)
        case .bright: return UIDBrush(colorLevel: .color30, fixedColorRange: .signalOrange)
        case .veryDark: return UIDBrush(colorLevel: .color30, fixedColorRange: .signalOrange)
        }
    }

    func ratingTextOn(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color60, fixedColorRange: .signalOrange)
        case .veryLight: return UIDBrush(brush: textTertiary(tonalRange: tonalRange))
        case .bright: return UIDBrush(brush: textTertiary(tonalRange: tonalRange))
        case .veryDark: return UIDBrush(colorLevel: .color30, fixedColorRange: .signalOrange)
        }
    }

    func scrollbar(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color75, fixedColorRange: .gray, alpha: 0.45)
        case .veryLight: return UIDBrush(colorLevel: .color75, alpha: 0.45)
        case .bright: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 0.7)
        case .veryDark: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 0.5)
        }
    }

    func scrollbarDisabled(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color75, fixedColorRange: .gray, alpha: 0.15)
        case .veryLight: return UIDBrush(colorLevel: .color75, alpha: 0.15)
        case .bright: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 0.25)
        case .veryDark: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 0.15)
        }
    }

    func scrollbarHover(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color75, fixedColorRange: .gray, alpha: 0.55)
        case .veryLight: return UIDBrush(colorLevel: .color75, alpha: 0.55)
        case .bright: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 0.8)
        case .veryDark: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 0.7)
        }
    }

    func scrollbarTrack(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color75, fixedColorRange: .gray, alpha: 0.1)
        case .veryLight: return UIDBrush(colorLevel: .color75, alpha: 0.1)
        case .bright: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 0.15)
        case .veryDark: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 0.15)
        }
    }

    func scrollbarTrackDisabled(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color75, fixedColorRange: .gray, alpha: 0.1)
        case .veryLight: return UIDBrush(colorLevel: .color75, alpha: 0.1)
        case .bright: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 0.1)
        case .veryDark: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 0.1)
        }
    }

    func separator(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: neutralTextPrimary(tonalRange: tonalRange), alpha: 0.1)
        case .veryLight: return UIDBrush(brush: colorTextVerydarkPrimary(tonalRange: tonalRange), alpha: 0.15)
        case .bright: return UIDBrush(brush: lightTextPrimary(tonalRange: tonalRange), alpha: 0.15)
        case .veryDark: return UIDBrush(brush: lightTextPrimary(tonalRange: tonalRange), alpha: 0.15)
        }
    }

    func separatorBlack(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(hexColorStr: "#000000", alpha: 0.12)
        case .veryLight: return UIDBrush(hexColorStr: "#000000", alpha: 0.12)
        case .bright: return UIDBrush(hexColorStr: "#000000", alpha: 0.12)
        case .veryDark: return UIDBrush(hexColorStr: "#000000", alpha: 0.12)
        }
    }

    func separatorColor(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color75, alpha: 0.12)
        case .veryLight: return UIDBrush(colorLevel: .color75, alpha: 0.12)
        case .bright: return UIDBrush(colorLevel: .color75, alpha: 0.12)
        case .veryDark: return UIDBrush(colorLevel: .color75, alpha: 0.12)
        }
    }

    func separatorWhite(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 0.12)
        case .veryLight: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 0.12)
        case .bright: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 0.12)
        case .veryDark: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 0.12)
        }
    }

    func shadowLevelOne(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(hexColorStr: "#000000", alpha: 0.2)
        case .veryLight: return UIDBrush(hexColorStr: "#000000", alpha: 0.2)
        case .bright: return UIDBrush(hexColorStr: "#000000", alpha: 0.2)
        case .veryDark: return UIDBrush(hexColorStr: "#000000", alpha: 0.35)
        }
    }

    func shadowLevelOneDisabled(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(hexColorStr: "#000000", alpha: 0.1)
        case .veryLight: return UIDBrush(hexColorStr: "#000000", alpha: 0.1)
        case .bright: return UIDBrush(hexColorStr: "#000000", alpha: 0.1)
        case .veryDark: return UIDBrush(hexColorStr: "#000000", alpha: 0.1)
        }
    }

    func shadowLevelThree(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(hexColorStr: "#000000", alpha: 0.2)
        case .veryLight: return UIDBrush(hexColorStr: "#000000", alpha: 0.2)
        case .bright: return UIDBrush(hexColorStr: "#000000", alpha: 0.2)
        case .veryDark: return UIDBrush(hexColorStr: "#000000", alpha: 0.35)
        }
    }

    func shadowLevelTwo(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(hexColorStr: "#000000", alpha: 0.2)
        case .veryLight: return UIDBrush(hexColorStr: "#000000", alpha: 0.2)
        case .bright: return UIDBrush(hexColorStr: "#000000", alpha: 0.2)
        case .veryDark: return UIDBrush(hexColorStr: "#000000", alpha: 0.35)
        }
    }

    func signalError(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color60, fixedColorRange: .signalRed)
        case .veryLight: return UIDBrush(colorLevel: .color60, fixedColorRange: .signalRed)
        case .bright: return UIDBrush(colorLevel: .color45, fixedColorRange: .signalOrange)
        case .veryDark: return UIDBrush(colorLevel: .color45, fixedColorRange: .signalRed)
        }
    }

    func signalErrorText(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: signalError(tonalRange: tonalRange))
        case .veryLight: return UIDBrush(brush: textPrimary(tonalRange: tonalRange))
        case .veryDark: return UIDBrush(brush: signalError(tonalRange: tonalRange))
        default: return UIDBrush()
        }
    }

    func signalInfo(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color60, fixedColorRange: .signalBlue)
        case .veryLight: return UIDBrush(colorLevel: .color60, fixedColorRange: .signalBlue)
        case .bright: return UIDBrush(colorLevel: .color30, fixedColorRange: .signalBlue)
        case .veryDark: return UIDBrush(colorLevel: .color45, fixedColorRange: .signalBlue)
        }
    }

    func signalInfoText(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: signalInfo(tonalRange: tonalRange))
        case .veryLight: return UIDBrush(brush: textPrimary(tonalRange: tonalRange))
        case .veryDark: return UIDBrush(brush: signalInfo(tonalRange: tonalRange))
        default: return UIDBrush()
        }
    }

    func signalSuccess(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color60, fixedColorRange: .signalGreen)
        case .veryLight: return UIDBrush(colorLevel: .color60, fixedColorRange: .signalGreen)
        case .bright: return UIDBrush(colorLevel: .color30, fixedColorRange: .signalGreen)
        case .veryDark: return UIDBrush(colorLevel: .color45, fixedColorRange: .signalGreen)
        }
    }

    func signalSuccessText(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: signalSuccess(tonalRange: tonalRange))
        case .veryLight: return UIDBrush(brush: textPrimary(tonalRange: tonalRange))
        case .veryDark: return UIDBrush(brush: signalSuccess(tonalRange: tonalRange))
        default: return UIDBrush()
        }
    }

    func signalWarning(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color60, fixedColorRange: .signalOrange)
        case .veryLight: return UIDBrush(colorLevel: .color60, fixedColorRange: .signalOrange)
        case .bright: return UIDBrush(colorLevel: .color45, fixedColorRange: .signalYellow)
        case .veryDark: return UIDBrush(colorLevel: .color30, fixedColorRange: .signalOrange)
        }
    }

    func signalWarningText(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: signalWarning(tonalRange: tonalRange))
        case .veryLight: return UIDBrush(brush: textPrimary(tonalRange: tonalRange))
        case .veryDark: return UIDBrush(brush: signalWarning(tonalRange: tonalRange))
        default: return UIDBrush()
        }
    }

    func springboardFocus(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: controlPrimary(tonalRange: tonalRange), alpha: 0.2)
        case .veryLight: return UIDBrush(brush: controlPrimary(tonalRange: tonalRange), alpha: 0.2)
        case .bright: return UIDBrush(brush: controlPrimary(tonalRange: tonalRange), alpha: 0.25)
        case .veryDark: return UIDBrush(brush: controlPrimary(tonalRange: tonalRange), alpha: 0.35)
        }
    }

    func springboardHover(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color5)
        case .veryLight: return UIDBrush(colorLevel: .color25)
        case .bright: return UIDBrush(colorLevel: .color55)
        case .veryDark: return UIDBrush(colorLevel: .color75)
        }
    }

    func springboardIcon(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color45)
        case .veryLight: return UIDBrush(colorLevel: .color45)
        case .bright: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 1)
        case .veryDark: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 1)
        }
    }

    func springboardIconDisabled(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color45, alpha: 0.25)
        case .veryLight: return UIDBrush(colorLevel: .color45, alpha: 0.25)
        case .bright: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 0.25)
        case .veryDark: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 0.25)
        }
    }

    func springboardPressed(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color5)
        case .veryLight: return UIDBrush(colorLevel: .color30)
        case .bright: return UIDBrush(colorLevel: .color60)
        case .veryDark: return UIDBrush(colorLevel: .color70)
        }
    }

    func statusBarAndroid6(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: navigationPrimary(tonalRange: tonalRange))
        case .veryLight: return UIDBrush(brush: navigationPrimary(tonalRange: tonalRange))
        case .bright: return UIDBrush(brush: navigationPrimary(tonalRange: tonalRange))
        case .veryDark: return UIDBrush(brush: navigationPrimary(tonalRange: tonalRange))
        }
    }

    func statusBarAndroid6Text(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(hexColorStr: "#000000", alpha: 0.6)
        case .veryLight: return UIDBrush(hexColorStr: "#000000", alpha: 1)
        case .bright: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 1)
        case .veryDark: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 1)
        }
    }

    func statusBarAndroid6Top(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: navigationPrimary(tonalRange: tonalRange), alpha: 0.15)
        case .veryLight: return UIDBrush(brush: navigationPrimary(tonalRange: tonalRange), alpha: 0.15)
        case .bright: return UIDBrush(brush: navigationPrimary(tonalRange: tonalRange), alpha: 0.2)
        case .veryDark: return UIDBrush(brush: navigationPrimary(tonalRange: tonalRange), alpha: 0.15)
        }
    }

    func statusBarIos(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: navigationPrimary(tonalRange: tonalRange))
        case .veryLight: return UIDBrush(brush: navigationPrimary(tonalRange: tonalRange))
        case .bright: return UIDBrush(brush: navigationPrimary(tonalRange: tonalRange))
        case .veryDark: return UIDBrush(brush: navigationPrimary(tonalRange: tonalRange))
        }
    }

    func statusBarIosText(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(hexColorStr: "#000000", alpha: 1)
        case .veryLight: return UIDBrush(hexColorStr: "#000000", alpha: 1)
        case .bright: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 1)
        case .veryDark: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 1)
        }
    }

    func statusIndicatorBackground(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color5)
        case .veryLight: return UIDBrush(colorLevel: .color15)
        case .bright: return UIDBrush(colorLevel: .color45)
        case .veryDark: return UIDBrush(colorLevel: .color75)
        }
    }

    func statusIndicatorData(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color45)
        case .veryLight: return UIDBrush(colorLevel: .color75)
        case .bright: return UIDBrush(colorLevel: .color0)
        case .veryDark: return UIDBrush(colorLevel: .color10)
        }
    }

    func statusIndicatorReferenceBackground(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color15)
        case .veryLight: return UIDBrush(colorLevel: .color30)
        case .bright: return UIDBrush(colorLevel: .color30)
        case .veryDark: return UIDBrush(colorLevel: .color60)
        }
    }

    func statusIndicatorReferenceBackgroundActive(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color25)
        case .veryLight: return UIDBrush(colorLevel: .color40)
        case .bright: return UIDBrush(colorLevel: .color20)
        case .veryDark: return UIDBrush(colorLevel: .color50)
        }
    }

    func statusIndicatorReferenceBackgroundProgress(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color30)
        case .veryLight: return UIDBrush(colorLevel: .color45)
        case .bright: return UIDBrush(colorLevel: .color15)
        default: return UIDBrush()
        }
    }

    func statusIndicatorReferenceBackgroundProgress2(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color30)
        case .veryLight: return UIDBrush(colorLevel: .color45)
        case .veryDark: return UIDBrush(colorLevel: .color45)
        default: return UIDBrush()
        }
    }

    func stickyPanel(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: contentPrimary(tonalRange: tonalRange))
        case .veryLight: return UIDBrush(brush: contentSecondary(tonalRange: tonalRange))
        case .bright: return UIDBrush(brush: contentSecondary(tonalRange: tonalRange))
        case .veryDark: return UIDBrush(brush: contentSecondary(tonalRange: tonalRange))
        }
    }

    func textDisabled(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: neutralTextDisabled(tonalRange: tonalRange))
        case .veryLight: return UIDBrush(brush: colorTextVerydarkDisabled(tonalRange: tonalRange))
        case .bright: return UIDBrush(brush: lightTextDisabled(tonalRange: tonalRange), alpha: 0.45)
        case .veryDark: return UIDBrush(brush: lightTextDisabled(tonalRange: tonalRange))
        }
    }

    func textEmphasis(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: colorTextBright(tonalRange: tonalRange))
        case .veryLight: return UIDBrush(brush: colorTextBright(tonalRange: tonalRange))
        case .bright: return UIDBrush(brush: colorTextVerylight(tonalRange: tonalRange))
        case .veryDark: return UIDBrush(brush: colorTextLight(tonalRange: tonalRange))
        }
    }

    func textEmphasisDisabled(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: colorTextBrightDisabled(tonalRange: tonalRange))
        case .veryLight: return UIDBrush(brush: colorTextBrightDisabled(tonalRange: tonalRange))
        case .bright: return UIDBrush(brush: colorTextVerylightDisabled(tonalRange: tonalRange))
        case .veryDark: return UIDBrush(brush: colorTextLightDisabled(tonalRange: tonalRange))
        }
    }

    func textOff(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: neutralTextSecondary(tonalRange: tonalRange))
        case .veryLight: return UIDBrush(brush: colorTextVerydarkSecondary(tonalRange: tonalRange))
        case .bright: return UIDBrush(brush: lightTextSecondary(tonalRange: tonalRange))
        case .veryDark: return UIDBrush(brush: lightTextSecondary(tonalRange: tonalRange))
        }
    }

    func textPrimary(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: neutralTextPrimary(tonalRange: tonalRange))
        case .veryLight: return UIDBrush(brush: colorTextVerydarkPrimary(tonalRange: tonalRange))
        case .bright: return UIDBrush(brush: lightTextPrimary(tonalRange: tonalRange))
        case .veryDark: return UIDBrush(brush: lightTextPrimary(tonalRange: tonalRange))
        }
    }

    func textPrimaryDisabled(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: neutralTextPrimary(tonalRange: tonalRange), alpha: 0.35)
        case .veryLight: return UIDBrush(brush: colorTextVerydarkPrimary(tonalRange: tonalRange), alpha: 0.35)
        case .bright: return UIDBrush(brush: lightTextPrimary(tonalRange: tonalRange), alpha: 0.35)
        case .veryDark: return UIDBrush(brush: lightTextPrimary(tonalRange: tonalRange), alpha: 0.35)
        }
    }

    func textSecondary(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: neutralTextSecondary(tonalRange: tonalRange))
        case .veryLight: return UIDBrush(brush: colorTextVerydarkSecondary(tonalRange: tonalRange))
        case .bright: return UIDBrush(brush: lightTextSecondary(tonalRange: tonalRange), alpha: 0.85)
        case .veryDark: return UIDBrush(brush: lightTextSecondary(tonalRange: tonalRange))
        }
    }

    func textSecondaryDisabled(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color65, fixedColorRange: .gray, alpha: 0.35)
        case .veryLight: return UIDBrush(colorLevel: .color65, alpha: 0.35)
        case .bright: return UIDBrush(colorLevel: .color5, alpha: 0.35)
        case .veryDark: return UIDBrush(colorLevel: .color5, alpha: 0.35)
        }
    }

    func textSelectionBackground(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color45, alpha: 0.2)
        case .veryLight: return UIDBrush(colorLevel: .color55, alpha: 0.2)
        case .bright: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 0.2)
        case .veryDark: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 0.2)
        }
    }

    func textTertiary(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: neutralTextTertiary(tonalRange: tonalRange))
        case .veryLight: return UIDBrush(brush: colorTextVerydarkTertiary(tonalRange: tonalRange))
        case .bright: return UIDBrush(brush: lightTextTertiary(tonalRange: tonalRange), alpha: 0.6)
        case .veryDark: return UIDBrush(brush: lightTextTertiary(tonalRange: tonalRange))
        }
    }

    func thumb(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 1)
        case .veryLight: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 1)
        case .bright: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 1)
        case .veryDark: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 1)
        }
    }

    func thumbDisabled(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: contentTertiary(tonalRange: tonalRange))
        case .veryLight: return UIDBrush(brush: contentTertiary(tonalRange: tonalRange))
        case .bright: return UIDBrush(brush: contentTertiary(tonalRange: tonalRange))
        case .veryDark: return UIDBrush(colorLevel: .color60)
        }
    }

    func toggleOff(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: controlPrimary(tonalRange: tonalRange), alpha: 0.2)
        case .veryLight: return UIDBrush(brush: controlPrimary(tonalRange: tonalRange), alpha: 0.2)
        case .bright: return UIDBrush(colorLevel: .color10, alpha: 0.2)
        case .veryDark: return UIDBrush(colorLevel: .color10, alpha: 0.2)
        }
    }

    func toggleOffDisabled(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: controlPrimary(tonalRange: tonalRange), alpha: 0.1)
        case .veryLight: return UIDBrush(brush: controlPrimary(tonalRange: tonalRange), alpha: 0.1)
        case .bright: return UIDBrush(colorLevel: .color10, alpha: 0.1)
        case .veryDark: return UIDBrush(colorLevel: .color10, alpha: 0.1)
        }
    }

    func toggleOffHover(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: controlPrimary(tonalRange: tonalRange), alpha: 0.35)
        case .veryLight: return UIDBrush(brush: controlPrimary(tonalRange: tonalRange), alpha: 0.35)
        case .bright: return UIDBrush(colorLevel: .color10, alpha: 0.35)
        case .veryDark: return UIDBrush(colorLevel: .color10, alpha: 0.35)
        }
    }

    func toggleOffIcon(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: controlPrimary(tonalRange: tonalRange), alpha: 0.5, offset: 10)
        case .veryLight: return UIDBrush(brush: controlPrimary(tonalRange: tonalRange), alpha: 0.5, offset: 10)
        case .bright: return UIDBrush(colorLevel: .color5, alpha: 0.5)
        case .veryDark: return UIDBrush(colorLevel: .color5, alpha: 0.5)
        }
    }

    func toggleOffIconHover(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: controlPrimary(tonalRange: tonalRange), offset: 10)
        case .veryLight: return UIDBrush(brush: controlPrimary(tonalRange: tonalRange), offset: 10)
        case .bright: return UIDBrush(colorLevel: .color5)
        case .veryDark: return UIDBrush(colorLevel: .color5)
        }
    }

    func toggleOffText(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: controlPrimary(tonalRange: tonalRange), alpha: 0.5, offset: 10)
        case .veryLight: return UIDBrush(brush: controlPrimary(tonalRange: tonalRange), alpha: 0.5, offset: 10)
        case .bright: return UIDBrush(colorLevel: .color5, alpha: 0.5)
        case .veryDark: return UIDBrush(colorLevel: .color5, alpha: 0.5)
        }
    }

    func toggleOffTextDisabled(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: controlPrimary(tonalRange: tonalRange), alpha: 0.2, offset: 10)
        case .veryLight: return UIDBrush(brush: controlPrimary(tonalRange: tonalRange), alpha: 0.2, offset: 10)
        case .bright: return UIDBrush(colorLevel: .color5, alpha: 0.2)
        case .veryDark: return UIDBrush(colorLevel: .color5, alpha: 0.2)
        }
    }

    func toggleOffTextHover(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: controlPrimary(tonalRange: tonalRange), offset: 10)
        case .veryLight: return UIDBrush(brush: controlPrimary(tonalRange: tonalRange), offset: 10)
        case .bright: return UIDBrush(colorLevel: .color5)
        case .veryDark: return UIDBrush(colorLevel: .color5)
        }
    }

    func toggleOn(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: controlPrimary(tonalRange: tonalRange))
        case .veryLight: return UIDBrush(brush: controlPrimary(tonalRange: tonalRange))
        case .bright: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 1)
        case .veryDark: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 1)
        }
    }

    func toggleOnDisabled(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: controlPrimary(tonalRange: tonalRange), alpha: 0.2)
        case .veryLight: return UIDBrush(brush: controlPrimary(tonalRange: tonalRange), alpha: 0.2)
        case .bright: return UIDBrush(colorLevel: .color10, alpha: 0.2)
        case .veryDark: return UIDBrush(colorLevel: .color10, alpha: 0.2)
        }
    }

    func toggleOnIcon(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 1)
        case .veryLight: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 1)
        case .bright: return UIDBrush(colorLevel: .color75)
        case .veryDark: return UIDBrush(colorLevel: .color75)
        }
    }

    func toggleOnText(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 1)
        case .veryLight: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 1)
        case .bright: return UIDBrush(colorLevel: .color75)
        case .veryDark: return UIDBrush(colorLevel: .color75)
        }
    }

    func toggleOnTextDisabled(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 0.7)
        case .veryLight: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 0.7)
        case .bright: return UIDBrush(colorLevel: .color75, alpha: 0.4)
        case .veryDark: return UIDBrush(colorLevel: .color75, alpha: 0.7)
        }
    }

    func togglePressed(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: controlPrimary(tonalRange: tonalRange))
        case .veryLight: return UIDBrush(brush: controlPrimary(tonalRange: tonalRange))
        case .bright: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 1)
        case .veryDark: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 1)
        }
    }

    func tokenBackgroundDisabled(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color75, fixedColorRange: .gray, alpha: 0.05)
        case .veryLight: return UIDBrush(colorLevel: .color75, alpha: 0.05)
        case .bright: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 0.05)
        case .veryDark: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 0.05)
        }
    }

    func tokenBackgroundHover(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color75, fixedColorRange: .gray, alpha: 0.15)
        case .veryLight: return UIDBrush(colorLevel: .color75, alpha: 0.2)
        case .bright: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 0.2)
        case .veryDark: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 0.2)
        }
    }

    func tokenBackgroundNormal(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color75, fixedColorRange: .gray, alpha: 0.1)
        case .veryLight: return UIDBrush(colorLevel: .color75, alpha: 0.1)
        case .bright: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 0.1)
        case .veryDark: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 0.1)
        }
    }

    func tokenCircleBackground(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color40)
        case .veryLight: return UIDBrush(colorLevel: .color40)
        case .bright: return UIDBrush(colorLevel: .color65)
        case .veryDark: return UIDBrush(colorLevel: .color40)
        }
    }

    func tokenCircleBackgroundDisabled(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color40, alpha: 0.35)
        case .veryLight: return UIDBrush(colorLevel: .color40, alpha: 0.35)
        case .bright: return UIDBrush(colorLevel: .color65, alpha: 0.35)
        case .veryDark: return UIDBrush(colorLevel: .color40, alpha: 0.35)
        }
    }

    func tokenCloseIconHover(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color75, fixedColorRange: .gray, alpha: 0.65)
        case .veryLight: return UIDBrush(colorLevel: .color75, alpha: 0.65)
        case .bright: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 0.65)
        case .veryDark: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 0.65)
        }
    }

    func tokenCloseIconNormal(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color75, fixedColorRange: .gray, alpha: 0.5)
        case .veryLight: return UIDBrush(colorLevel: .color75, alpha: 0.5)
        case .bright: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 0.5)
        case .veryDark: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 0.5)
        }
    }

    func toolbarOnImage(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: notYetDefined(tonalRange: tonalRange))
        case .veryLight: return UIDBrush(brush: notYetDefined(tonalRange: tonalRange))
        case .bright: return UIDBrush(brush: notYetDefined(tonalRange: tonalRange))
        case .veryDark: return UIDBrush(brush: notYetDefined(tonalRange: tonalRange))
        }
    }

    func tooltipDark(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(colorLevel: .color60)
        case .veryLight: return UIDBrush(colorLevel: .color60)
        case .bright: return UIDBrush(colorLevel: .color60)
        case .veryDark: return UIDBrush(colorLevel: .color60)
        }
    }

    func tooltipLight(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 1)
        case .veryLight: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 1)
        case .bright: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 1)
        case .veryDark: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 1)
        }
    }

    func tooltipValidated(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return validationTooltipValidated(components:UIDBrushComponents(colorLevel: .color60))
        case .veryLight: return validationTooltipValidated(components:UIDBrushComponents(colorLevel: .color60))
        case .bright: return validationTooltipValidated(components:UIDBrushComponents(colorLevel: .color60))
        case .veryDark: return validationTooltipValidated(components:UIDBrushComponents(colorLevel: .color60))
        }
    }

    func tooltipValidatedText(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 1)
        case .veryLight: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 1)
        case .bright: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 1)
        case .veryDark: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 1)
        }
    }

    func tooltipValidationText(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 1)
        default: return UIDBrush()
        }
    }

    func validatedMessageText(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return validationValidatedMessageText(components:UIDBrushComponents(colorLevel: .color60))
        case .veryLight: return validationValidatedMessageText(components:UIDBrushComponents(colorLevel: .color60))
        case .bright: return validationValidatedMessageText(components:UIDBrushComponents(colorLevel: .color30))
        case .veryDark: return validationValidatedMessageText(components:UIDBrushComponents(colorLevel: .color30))
        }
    }

    func validationMessage(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return validationValidationMessage(components:UIDBrushComponents(colorLevel: .color60))
        case .veryLight: return validationValidationMessage(components:UIDBrushComponents(colorLevel: .color60))
        case .bright: return validationValidationMessage(components:UIDBrushComponents(colorLevel: .color30))
        case .veryDark: return validationValidationMessage(components:UIDBrushComponents(colorLevel: .color30))
        }
    }

    func viewContainerBorder(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: notYetDefined(tonalRange: tonalRange))
        case .veryLight: return UIDBrush(brush: notYetDefined(tonalRange: tonalRange))
        case .bright: return UIDBrush(brush: notYetDefined(tonalRange: tonalRange))
        case .veryDark: return UIDBrush(brush: notYetDefined(tonalRange: tonalRange))
        }
    }

    func viewContainerTabOff(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: notYetDefined(tonalRange: tonalRange))
        case .veryLight: return UIDBrush(brush: notYetDefined(tonalRange: tonalRange))
        case .bright: return UIDBrush(brush: notYetDefined(tonalRange: tonalRange))
        case .veryDark: return UIDBrush(brush: notYetDefined(tonalRange: tonalRange))
        }
    }

    func viewContainerTabOn(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: notYetDefined(tonalRange: tonalRange))
        case .veryLight: return UIDBrush(brush: notYetDefined(tonalRange: tonalRange))
        case .bright: return UIDBrush(brush: notYetDefined(tonalRange: tonalRange))
        case .veryDark: return UIDBrush(brush: notYetDefined(tonalRange: tonalRange))
        }
    }

    func viewPort(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(hexColorStr: "#000000", alpha: 1)
        case .veryLight: return UIDBrush(hexColorStr: "#000000", alpha: 1)
        case .bright: return UIDBrush(hexColorStr: "#000000", alpha: 1)
        case .veryDark: return UIDBrush(hexColorStr: "#000000", alpha: 1)
        }
    }

    func wizardOff(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: textTertiary(tonalRange: tonalRange))
        case .veryLight: return UIDBrush(brush: textTertiary(tonalRange: tonalRange))
        case .bright: return UIDBrush(brush: textTertiary(tonalRange: tonalRange))
        case .veryDark: return UIDBrush(brush: textTertiary(tonalRange: tonalRange))
        }
    }

    func wizardOffText(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: contentPrimary(tonalRange: tonalRange))
        case .veryLight: return UIDBrush(brush: contentPrimary(tonalRange: tonalRange))
        case .bright: return UIDBrush(brush: contentPrimary(tonalRange: tonalRange))
        case .veryDark: return UIDBrush(brush: contentPrimary(tonalRange: tonalRange))
        }
    }

    func wizardOn(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(brush: controlPrimary(tonalRange: tonalRange))
        case .veryLight: return UIDBrush(brush: controlPrimary(tonalRange: tonalRange))
        case .bright: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 1)
        case .veryDark: return UIDBrush(brush: controlPrimary(tonalRange: tonalRange))
        }
    }

    func wizardOnText(tonalRange: UIDTonalRange) -> UIDBrush {
        switch tonalRange {
        case .ultraLight: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 1)
        case .veryLight: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 1)
        case .bright: return UIDBrush(colorLevel: .color45)
        case .veryDark: return UIDBrush(hexColorStr: "#FFFFFF", alpha: 1)
        }
    }
}
