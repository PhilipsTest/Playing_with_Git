//  Copyright Â© 2018 Philips. All rights reserved.

/// This file is auto-generated from a json file.
/// Do not edit this file directly, but change the generation process whenever needed.
/// Generation on 11/09/2018 from git revision revision

import Foundation
import UIKit

/// A generated PhilipsUIKitDLS UIDTheme extension. Maps each control, state and themed aspect to a semantic brush color.

// swiftlint:disable type_body_length
// swiftlint:disable file_length
/// - Since: 3.0.0

public extension UIDTheme {
    //swiftlint:disable variable_name
    public var aboutScreenDefaultCloseIcon: UIColor? {
        return brushes.aboutScreenTitle(tonalRange: tonalRange).color(in: colorRange)
    }
    public var aboutScreenDefaultIcon: UIColor? {
        return brushes.aboutScreenIcon(tonalRange: tonalRange).color(in: colorRange)
    }
    public var aboutScreenDefaultShield: UIColor? {
        return brushes.philipsShield(tonalRange: tonalRange).color(in: colorRange)
    }
    public var aboutScreenDefaultSubtitle: UIColor? {
        return brushes.aboutScreenSubTitle(tonalRange: tonalRange).color(in: colorRange)
    }
    public var aboutScreenDefaultText: UIColor? {
        return brushes.aboutScreenText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var aboutScreenDefaultTitle: UIColor? {
        return brushes.aboutScreenTitle(tonalRange: tonalRange).color(in: colorRange)
    }
    public var aboutScreenDialogBackground: UIColor? {
        return brushes.dialog(tonalRange: tonalRange).color(in: colorRange)
    }
    public var aboutScreenFullScreenBackground: UIColor? {
        return brushes.aboutScreenFullScreen(tonalRange: tonalRange).color(in: colorRange)
    }
    public var bottomSheetDefaultBackground: UIColor? {
        return brushes.contentPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var breadcrumbDefaultOnText: UIColor? {
        return brushes.breadcrumbNormalOn(tonalRange: tonalRange).color(in: colorRange)
    }
    public var breadcrumbDefaultOffText: UIColor? {
        return brushes.breadcrumbNormal(tonalRange: tonalRange).color(in: colorRange)
    }
    public var breadcrumbDefaultHoverOffText: UIColor? {
        return brushes.breadcrumbHover(tonalRange: tonalRange).color(in: colorRange)
    }
    public var breadcrumbDefaultFocusOffText: UIColor? {
        return brushes.breadcrumbFocus(tonalRange: tonalRange).color(in: colorRange)
    }
    public var breadcrumbDefaultPressedOffText: UIColor? {
        return brushes.breadcrumbPressed(tonalRange: tonalRange).color(in: colorRange)
    }
    public var breadcrumbDefaultIcon: UIColor? {
        return brushes.textTertiary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var buttonAccentBackground: UIColor? {
        return brushes.controlAccent(tonalRange: tonalRange).color(in: accentColorRange)
    }
    public var buttonAccentIcon: UIColor? {
        return brushes.controlAccentText(tonalRange: tonalRange).color(in: accentColorRange)
    }
    public var buttonAccentText: UIColor? {
        return brushes.controlAccentText(tonalRange: tonalRange).color(in: accentColorRange)
    }
    public var buttonAccentHoverBackground: UIColor? {
        return brushes.controlAccentHover(tonalRange: tonalRange).color(in: accentColorRange)
    }
    public var buttonAccentFocusBackground: UIColor? {
        return brushes.controlAccentFocus(tonalRange: tonalRange).color(in: accentColorRange)
    }
    public var buttonAccentFocusBorder: UIColor? {
        return brushes.controlAccentFocusBorder(tonalRange: tonalRange).color(in: accentColorRange)
    }
    public var buttonAccentPressedBackground: UIColor? {
        return brushes.controlAccentPressed(tonalRange: tonalRange).color(in: accentColorRange)
    }
    public var buttonAccentDisabledBackground: UIColor? {
        return brushes.controlAccentDisabled(tonalRange: tonalRange).color(in: accentColorRange)
    }
    public var buttonAccentDisabledIcon: UIColor? {
        return brushes.controlAccentTextDisabled(tonalRange: tonalRange).color(in: accentColorRange)
    }
    public var buttonAccentDisabledText: UIColor? {
        return brushes.controlAccentTextDisabled(tonalRange: tonalRange).color(in: accentColorRange)
    }
    public var buttonInputArrowIcon: UIColor? {
        return brushes.arrowIcon(tonalRange: tonalRange).color(in: colorRange)
    }
    public var buttonInputBackground: UIColor? {
        return brushes.input(tonalRange: tonalRange).color(in: colorRange)
    }
    public var buttonInputIcon: UIColor? {
        return brushes.inputTextPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var buttonInputHoverBackground: UIColor? {
        return brushes.inputButtonQuietHover(tonalRange: tonalRange).color(in: colorRange)
    }
    public var buttonInputFocusBackground: UIColor? {
        return brushes.inputButtonQuietHover(tonalRange: tonalRange).color(in: colorRange)
    }
    public var buttonInputPressedBackground: UIColor? {
        return brushes.inputButtonQuietPressed(tonalRange: tonalRange).color(in: colorRange)
    }
    public var buttonInputDisabledArrowIcon: UIColor? {
        return brushes.arrowIconDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var buttonInputDisabledBackground: UIColor? {
        return brushes.inputDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var buttonInputDisabledIcon: UIColor? {
        return brushes.inputTextDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var buttonPrimaryArrowIcon: UIColor? {
        return brushes.controlPrimaryText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var buttonPrimaryBackground: UIColor? {
        return brushes.controlPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var buttonPrimaryIcon: UIColor? {
        return brushes.controlPrimaryText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var buttonPrimarySeparator: UIColor? {
        return brushes.controlPrimarySeparator(tonalRange: tonalRange).color(in: colorRange)
    }
    public var buttonPrimaryText: UIColor? {
        return brushes.controlPrimaryText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var buttonPrimaryHoverBackground: UIColor? {
        return brushes.controlPrimaryHover(tonalRange: tonalRange).color(in: colorRange)
    }
    public var buttonPrimaryFocusBackground: UIColor? {
        return brushes.controlPrimaryFocus(tonalRange: tonalRange).color(in: colorRange)
    }
    public var buttonPrimaryFocusBorder: UIColor? {
        return brushes.controlPrimaryFocusBorder(tonalRange: tonalRange).color(in: colorRange)
    }
    public var buttonPrimaryProgressBackground: UIColor? {
        return brushes.controlPrimaryDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var buttonPrimaryPressedBackground: UIColor? {
        return brushes.controlPrimaryPressed(tonalRange: tonalRange).color(in: colorRange)
    }
    public var buttonPrimaryDisabledArrowIcon: UIColor? {
        return brushes.controlPrimaryTextDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var buttonPrimaryDisabledBackground: UIColor? {
        return brushes.controlPrimaryDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var buttonPrimaryDisabledIcon: UIColor? {
        return brushes.controlPrimaryTextDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var buttonPrimaryDisabledText: UIColor? {
        return brushes.controlPrimaryTextDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var buttonQuietDefaultIcon: UIColor? {
        return brushes.textSecondary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var buttonQuietDefaultText: UIColor? {
        return brushes.textSecondary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var buttonQuietDefaultHoverIcon: UIColor? {
        return brushes.textPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var buttonQuietDefaultHoverText: UIColor? {
        return brushes.textPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var buttonQuietDefaultFocusIcon: UIColor? {
        return brushes.textPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var buttonQuietDefaultFocusText: UIColor? {
        return brushes.textPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var buttonQuietDefaultPressedIcon: UIColor? {
        return brushes.textTertiary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var buttonQuietDefaultPressedText: UIColor? {
        return brushes.textTertiary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var buttonQuietDefaultDisabledIcon: UIColor? {
        return brushes.textDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var buttonQuietDefaultDisabledText: UIColor? {
        return brushes.textDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var buttonQuietEmphasisArrowIcon: UIColor? {
        return brushes.controlPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var buttonQuietEmphasisBackground: UIColor? {
        return brushes.noColor(tonalRange: tonalRange).color(in: colorRange)
    }
    public var buttonQuietEmphasisIcon: UIColor? {
        return brushes.controlPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var buttonQuietEmphasisText: UIColor? {
        return brushes.controlPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var buttonQuietEmphasisHoverIcon: UIColor? {
        return brushes.controlPrimaryHover(tonalRange: tonalRange).color(in: colorRange)
    }
    public var buttonQuietEmphasisHoverText: UIColor? {
        return brushes.controlPrimaryHover(tonalRange: tonalRange).color(in: colorRange)
    }
    public var buttonQuietEmphasisFocusBackground: UIColor? {
        return brushes.controlPrimaryFocusBorder(tonalRange: tonalRange).color(in: colorRange)
    }
    public var buttonQuietEmphasisFocusIcon: UIColor? {
        return brushes.controlPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var buttonQuietEmphasisFocusText: UIColor? {
        return brushes.controlPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var buttonQuietEmphasisPressedIcon: UIColor? {
        return brushes.controlPrimaryPressed(tonalRange: tonalRange).color(in: colorRange)
    }
    public var buttonQuietEmphasisPressedText: UIColor? {
        return brushes.controlPrimaryPressed(tonalRange: tonalRange).color(in: colorRange)
    }
    public var buttonQuietEmphasisDisabledArrowIcon: UIColor? {
        return brushes.controlPrimaryDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var buttonQuietEmphasisDisabledIcon: UIColor? {
        return brushes.controlPrimaryDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var buttonQuietEmphasisDisabledText: UIColor? {
        return brushes.controlPrimaryDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var buttonSecondaryArrowIcon: UIColor? {
        return brushes.controlSecondaryText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var buttonSecondaryBackground: UIColor? {
        return brushes.controlSecondary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var buttonSecondaryIcon: UIColor? {
        return brushes.controlSecondaryText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var buttonSecondarySeparator: UIColor? {
        return brushes.controlSecondarySeparator(tonalRange: tonalRange).color(in: colorRange)
    }
    public var buttonSecondaryText: UIColor? {
        return brushes.controlSecondaryText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var buttonSecondaryHoverBackground: UIColor? {
        return brushes.controlSecondaryHover(tonalRange: tonalRange).color(in: colorRange)
    }
    public var buttonSecondaryFocusBackground: UIColor? {
        return brushes.controlSecondaryFocus(tonalRange: tonalRange).color(in: colorRange)
    }
    public var buttonSecondaryFocusBorder: UIColor? {
        return brushes.controlSecondaryFocusBorder(tonalRange: tonalRange).color(in: colorRange)
    }
    public var buttonSecondaryPressedBackground: UIColor? {
        return brushes.controlSecondaryPressed(tonalRange: tonalRange).color(in: colorRange)
    }
    public var buttonSecondaryDisabledArrowIcon: UIColor? {
        return brushes.textSecondaryDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var buttonSecondaryDisabledBackground: UIColor? {
        return brushes.controlSecondaryDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var buttonSecondaryDisabledIcon: UIColor? {
        return brushes.controlSecondaryTextDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var buttonSecondaryDisabledText: UIColor? {
        return brushes.controlSecondaryTextDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var buttonSignalErrorBackground: UIColor? {
        return brushes.buttonSignalErrorNormal(tonalRange: tonalRange).color(in: colorRange)
    }
    public var buttonSignalErrorIcon: UIColor? {
        return brushes.controlPrimaryText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var buttonSignalErrorText: UIColor? {
        return brushes.controlPrimaryText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var buttonSignalErrorHoverBackground: UIColor? {
        return brushes.buttonSignalErrorHover(tonalRange: tonalRange).color(in: colorRange)
    }
    public var buttonSignalErrorFocusBackground: UIColor? {
        return brushes.buttonSignalErrorFocusBackground(tonalRange: tonalRange).color(in: colorRange)
    }
    public var buttonSignalErrorFocusBorder: UIColor? {
        return brushes.buttonSignalErrorFocusBorder(tonalRange: tonalRange).color(in: colorRange)
    }
    public var buttonSignalErrorPressedBackground: UIColor? {
        return brushes.buttonSignalErrorPressed(tonalRange: tonalRange).color(in: colorRange)
    }
    public var buttonSignalErrorDisabledBackground: UIColor? {
        return brushes.buttonSignalErrorDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var buttonSignalErrorDisabledIcon: UIColor? {
        return brushes.controlPrimaryTextDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var buttonSignalErrorDisabledText: UIColor? {
        return brushes.controlPrimaryTextDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var buttonSignalSuccessBackground: UIColor? {
        return brushes.buttonSignalSuccessNormal(tonalRange: tonalRange).color(in: colorRange)
    }
    public var buttonSignalSuccessIcon: UIColor? {
        return brushes.controlPrimaryText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var buttonSignalSuccessText: UIColor? {
        return brushes.controlPrimaryText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var buttonSignalSuccessHoverBackground: UIColor? {
        return brushes.buttonSignalSuccessHover(tonalRange: tonalRange).color(in: colorRange)
    }
    public var buttonSignalSuccessFocusBackground: UIColor? {
        return brushes.buttonSignalSuccessFocusBackground(tonalRange: tonalRange).color(in: colorRange)
    }
    public var buttonSignalSuccessFocusBorder: UIColor? {
        return brushes.buttonSignalSuccessFocusBorder(tonalRange: tonalRange).color(in: colorRange)
    }
    public var buttonSignalSuccessPressedBackground: UIColor? {
        return brushes.buttonSignalSuccessPressed(tonalRange: tonalRange).color(in: colorRange)
    }
    public var buttonSignalSuccessDisabledBackground: UIColor? {
        return brushes.buttonSignalSuccessDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var buttonSignalSuccessDisabledIcon: UIColor? {
        return brushes.controlPrimaryTextDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var buttonSignalSuccessDisabledText: UIColor? {
        return brushes.controlPrimaryTextDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var buttonSignalWarningBackground: UIColor? {
        return brushes.buttonSignalWarningNormal(tonalRange: tonalRange).color(in: colorRange)
    }
    public var buttonSignalWarningIcon: UIColor? {
        return brushes.controlPrimaryText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var buttonSignalWarningText: UIColor? {
        return brushes.controlPrimaryText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var buttonSignalWarningHoverBackground: UIColor? {
        return brushes.buttonSignalWarningHover(tonalRange: tonalRange).color(in: colorRange)
    }
    public var buttonSignalWarningFocusBackground: UIColor? {
        return brushes.buttonSignalWarningFocusBackground(tonalRange: tonalRange).color(in: colorRange)
    }
    public var buttonSignalWarningFocusBorder: UIColor? {
        return brushes.buttonSignalWarningFocusBorder(tonalRange: tonalRange).color(in: colorRange)
    }
    public var buttonSignalWarningPressedBackground: UIColor? {
        return brushes.buttonSignalWarningPressed(tonalRange: tonalRange).color(in: colorRange)
    }
    public var buttonSignalWarningDisabledBackground: UIColor? {
        return brushes.buttonSignalWarningDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var buttonSignalWarningDisabledIcon: UIColor? {
        return brushes.controlPrimaryTextDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var buttonSignalWarningDisabledText: UIColor? {
        return brushes.controlPrimaryTextDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var buttonSingalErrorDisabledText: UIColor? {
        return brushes.controlPrimaryTextDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var buttonSocialMediaPrimaryBackground: UIColor? {
        return brushes.controlPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var buttonSocialMediaPrimaryIcon: UIColor? {
        return brushes.controlPrimaryText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var buttonSocialMediaPrimaryPressedBackground: UIColor? {
        return brushes.controlPrimaryPressed(tonalRange: tonalRange).color(in: colorRange)
    }
    public var buttonSocialMediaWhiteBackground: UIColor? {
        return brushes.controlWhite(tonalRange: tonalRange).color(in: colorRange)
    }
    public var buttonSocialMediaWhiteIcon: UIColor? {
        return brushes.controlWhiteText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var buttonSocialMediaWhitePressedBackground: UIColor? {
        return brushes.controlWhitePressed(tonalRange: tonalRange).color(in: colorRange)
    }
    public var carouselDefaultIcon: UIColor? {
        return brushes.textSecondary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var carouselDefaultHoverIcon: UIColor? {
        return brushes.textPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var carouselDefaultPressedIcon: UIColor? {
        return brushes.textPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var carouselDefaultDisabledIcon: UIColor? {
        return brushes.textPrimaryDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var carouselButtonDefaultBackground: UIColor? {
        return brushes.contentCircularButtonNormal(tonalRange: tonalRange).color(in: colorRange)
    }
    public var carouselButtonDefaultIcon: UIColor? {
        return brushes.contentCircularButtonIcon(tonalRange: tonalRange).color(in: colorRange)
    }
    public var carouselButtonDefaultHoverBackground: UIColor? {
        return brushes.contentCircularButtonPressed(tonalRange: tonalRange).color(in: colorRange)
    }
    public var carouselButtonDefaultFocusBackground: UIColor? {
        return brushes.contentCircularButtonNormal(tonalRange: tonalRange).color(in: colorRange)
    }
    public var carouselButtonDefaultFocusBorder: UIColor? {
        return brushes.controlPrimaryFocusBorder(tonalRange: tonalRange).color(in: colorRange)
    }
    public var carouselButtonDefaultPressedBackground: UIColor? {
        return brushes.contentCircularButtonPressed(tonalRange: tonalRange).color(in: colorRange)
    }
    public var checkBoxDefaultOnBackground: UIColor? {
        return brushes.controlPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var checkBoxDefaultOnIcon: UIColor? {
        return brushes.controlPrimaryText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var checkBoxDefaultOffBackground: UIColor? {
        return brushes.controlPrimaryOff(tonalRange: tonalRange).color(in: colorRange)
    }
    public var checkBoxDefaultOffIcon: UIColor? {
        return brushes.noColor(tonalRange: tonalRange).color(in: colorRange)
    }
    public var checkBoxDefaultFocusBorder: UIColor? {
        return brushes.controlPrimaryFocusBorder(tonalRange: tonalRange).color(in: colorRange)
    }
    public var checkBoxDefaultPressedBorder: UIColor? {
        return brushes.controlPrimaryFocusBorder(tonalRange: tonalRange).color(in: colorRange)
    }
    public var checkBoxDefaultDisabledBackground: UIColor? {
        return brushes.controlPrimaryDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var checkBoxDefaultDisabledIcon: UIColor? {
        return brushes.controlPrimaryDetailDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var contentPrimaryBackground: UIColor? {
        return brushes.contentPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var contentSecondaryBackground: UIColor? {
        return brushes.contentSecondary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var contentSecondaryNeutralBackground: UIColor? {
        return brushes.contentSecondaryNeutral(tonalRange: tonalRange).color(in: colorRange)
    }
    public var contentTertiaryBackground: UIColor? {
        return brushes.contentTertiary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var contentTertiaryNeutralBackground: UIColor? {
        return brushes.contentTertiaryNeutral(tonalRange: tonalRange).color(in: colorRange)
    }
    public var contentItemDefaultValidatedValidationMessageIcon: UIColor? {
        return brushes.validationMessage(tonalRange: tonalRange).color(in: colorRange)
    }
    public var contentItemDefaultValidatedValidationMessageText: UIColor? {
        return brushes.validationMessage(tonalRange: tonalRange).color(in: colorRange)
    }
    public var contentItemPrimaryIcon: UIColor? {
        return brushes.textPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var contentItemPrimaryText: UIColor? {
        return brushes.textPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var contentItemPrimaryDisabledIcon: UIColor? {
        return brushes.textDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var contentItemPrimaryDisabledText: UIColor? {
        return brushes.textDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var contentItemSecondaryIcon: UIColor? {
        return brushes.textSecondary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var contentItemSecondaryText: UIColor? {
        return brushes.textSecondary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var contentItemSecondaryDisabledIcon: UIColor? {
        return brushes.textDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var contentItemSecondaryDisabledText: UIColor? {
        return brushes.textDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var contentItemSignalIconError: UIColor? {
        return brushes.signalError(tonalRange: tonalRange).color(in: colorRange)
    }
    public var contentItemSignalIconInfo: UIColor? {
        return brushes.signalInfo(tonalRange: tonalRange).color(in: colorRange)
    }
    public var contentItemSignalIconSuccess: UIColor? {
        return brushes.signalSuccess(tonalRange: tonalRange).color(in: colorRange)
    }
    public var contentItemSignalIconWarning: UIColor? {
        return brushes.signalWarning(tonalRange: tonalRange).color(in: colorRange)
    }
    public var contentItemSignalTextError: UIColor? {
        return brushes.signalErrorText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var contentItemSignalTextInfo: UIColor? {
        return brushes.signalInfoText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var contentItemSignalTextSuccess: UIColor? {
        return brushes.signalSuccessText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var contentItemSignalTextWarning: UIColor? {
        return brushes.signalWarningText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var contentItemTertiaryIcon: UIColor? {
        return brushes.textTertiary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var contentItemTertiaryText: UIColor? {
        return brushes.textTertiary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var contentItemTertiaryDisabledIcon: UIColor? {
        return brushes.textDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var contentItemTertiaryDisabledText: UIColor? {
        return brushes.textDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var dataGridDefaultOnHeaderText: UIColor? {
        return brushes.textPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var dataGridDefaultOnSortIcon: UIColor? {
        return brushes.textPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var dataGridDefaultOffHeaderText: UIColor? {
        return brushes.textSecondary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var dataGridDefaultOffSortIcon: UIColor? {
        return brushes.textPrimaryDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var dataVisualizationChartsDisabledLegendIndicator1: UIColor? {
        return brushes.dataColor1Disabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var dataVisualizationChartsDisabledLegendIndicator2: UIColor? {
        return brushes.dataColor2Disabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var dataVisualizationChartsDisabledLegendIndicator3: UIColor? {
        return brushes.dataColor3Disabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var dataVisualizationChartsDisabledLegendIndicator4: UIColor? {
        return brushes.dataColor4Disabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var dataVisualizationChartsDisabledLegendText: UIColor? {
        return brushes.textSecondaryDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var dataVisualizationChartsAxis: UIColor? {
        return brushes.separator(tonalRange: tonalRange).color(in: colorRange)
    }
    public var dataVisualizationChartsAxisLabelText: UIColor? {
        return brushes.textTertiary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var dataVisualizationChartsGridlines: UIColor? {
        return brushes.separator(tonalRange: tonalRange).color(in: colorRange)
    }
    public var dataVisualizationChartsLegendIndicator1: UIColor? {
        return brushes.dataColor1(tonalRange: tonalRange).color(in: colorRange)
    }
    public var dataVisualizationChartsLegendIndicator2: UIColor? {
        return brushes.dataColor2(tonalRange: tonalRange).color(in: colorRange)
    }
    public var dataVisualizationChartsLegendIndicator3: UIColor? {
        return brushes.dataColor3(tonalRange: tonalRange).color(in: colorRange)
    }
    public var dataVisualizationChartsLegendIndicator4: UIColor? {
        return brushes.dataColor4(tonalRange: tonalRange).color(in: colorRange)
    }
    public var dataVisualizationChartsLegendText: UIColor? {
        return brushes.textPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var dataVisualizationChartsTargetBackground: UIColor? {
        return brushes.chartsTargetBackground(tonalRange: tonalRange).color(in: colorRange)
    }
    public var dataVisualizationChartsTargetLine: UIColor? {
        return brushes.controlPrimaryDetail(tonalRange: tonalRange).color(in: colorRange)
    }
    public var dataVisualizationChartsTargetText: UIColor? {
        return brushes.controlPrimaryDetail(tonalRange: tonalRange).color(in: colorRange)
    }
    public var dataVisualizationChartsValueIcon: UIColor? {
        return brushes.textPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var dataVisualizationChartsValueLabelIcon: UIColor? {
        return brushes.textTertiary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var dataVisualizationChartsValueLabelText: UIColor? {
        return brushes.textTertiary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var dataVisualizationChartsValueText: UIColor? {
        return brushes.textPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var dataVisualizationDefaultHoverDataColor1Outline: UIColor? {
        return brushes.dataColor1Outline(tonalRange: tonalRange).color(in: colorRange)
    }
    public var dataVisualizationDefaultHoverDataColor2Outline: UIColor? {
        return brushes.dataColor2Outline(tonalRange: tonalRange).color(in: colorRange)
    }
    public var dataVisualizationDefaultHoverDataColor3Outline: UIColor? {
        return brushes.dataColor3Outline(tonalRange: tonalRange).color(in: colorRange)
    }
    public var dataVisualizationDefaultHoverDataColor4Outline: UIColor? {
        return brushes.dataColor4Outline(tonalRange: tonalRange).color(in: colorRange)
    }
    public var dataVisualizationDefaultAxisScaleText: UIColor? {
        return brushes.textTertiary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var dataVisualizationDefaultDataColor1: UIColor? {
        return brushes.dataColor1(tonalRange: tonalRange).color(in: colorRange)
    }
    public var dataVisualizationDefaultDataColor2: UIColor? {
        return brushes.dataColor2(tonalRange: tonalRange).color(in: colorRange)
    }
    public var dataVisualizationDefaultDataColor3: UIColor? {
        return brushes.dataColor3(tonalRange: tonalRange).color(in: colorRange)
    }
    public var dataVisualizationDefaultDataColor4: UIColor? {
        return brushes.dataColor4(tonalRange: tonalRange).color(in: colorRange)
    }
    public var dataVisualizationDefaultSubtitleText: UIColor? {
        return brushes.textTertiary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var dataVisualizationDefaultTitleText: UIColor? {
        return brushes.textPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var dataVisualizationStatusIndicatorBackground: UIColor? {
        return brushes.statusIndicatorBackground(tonalRange: tonalRange).color(in: colorRange)
    }
    public var dataVisualizationStatusIndicatorReferenceBackground: UIColor? {
        return brushes.statusIndicatorReferenceBackground(tonalRange: tonalRange).color(in: colorRange)
    }
    public var dataVisualizationStatusIndicatorReferenceBackgroundActive: UIColor? {
        return brushes.statusIndicatorReferenceBackgroundActive(tonalRange: tonalRange).color(in: colorRange)
    }
    public var dataVisualizationStatusIndicatorValueIcon: UIColor? {
        return brushes.statusIndicatorData(tonalRange: tonalRange).color(in: colorRange)
    }
    public var dataVisualizationStatusIndicatorValueIndicatorBackground: UIColor? {
        return brushes.statusIndicatorData(tonalRange: tonalRange).color(in: colorRange)
    }
    public var dataVisualizationStatusIndicatorValueLabelIcon: UIColor? {
        return brushes.statusIndicatorData(tonalRange: tonalRange).color(in: colorRange)
    }
    public var dataVisualizationStatusIndicatorValueLabelText: UIColor? {
        return brushes.statusIndicatorData(tonalRange: tonalRange).color(in: colorRange)
    }
    public var dataVisualizationStatusIndicatorValueText: UIColor? {
        return brushes.statusIndicatorData(tonalRange: tonalRange).color(in: colorRange)
    }
    public var datePickerAndroidButtonText: UIColor? {
        return brushes.controlBright(tonalRange: tonalRange).color(in: colorRange)
    }
    public var datePickerAndroidContentText: UIColor? {
        return brushes.textPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var datePickerAndroidCurrentDayBorder: UIColor? {
        return brushes.itemOn(tonalRange: tonalRange).color(in: colorRange)
    }
    public var datePickerAndroidCurrentDayNumberText: UIColor? {
        return brushes.itemOn(tonalRange: tonalRange).color(in: colorRange)
    }
    public var datePickerAndroidDaysText: UIColor? {
        return brushes.textTertiary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var datePickerAndroidHeaderBackground: UIColor? {
        return brushes.navigationSecondary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var datePickerAndroidHeaderText: UIColor? {
        return brushes.datePickerHeader(tonalRange: tonalRange).color(in: colorRange)
    }
    public var datePickerAndroidOnContentText: UIColor? {
        return brushes.controlPrimaryText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var datePickerAndroidOnDayNumberBackground: UIColor? {
        return brushes.controlPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var datePickerAndroidOnHeaderText: UIColor? {
        return brushes.navigationText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var datePickerDesktopCurrentDayBorder: UIColor? {
        return brushes.itemOn(tonalRange: tonalRange).color(in: colorRange)
    }
    public var datePickerDesktopCurrentDayNumberText: UIColor? {
        return brushes.itemOn(tonalRange: tonalRange).color(in: colorRange)
    }
    public var datePickerDesktopRangeBackground: UIColor? {
        return brushes.listSelected(tonalRange: tonalRange).color(in: colorRange)
    }
    public var datePickerDesktopRangeDayNumberText: UIColor? {
        return brushes.itemOn(tonalRange: tonalRange).color(in: colorRange)
    }
    public var datePickerDesktopOnDayNumberBackground: UIColor? {
        return brushes.controlPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var datePickerDesktopOnDayNumberText: UIColor? {
        return brushes.controlPrimaryText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var datePickerDesktopOffDayNumberBackground: UIColor? {
        return brushes.noColor(tonalRange: tonalRange).color(in: colorRange)
    }
    public var datePickerDesktopOffDayNumberText: UIColor? {
        return brushes.textPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var datePickerDesktopHoverOnDayNumberBackground: UIColor? {
        return brushes.controlPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var datePickerDesktopHoverOnDayNumberText: UIColor? {
        return brushes.controlPrimaryText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var datePickerDesktopHoverOffDayNumberBackground: UIColor? {
        return brushes.listHover(tonalRange: tonalRange).color(in: colorRange)
    }
    public var datePickerDesktopHoverOffDayNumberText: UIColor? {
        return brushes.controlPrimaryText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var datePickerDesktopDisabledCurrentDayBorder: UIColor? {
        return brushes.controlPrimaryDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var datePickerDesktopDisabledCurrentDayNumberText: UIColor? {
        return brushes.controlPrimaryDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var datePickerDesktopDisabledRangeBackground: UIColor? {
        return brushes.listSelectedDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var datePickerDesktopDisabledRangeDayNumberText: UIColor? {
        return brushes.datePickerDisabledRangeText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var datePickerDesktopDisabledOnDayNumberBackground: UIColor? {
        return brushes.controlPrimaryDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var datePickerDesktopDisabledOnDayNumberText: UIColor? {
        return brushes.datePickerDisabledOnText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var datePickerDesktopDisabledOffDayNumberBackground: UIColor? {
        return brushes.noColor(tonalRange: tonalRange).color(in: colorRange)
    }
    public var datePickerDesktopDisabledOffDayNumberText: UIColor? {
        return brushes.textDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var datePickerDesktopBackground: UIColor? {
        return brushes.popup(tonalRange: tonalRange).color(in: colorRange)
    }
    public var datePickerDesktopMonthText: UIColor? {
        return brushes.textPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var datePickerDesktopShadowLevelTwo: UIColor? {
        return brushes.shadowLevelTwo(tonalRange: tonalRange).color(in: colorRange)
    }
    public var datePickerDesktopWeekLetterText: UIColor? {
        return brushes.textTertiary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var dialogAlertDefaultBackground: UIColor? {
        return brushes.dialog(tonalRange: tonalRange).color(in: colorRange)
    }
    public var dimLayerStrongBackground: UIColor? {
        return brushes.dimStrong(tonalRange: tonalRange).color(in: colorRange)
    }
    public var dimLayerSubtleBackground: UIColor? {
        return brushes.dimSubtle(tonalRange: tonalRange).color(in: colorRange)
    }
    public var dotNavigationDefaultOnBackground: UIColor? {
        return brushes.dotActive(tonalRange: tonalRange).color(in: colorRange)
    }
    public var dotNavigationDefaultOffBackground: UIColor? {
        return brushes.dot(tonalRange: tonalRange).color(in: colorRange)
    }
    public var dotNavigationDefaultHoverBackground: UIColor? {
        return brushes.dotHover(tonalRange: tonalRange).color(in: colorRange)
    }
    public var gridViewDefaultSubtitleText: UIColor? {
        return brushes.textSecondary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var gridViewDefaultTitleText: UIColor? {
        return brushes.textPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var gridViewDefaultHoverSubtitleText: UIColor? {
        return brushes.textTertiary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var gridViewDefaultHoverTitleText: UIColor? {
        return brushes.textTertiary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var gridViewDefaultPressedSubtitleText: UIColor? {
        return brushes.textSecondary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var gridViewDefaultPressedTitleText: UIColor? {
        return brushes.textPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var gridViewDefaultDisabledSubtitleText: UIColor? {
        return brushes.textSecondaryDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var gridViewDefaultDisabledTitleText: UIColor? {
        return brushes.textPrimaryDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var gridViewOverlayHeaderBackground: UIColor? {
        return brushes.gridViewHeaderNoGradient(tonalRange: tonalRange).color(in: colorRange)
    }
    public var gridViewOverlaySubTitleText: UIColor? {
        return brushes.lightTextSecondary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var gridViewOverlayTitleText: UIColor? {
        return brushes.lightTextPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var gridViewPrimaryHeaderBackground: UIColor? {
        return brushes.gridViewHeaderPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var gridViewSecondaryHeaderBackground: UIColor? {
        return brushes.gridViewHeaderSecondary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var hyperlinkDefaultIcon: UIColor? {
        return brushes.hyperlinkNormal(tonalRange: tonalRange).color(in: colorRange)
    }
    public var hyperlinkDefaultText: UIColor? {
        return brushes.hyperlinkNormal(tonalRange: tonalRange).color(in: colorRange)
    }
    public var hyperlinkDefaultHoverIcon: UIColor? {
        return brushes.hyperlinkHover(tonalRange: tonalRange).color(in: colorRange)
    }
    public var hyperlinkDefaultHoverText: UIColor? {
        return brushes.hyperlinkHover(tonalRange: tonalRange).color(in: colorRange)
    }
    public var hyperlinkDefaultVisitedIcon: UIColor? {
        return brushes.hyperlinkVisited(tonalRange: tonalRange).color(in: colorRange)
    }
    public var hyperlinkDefaultVisitedText: UIColor? {
        return brushes.hyperlinkVisited(tonalRange: tonalRange).color(in: colorRange)
    }
    public var hyperlinkDefaultPressedIcon: UIColor? {
        return brushes.hyperlinkPressed(tonalRange: tonalRange).color(in: colorRange)
    }
    public var hyperlinkDefaultPressedText: UIColor? {
        return brushes.hyperlinkPressed(tonalRange: tonalRange).color(in: colorRange)
    }
    public var iconSecondaryIcon: UIColor? {
        return brushes.textSecondary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var inputQuietInputQuietIcon: UIColor? {
        return brushes.textPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var labelDescriptorText: UIColor? {
        return brushes.textTertiary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var labelDescriptorDisabledText: UIColor? {
        return brushes.textDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var labelRegularText: UIColor? {
        return brushes.textSecondary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var labelRegularDisabledText: UIColor? {
        return brushes.textDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var labelValueText: UIColor? {
        return brushes.textPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var labelValueDisabledText: UIColor? {
        return brushes.textDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var lightDefaultLightCenter: UIColor? {
        return brushes.lightCenter(tonalRange: tonalRange).color(in: colorRange)
    }
    public var lightDefaultLightEdge: UIColor? {
        return brushes.lightEdge(tonalRange: tonalRange).color(in: colorRange)
    }
    public var listItemDefaultOnBackground: UIColor? {
        return brushes.listSelected(tonalRange: tonalRange).color(in: colorRange)
    }
    public var listItemDefaultOnIcon: UIColor? {
        return brushes.iconOn(tonalRange: tonalRange).color(in: colorRange)
    }
    public var listItemDefaultOnText: UIColor? {
        return brushes.itemOn(tonalRange: tonalRange).color(in: colorRange)
    }
    public var listItemDefaultOffBackground: UIColor? {
        return brushes.noColor(tonalRange: tonalRange).color(in: colorRange)
    }
    public var listItemDefaultOffIcon: UIColor? {
        return brushes.iconOff(tonalRange: tonalRange).color(in: colorRange)
    }
    public var listItemDefaultOffText: UIColor? {
        return brushes.textOff(tonalRange: tonalRange).color(in: colorRange)
    }
    public var listItemDefaultHoverBackground: UIColor? {
        return brushes.listHover(tonalRange: tonalRange).color(in: colorRange)
    }
    public var listItemDefaultFocusBackground: UIColor? {
        return brushes.listFocus(tonalRange: tonalRange).color(in: colorRange)
    }
    public var listItemDefaultPressedBackground: UIColor? {
        return brushes.listSelected(tonalRange: tonalRange).color(in: colorRange)
    }
    public var listItemDefaultDisabledIcon: UIColor? {
        return brushes.textDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var listItemDefaultDisabledText: UIColor? {
        return brushes.textDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var listItemDefaultDisabledOnBackground: UIColor? {
        return brushes.noColor(tonalRange: tonalRange).color(in: colorRange)
    }
    public var listItemDefaultDisabledOffBackground: UIColor? {
        return brushes.noColor(tonalRange: tonalRange).color(in: colorRange)
    }
    public var loginScreenDefaultBackground: UIColor? {
        return brushes.brandingScreen(tonalRange: tonalRange).color(in: colorRange)
    }
    public var loginScreenDefaultIcon: UIColor? {
        return brushes.brandingScreenText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var loginScreenDefaultShield: UIColor? {
        return brushes.brandingScreenText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var loginScreenDefaultText: UIColor? {
        return brushes.brandingScreenText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var movieBarClinicalBackground: UIColor? {
        return brushes.moviebar(tonalRange: tonalRange).color(in: colorRange)
    }
    public var navigationPrimaryBackground: UIColor? {
        return brushes.navigationPrimary(tonalRange: navigationTonalRange).color(in: colorRange)
    }
    public var navigationPrimaryIcon: UIColor? {
        return brushes.navigationText(tonalRange: navigationTonalRange).color(in: colorRange)
    }
    public var navigationPrimaryText: UIColor? {
        return brushes.navigationText(tonalRange: navigationTonalRange).color(in: colorRange)
    }
    public var navigationSecondaryBackground: UIColor? {
        return brushes.navigationSecondary(tonalRange: navigationTonalRange).color(in: colorRange)
    }
    public var navigationSecondaryIcon: UIColor? {
        return brushes.navigationText(tonalRange: navigationTonalRange).color(in: colorRange)
    }
    public var navigationSecondaryText: UIColor? {
        return brushes.navigationText(tonalRange: navigationTonalRange).color(in: colorRange)
    }
    public var navigationItemDefaultOnBackground: UIColor? {
        return brushes.separator(tonalRange: navigationTonalRange).color(in: colorRange)
    }
    public var navigationItemDefaultOnIcon: UIColor? {
        return brushes.textPrimary(tonalRange: navigationTonalRange).color(in: colorRange)
    }
    public var navigationItemDefaultOnText: UIColor? {
        return brushes.textPrimary(tonalRange: navigationTonalRange).color(in: colorRange)
    }
    public var navigationItemDefaultOffBackground: UIColor? {
        return brushes.noColor(tonalRange: navigationTonalRange).color(in: colorRange)
    }
    public var navigationItemDefaultOffIcon: UIColor? {
        return brushes.textSecondary(tonalRange: navigationTonalRange).color(in: colorRange)
    }
    public var navigationItemDefaultOffText: UIColor? {
        return brushes.textSecondary(tonalRange: navigationTonalRange).color(in: colorRange)
    }
    public var navigationItemDefaultHoverIcon: UIColor? {
        return brushes.textPrimary(tonalRange: navigationTonalRange).color(in: colorRange)
    }
    public var navigationItemDefaultHoverText: UIColor? {
        return brushes.textPrimary(tonalRange: navigationTonalRange).color(in: colorRange)
    }
    public var navigationItemDefaultFocusIcon: UIColor? {
        return brushes.textPrimary(tonalRange: navigationTonalRange).color(in: colorRange)
    }
    public var navigationItemDefaultFocusText: UIColor? {
        return brushes.textPrimary(tonalRange: navigationTonalRange).color(in: colorRange)
    }
    public var navigationItemDefaultPressedIcon: UIColor? {
        return brushes.textTertiary(tonalRange: navigationTonalRange).color(in: colorRange)
    }
    public var navigationItemDefaultPressedText: UIColor? {
        return brushes.textTertiary(tonalRange: navigationTonalRange).color(in: colorRange)
    }
    public var navigationItemDefaultDisabledIcon: UIColor? {
        return brushes.textDisabled(tonalRange: navigationTonalRange).color(in: colorRange)
    }
    public var navigationItemDefaultDisabledText: UIColor? {
        return brushes.textDisabled(tonalRange: navigationTonalRange).color(in: colorRange)
    }
    public var notificationDefaultBackground: UIColor? {
        return brushes.notificationBackground(tonalRange: tonalRange).color(in: colorRange)
    }
    public var notificationDefaultHeader: UIColor? {
        return brushes.notificationHeaderText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var notificationDefaultHeaderError: UIColor? {
        return brushes.notificationHeaderErrorText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var notificationDefaultHeaderInfo: UIColor? {
        return brushes.notificationHeaderInfoText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var notificationDefaultHeaderSuccess: UIColor? {
        return brushes.notificationHeaderSuccessText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var notificationDefaultHeaderWarning: UIColor? {
        return brushes.notificationHeaderWarningText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var notificationDefaultIcon: UIColor? {
        return brushes.notificationIcon(tonalRange: tonalRange).color(in: colorRange)
    }
    public var notificationDefaultIconError: UIColor? {
        return brushes.notificationSignalError(tonalRange: tonalRange).color(in: colorRange)
    }
    public var notificationDefaultIconInfo: UIColor? {
        return brushes.notificationSignalInfo(tonalRange: tonalRange).color(in: colorRange)
    }
    public var notificationDefaultIconSuccess: UIColor? {
        return brushes.notificationSignalSuccess(tonalRange: tonalRange).color(in: colorRange)
    }
    public var notificationDefaultIconWarning: UIColor? {
        return brushes.notificationSignalWarning(tonalRange: tonalRange).color(in: colorRange)
    }
    public var notificationDefaultSeparator: UIColor? {
        return brushes.separator(tonalRange: tonalRange).color(in: colorRange)
    }
    public var notificationDefaultShadowLevelTwo: UIColor? {
        return brushes.shadowLevelTwo(tonalRange: tonalRange).color(in: colorRange)
    }
    public var notificationDefaultText: UIColor? {
        return brushes.textSecondary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var notificationSignalBackgroundError: UIColor? {
        return brushes.notificationSignalSignalError(tonalRange: tonalRange).color(in: colorRange)
    }
    public var notificationSignalBackgroundInfo: UIColor? {
        return brushes.notificationSignalSignalInfo(tonalRange: tonalRange).color(in: colorRange)
    }
    public var notificationSignalBackgroundSuccess: UIColor? {
        return brushes.notificationSignalSignalSucces(tonalRange: tonalRange).color(in: colorRange)
    }
    public var notificationSignalBackgroundWarning: UIColor? {
        return brushes.notificationSignalSignalWarning(tonalRange: tonalRange).color(in: colorRange)
    }
    public var notificationSignalHeader: UIColor? {
        return brushes.textPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var notificationSignalIcon: UIColor? {
        return brushes.textPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var notificationSignalShadowLevelTwo: UIColor? {
        return brushes.shadowLevelTwo(tonalRange: tonalRange).color(in: colorRange)
    }
    public var notificationSignalText: UIColor? {
        return brushes.textSecondary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var notificationBadgeAccentBackground: UIColor? {
        return brushes.controlAccent(tonalRange: tonalRange).color(in: accentColorRange)
    }
    public var notificationBadgeAccentText: UIColor? {
        return brushes.controlAccentText(tonalRange: tonalRange).color(in: accentColorRange)
    }
    public var notificationBadgeDefaultBackground: UIColor? {
        return brushes.controlNotification(tonalRange: tonalRange).color(in: colorRange)
    }
    public var notificationBadgeDefaultText: UIColor? {
        return brushes.controlAccentText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var patientInfoDefaultPatientIcon: UIColor? {
        return brushes.textPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var patientInfoDefaultPatientInfoDescriptorText: UIColor? {
        return brushes.textTertiary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var patientInfoDefaultPatientInfoText: UIColor? {
        return brushes.textPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var patientInfoDefaultPatientNameText: UIColor? {
        return brushes.textPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var patientInfoDefaultSecondaryInfoDescriptorText: UIColor? {
        return brushes.textTertiary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var patientInfoDefaultSecondaryInfoValueText: UIColor? {
        return brushes.textPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var patientInfoDefaultSeparator: UIColor? {
        return brushes.separator(tonalRange: tonalRange).color(in: colorRange)
    }
    public var pickerIosDefaultDescriptorText: UIColor? {
        return brushes.textPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var pickerIosDefaultListBackground: UIColor? {
        return brushes.noColor(tonalRange: tonalRange).color(in: colorRange)
    }
    public var pickerIosDefaultPickerText: UIColor? {
        return brushes.textPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var pickerIosDefaultOnActionText: UIColor? {
        return brushes.textEmphasis(tonalRange: tonalRange).color(in: colorRange)
    }
    public var pickerIosDefaultOffActionText: UIColor? {
        return brushes.textSecondary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var pickerIosDefaultPressedListBackground: UIColor? {
        return brushes.listSelected(tonalRange: tonalRange).color(in: colorRange)
    }
    public var pickerIosPrimaryBackgroundStart: UIColor? {
        return brushes.contentPrimaryPickerIosGradientStart(tonalRange: tonalRange).color(in: colorRange)
    }
    public var pickerIosPrimaryBackgroundStop: UIColor? {
        return brushes.contentPrimaryPickerIosGradientStop(tonalRange: tonalRange).color(in: colorRange)
    }
    public var pickerIosSecondaryBackgroundStart: UIColor? {
        return brushes.contentSecondaryPickerIosGradientStart(tonalRange: tonalRange).color(in: colorRange)
    }
    public var pickerIosSecondaryBackgroundStop: UIColor? {
        return brushes.contentSecondaryPickerIosGradientStop(tonalRange: tonalRange).color(in: colorRange)
    }
    public var pickerIosSecondaryNeutralBackgroundStart: UIColor? {
        return brushes.contentSecondaryNeutralPickerIosGradientStart(tonalRange: tonalRange).color(in: colorRange)
    }
    public var pickerIosSecondaryNeutralBackgroundStop: UIColor? {
        return brushes.contentSecondaryNeutralPickerIosGradientStop(tonalRange: tonalRange).color(in: colorRange)
    }
    public var pictorialIndexDefaultHeaderBackground: UIColor? {
        return brushes.gridViewHeaderSecondary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var pictorialIndexDefaultHeaderText: UIColor? {
        return brushes.textPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var pictorialIndexDefaultHeaderTypeIcon: UIColor? {
        return brushes.textPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var pictorialIndexDefaultImageFlagIcon: UIColor? {
        return brushes.textPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var pictorialIndexDefaultImageIsDisplayedIcon: UIColor? {
        return brushes.textPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var pictorialIndexDefaultNumberOfImagesText: UIColor? {
        return brushes.textSecondary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var pictorialIndexDefaultPictorialBackground: UIColor? {
        return brushes.viewPort(tonalRange: tonalRange).color(in: colorRange)
    }
    public var pictorialIndexDefaultSubHeaderText: UIColor? {
        return brushes.textSecondary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var pictorialIndexDefaultOnBorder: UIColor? {
        return brushes.textPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var pictorialIndexDefaultOffBorder: UIColor? {
        return brushes.noColor(tonalRange: tonalRange).color(in: colorRange)
    }
    public var pictorialIndexDefaultHoverHeaderBackground: UIColor? {
        return brushes.pictorialIndexHeaderBackgroundHover(tonalRange: tonalRange).color(in: colorRange)
    }
    public var pictorialIndexDefaultHoverOnBorder: UIColor? {
        return brushes.textPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var pictorialIndexDefaultHoverOffBorder: UIColor? {
        return brushes.noColor(tonalRange: tonalRange).color(in: colorRange)
    }
    public var pictorialIndexDefaultFocusHeaderBackground: UIColor? {
        return brushes.gridViewHeaderSecondary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var pictorialIndexDefaultPressedHeaderBackground: UIColor? {
        return brushes.gridViewHeaderSecondary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var pictorialIndexDefaultPressedOnBorder: UIColor? {
        return brushes.textPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var pictorialIndexDefaultPressedOffBorder: UIColor? {
        return brushes.noColor(tonalRange: tonalRange).color(in: colorRange)
    }
    public var pictorialIndexDefaultDisabledHeaderBackground: UIColor? {
        return brushes.pictorialHeaderDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var pictorialIndexDefaultDisabledHeaderText: UIColor? {
        return brushes.textDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var pictorialIndexDefaultDisabledHeaderTypeIcon: UIColor? {
        return brushes.textDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var pictorialIndexDefaultDisabledImageFlagIcon: UIColor? {
        return brushes.textDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var pictorialIndexDefaultDisabledImageIsDisplayedIcon: UIColor? {
        return brushes.textDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var pictorialIndexDefaultDisabledNumberOfImagesText: UIColor? {
        return brushes.textDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var pictorialIndexDefaultDisabledSubHeaderText: UIColor? {
        return brushes.textDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var pictorialIndexDefaultDisabledOnBorder: UIColor? {
        return brushes.textDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var pictorialIndexDefaultDisabledOffBorder: UIColor? {
        return brushes.noColor(tonalRange: tonalRange).color(in: colorRange)
    }
    public var popoverDefaultBackground: UIColor? {
        return brushes.dialog(tonalRange: tonalRange).color(in: colorRange)
    }
    public var popoverDefaultHeaderText: UIColor? {
        return brushes.textPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var popupDefaultBackground: UIColor? {
        return brushes.popup(tonalRange: tonalRange).color(in: colorRange)
    }
    public var radioButtonDefaultOnBackground: UIColor? {
        return brushes.controlPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var radioButtonDefaultOnIcon: UIColor? {
        return brushes.controlPrimaryText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var radioButtonDefaultOffBackground: UIColor? {
        return brushes.controlPrimaryOff(tonalRange: tonalRange).color(in: colorRange)
    }
    public var radioButtonDefaultOffIcon: UIColor? {
        return brushes.noColor(tonalRange: tonalRange).color(in: colorRange)
    }
    public var radioButtonDefaultFocusBorder: UIColor? {
        return brushes.controlPrimaryFocusBorder(tonalRange: tonalRange).color(in: colorRange)
    }
    public var radioButtonDefaultPressedBorder: UIColor? {
        return brushes.controlPrimaryFocusBorder(tonalRange: tonalRange).color(in: colorRange)
    }
    public var radioButtonDefaultDisabledBackground: UIColor? {
        return brushes.controlPrimaryDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var radioButtonDefaultDisabledIcon: UIColor? {
        return brushes.controlPrimaryDetailDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var ratingBarDefaultOnIcon: UIColor? {
        return brushes.ratingStarOn(tonalRange: tonalRange).color(in: colorRange)
    }
    public var ratingBarDefaultOnText: UIColor? {
        return brushes.ratingTextOn(tonalRange: tonalRange).color(in: colorRange)
    }
    public var ratingBarDefaultOffIcon: UIColor? {
        return brushes.ratingStarOff(tonalRange: tonalRange).color(in: colorRange)
    }
    public var ratingBarDefaultOffText: UIColor? {
        return brushes.textTertiary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var ratingBarDefaultHoverOnIcon: UIColor? {
        return brushes.ratingStarOn(tonalRange: tonalRange).color(in: colorRange)
    }
    public var searchBoxAndroidDefaultClearIcon: UIColor? {
        return brushes.inputTextTertiary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var searchBoxAndroidDefaultHintText: UIColor? {
        return brushes.inputHintText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var searchBoxAndroidDefaultInputBackground: UIColor? {
        return brushes.input(tonalRange: tonalRange).color(in: colorRange)
    }
    public var searchBoxAndroidDefaultInputBorder: UIColor? {
        return brushes.inputBorder(tonalRange: tonalRange).color(in: colorRange)
    }
    public var searchBoxAndroidDefaultInputText: UIColor? {
        return brushes.inputTextPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var searchBoxAndroidDefaultSearchIcon: UIColor? {
        return brushes.neutralTextSecondary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var searchBoxAndroidDefaultFocusBackIcon: UIColor? {
        return brushes.neutralTextSecondary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var searchBoxAndroidDefaultFocusInputBackground: UIColor? {
        return brushes.inputFocus(tonalRange: tonalRange).color(in: colorRange)
    }
    public var searchBoxAndroidDefaultFocusInputBorder: UIColor? {
        return brushes.noColor(tonalRange: tonalRange).color(in: colorRange)
    }
    public var searchBoxDefaultIconButton: UIColor? {
        return brushes.grayPrimaryText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var searchBoxDefaultDisabledIconButton: UIColor? {
        return brushes.inputTextDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var searchBoxIosDefaultCancelText: UIColor? {
        return brushes.textSecondary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var searchBoxIosDefaultClearIcon: UIColor? {
        return brushes.inputTextTertiary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var searchBoxIosDefaultHintText: UIColor? {
        return brushes.inputHintText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var searchBoxIosDefaultInputBackground: UIColor? {
        return brushes.input(tonalRange: tonalRange).color(in: colorRange)
    }
    public var searchBoxIosDefaultInputBorder: UIColor? {
        return brushes.inputBorder(tonalRange: tonalRange).color(in: colorRange)
    }
    public var searchBoxIosDefaultInputText: UIColor? {
        return brushes.inputTextPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var searchBoxIosDefaultSearchIcon: UIColor? {
        return brushes.inputHintText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var searchBoxIosDefaultFocusInputBackground: UIColor? {
        return brushes.inputFocus(tonalRange: tonalRange).color(in: colorRange)
    }
    public var searchBoxIosDefaultPressedCancelText: UIColor? {
        return brushes.textPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var searchBoxIosProminentSearchbarBackground: UIColor? {
        return brushes.contentPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var separatorButtonBackground: UIColor? {
        return brushes.buttonSeparator(tonalRange: tonalRange).color(in: colorRange)
    }
    public var separatorButtonDisabledBackground: UIColor? {
        return brushes.buttonSeparatorDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var separatorContentBackground: UIColor? {
        return brushes.separator(tonalRange: tonalRange).color(in: colorRange)
    }
    public var separatorInputBackground: UIColor? {
        return brushes.inputSeparator(tonalRange: tonalRange).color(in: colorRange)
    }
    public var separatorInputDisabledBackground: UIColor? {
        return brushes.inputSeparatorDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var shadowLevelOneShadow: UIColor? {
        return brushes.shadowLevelOne(tonalRange: tonalRange).color(in: colorRange)
    }
    public var shadowLevelOneDisabledShadow: UIColor? {
        return brushes.shadowLevelOneDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var shadowLevelThreeShadow: UIColor? {
        return brushes.shadowLevelThree(tonalRange: tonalRange).color(in: colorRange)
    }
    public var shadowLevelTwoShadow: UIColor? {
        return brushes.shadowLevelTwo(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splashScreenDefaultBackground: UIColor? {
        return brushes.brandingScreen(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splashScreenDefaultIcon: UIColor? {
        return brushes.brandingScreenText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splashScreenDefaultShield: UIColor? {
        return brushes.brandingScreenText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splashScreenDefaultText: UIColor? {
        return brushes.brandingScreenText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitButtonInputQuietArrow: UIColor? {
        return brushes.arrowIconQuiet(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitButtonInputQuietBackground: UIColor? {
        return brushes.noColor(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitButtonInputQuietBackgroundButtonAction: UIColor? {
        return brushes.noColor(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitButtonInputQuietBackgroundButtonDropdown: UIColor? {
        return brushes.noColor(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitButtonInputQuietBorder: UIColor? {
        return brushes.noColor(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitButtonInputQuietIcon: UIColor? {
        return brushes.textPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitButtonInputQuietSeparator: UIColor? {
        return brushes.noColor(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitButtonInputQuietText: UIColor? {
        return brushes.textPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitButtonInputQuietHoverArrow: UIColor? {
        return brushes.arrowIconQuiet(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitButtonInputQuietHoverBackground: UIColor? {
        return brushes.inputV2(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitButtonInputQuietHoverBackgroundButtonAction: UIColor? {
        return brushes.inputButtonQuietHover(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitButtonInputQuietHoverBackgroundButtonDropdown: UIColor? {
        return brushes.inputButtonQuietHover(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitButtonInputQuietHoverBorder: UIColor? {
        return brushes.inputBorderHoverV2(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitButtonInputQuietHoverIcon: UIColor? {
        return brushes.textPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitButtonInputQuietHoverSeparator: UIColor? {
        return brushes.inputBorderHoverV2(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitButtonInputQuietHoverText: UIColor? {
        return brushes.textPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitButtonInputQuietFocusArrow: UIColor? {
        return brushes.arrowIconQuiet(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitButtonInputQuietFocusBackground: UIColor? {
        return brushes.inputV2(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitButtonInputQuietFocusBackgroundButtonAction: UIColor? {
        return brushes.noColor(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitButtonInputQuietFocusBackgroundButtonDropdown: UIColor? {
        return brushes.noColor(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitButtonInputQuietFocusBorder: UIColor? {
        return brushes.inputBorderFocusV2(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitButtonInputQuietFocusIcon: UIColor? {
        return brushes.textPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitButtonInputQuietFocusSeparator: UIColor? {
        return brushes.inputBorderHoverV2(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitButtonInputQuietFocusText: UIColor? {
        return brushes.textPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitButtonInputQuietPressedArrow: UIColor? {
        return brushes.arrowIconQuiet(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitButtonInputQuietPressedBackground: UIColor? {
        return brushes.inputV2(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitButtonInputQuietPressedBackgroundButtonAction: UIColor? {
        return brushes.inputButtonQuietPressed(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitButtonInputQuietPressedBackgroundButtonDropdown: UIColor? {
        return brushes.inputButtonQuietPressed(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitButtonInputQuietPressedBorder: UIColor? {
        return brushes.inputBorderHoverV2(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitButtonInputQuietPressedIcon: UIColor? {
        return brushes.textPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitButtonInputQuietPressedSeparator: UIColor? {
        return brushes.inputBorderHoverV2(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitButtonInputQuietPressedText: UIColor? {
        return brushes.textPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitButtonInputQuietDisabledArrow: UIColor? {
        return brushes.textDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitButtonInputQuietDisabledBackground: UIColor? {
        return brushes.noColor(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitButtonInputQuietDisabledBackgroundButtonAction: UIColor? {
        return brushes.noColor(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitButtonInputQuietDisabledBackgroundButtonDropdown: UIColor? {
        return brushes.noColor(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitButtonInputQuietDisabledBorder: UIColor? {
        return brushes.noColor(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitButtonInputQuietDisabledIcon: UIColor? {
        return brushes.textDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitButtonInputQuietDisabledSeparator: UIColor? {
        return brushes.noColor(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitButtonInputQuietDisabledText: UIColor? {
        return brushes.textDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitButtonSecondaryArrow: UIColor? {
        return brushes.controlSecondaryText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitButtonSecondaryBackground: UIColor? {
        return brushes.noColor(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitButtonSecondaryBackgroundButtonAction: UIColor? {
        return brushes.controlSecondary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitButtonSecondaryBackgroundButtonDropdown: UIColor? {
        return brushes.controlSecondary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitButtonSecondaryBorder: UIColor? {
        return brushes.noColor(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitButtonSecondaryIcon: UIColor? {
        return brushes.controlSecondaryText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitButtonSecondarySeparator: UIColor? {
        return brushes.controlSecondarySeparator(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitButtonSecondaryText: UIColor? {
        return brushes.controlSecondaryText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitButtonSecondaryHoverArrow: UIColor? {
        return brushes.controlSecondaryText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitButtonSecondaryHoverBackground: UIColor? {
        return brushes.noColor(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitButtonSecondaryHoverBackgroundButtonAction: UIColor? {
        return brushes.controlSecondaryHover(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitButtonSecondaryHoverBackgroundButtonDropdown: UIColor? {
        return brushes.controlSecondaryHover(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitButtonSecondaryHoverBorder: UIColor? {
        return brushes.noColor(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitButtonSecondaryHoverIcon: UIColor? {
        return brushes.controlSecondaryText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitButtonSecondaryHoverSeparator: UIColor? {
        return brushes.controlSecondarySeparator(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitButtonSecondaryHoverText: UIColor? {
        return brushes.controlSecondaryText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitButtonSecondaryFocusArrow: UIColor? {
        return brushes.controlSecondaryText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitButtonSecondaryFocusBackground: UIColor? {
        return brushes.noColor(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitButtonSecondaryFocusBackgroundButtonAction: UIColor? {
        return brushes.controlSecondary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitButtonSecondaryFocusBackgroundButtonDropdown: UIColor? {
        return brushes.controlSecondary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitButtonSecondaryFocusBorder: UIColor? {
        return brushes.controlSecondaryFocusBorder(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitButtonSecondaryFocusIcon: UIColor? {
        return brushes.controlSecondaryText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitButtonSecondaryFocusSeparator: UIColor? {
        return brushes.controlSecondarySeparator(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitButtonSecondaryFocusText: UIColor? {
        return brushes.controlSecondaryText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitButtonSecondaryPressedArrow: UIColor? {
        return brushes.controlSecondaryText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitButtonSecondaryPressedBackground: UIColor? {
        return brushes.noColor(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitButtonSecondaryPressedBackgroundButtonAction: UIColor? {
        return brushes.controlSecondaryPressed(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitButtonSecondaryPressedBackgroundButtonDropdown: UIColor? {
        return brushes.controlSecondaryPressed(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitButtonSecondaryPressedBorder: UIColor? {
        return brushes.noColor(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitButtonSecondaryPressedIcon: UIColor? {
        return brushes.controlSecondaryText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitButtonSecondaryPressedSeparator: UIColor? {
        return brushes.controlSecondarySeparator(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitButtonSecondaryPressedText: UIColor? {
        return brushes.controlSecondaryText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitButtonSecondaryDisabledArrow: UIColor? {
        return brushes.controlSecondaryTextDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitButtonSecondaryDisabledBackground: UIColor? {
        return brushes.noColor(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitButtonSecondaryDisabledBackgroundButtonAction: UIColor? {
        return brushes.controlSecondaryDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitButtonSecondaryDisabledBackgroundButtonDropdown: UIColor? {
        return brushes.controlSecondaryDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitButtonSecondaryDisabledBorder: UIColor? {
        return brushes.noColor(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitButtonSecondaryDisabledIcon: UIColor? {
        return brushes.controlSecondaryTextDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitButtonSecondaryDisabledSeparator: UIColor? {
        return brushes.controlSecondarySeparator(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitButtonSecondaryDisabledText: UIColor? {
        return brushes.controlSecondaryTextDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonInputQuietArrow: UIColor? {
        return brushes.arrowIconQuiet(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonInputQuietBackgroundButtonDropdown: UIColor? {
        return brushes.noColor(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonInputQuietOnBackground: UIColor? {
        return brushes.noColor(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonInputQuietOnBackgroundButtonAction: UIColor? {
        return brushes.inputButtonQuietPressed(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonInputQuietOnBorder: UIColor? {
        return brushes.inputBorderHoverV2(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonInputQuietOnIcon: UIColor? {
        return brushes.textPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonInputQuietOnSeparator: UIColor? {
        return brushes.inputBorderHoverV2(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonInputQuietOnText: UIColor? {
        return brushes.textPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonInputQuietOffBackground: UIColor? {
        return brushes.noColor(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonInputQuietOffBackgroundButtonAction: UIColor? {
        return brushes.noColor(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonInputQuietOffBorder: UIColor? {
        return brushes.noColor(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonInputQuietOffIcon: UIColor? {
        return brushes.textPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonInputQuietOffSeparator: UIColor? {
        return brushes.noColor(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonInputQuietOffText: UIColor? {
        return brushes.textPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonInputQuietHoverArrow: UIColor? {
        return brushes.arrowIconQuiet(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonInputQuietHoverBackgroundButtonDropdown: UIColor? {
        return brushes.inputButtonQuietHover(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonInputQuietHoverOnBackground: UIColor? {
        return brushes.noColor(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonInputQuietHoverOnBackgroundButtonAction: UIColor? {
        return brushes.inputButtonQuietPressed(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonInputQuietHoverOnBorder: UIColor? {
        return brushes.inputBorderHoverV2(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonInputQuietHoverOnIcon: UIColor? {
        return brushes.textPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonInputQuietHoverOnSeparator: UIColor? {
        return brushes.inputBorderHoverV2(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonInputQuietHoverOnText: UIColor? {
        return brushes.textPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonInputQuietHoverOffBackground: UIColor? {
        return brushes.noColor(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonInputQuietHoverOffBackgroundButtonAction: UIColor? {
        return brushes.inputButtonQuietHover(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonInputQuietHoverOffBorder: UIColor? {
        return brushes.inputBorderHoverV2(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonInputQuietHoverOffIcon: UIColor? {
        return brushes.textPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonInputQuietHoverOffSeparator: UIColor? {
        return brushes.inputBorderHoverV2(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonInputQuietHoverOffText: UIColor? {
        return brushes.textPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonInputQuietFocusArrow: UIColor? {
        return brushes.arrowIconQuiet(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonInputQuietFocusBackgroundButtonDropdown: UIColor? {
        return brushes.noColor(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonInputQuietFocusOnBackground: UIColor? {
        return brushes.noColor(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonInputQuietFocusOnBackgroundButtonAction: UIColor? {
        return brushes.inputButtonQuietPressed(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonInputQuietFocusOnBorder: UIColor? {
        return brushes.inputBorderFocusV2(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonInputQuietFocusOnIcon: UIColor? {
        return brushes.textPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonInputQuietFocusOnSeparator: UIColor? {
        return brushes.inputBorderHoverV2(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonInputQuietFocusOnText: UIColor? {
        return brushes.textPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonInputQuietFocusOffBackground: UIColor? {
        return brushes.noColor(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonInputQuietFocusOffBackgroundButtonAction: UIColor? {
        return brushes.noColor(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonInputQuietFocusOffBorder: UIColor? {
        return brushes.inputBorderFocusV2(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonInputQuietFocusOffIcon: UIColor? {
        return brushes.textPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonInputQuietFocusOffSeparator: UIColor? {
        return brushes.inputBorderHoverV2(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonInputQuietFocusOffText: UIColor? {
        return brushes.textPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonInputQuietPressedArrow: UIColor? {
        return brushes.arrowIconQuiet(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonInputQuietPressedBackgroundButtonDropdown: UIColor? {
        return brushes.inputButtonQuietPressed(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonInputQuietPressedOnBackground: UIColor? {
        return brushes.noColor(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonInputQuietPressedOnBackgroundButtonAction: UIColor? {
        return brushes.inputButtonQuietPressed(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonInputQuietPressedOnBorder: UIColor? {
        return brushes.inputBorderHoverV2(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonInputQuietPressedOnIcon: UIColor? {
        return brushes.textPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonInputQuietPressedOnSeparator: UIColor? {
        return brushes.inputBorderHoverV2(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonInputQuietPressedOnText: UIColor? {
        return brushes.textPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonInputQuietPressedOffBackground: UIColor? {
        return brushes.noColor(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonInputQuietPressedOffBackgroundButtonAction: UIColor? {
        return brushes.inputButtonQuietPressed(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonInputQuietPressedOffBorder: UIColor? {
        return brushes.inputBorderHoverV2(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonInputQuietPressedOffIcon: UIColor? {
        return brushes.textPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonInputQuietPressedOffSeparator: UIColor? {
        return brushes.inputBorderHoverV2(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonInputQuietPressedOffText: UIColor? {
        return brushes.textPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonInputQuietDisabledArrow: UIColor? {
        return brushes.textDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonInputQuietDisabledBackgroundButtonDropdown: UIColor? {
        return brushes.noColor(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonInputQuietDisabledOnBackground: UIColor? {
        return brushes.noColor(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonInputQuietDisabledOnBackgroundButtonAction: UIColor? {
        return brushes.inputButtonQuietHover(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonInputQuietDisabledOnBorder: UIColor? {
        return brushes.inputBorderHoverV2(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonInputQuietDisabledOnIcon: UIColor? {
        return brushes.textDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonInputQuietDisabledOnSeparator: UIColor? {
        return brushes.inputBorderHoverV2(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonInputQuietDisabledOnText: UIColor? {
        return brushes.textDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonInputQuietDisabledOffBackground: UIColor? {
        return brushes.noColor(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonInputQuietDisabledOffBackgroundButtonAction: UIColor? {
        return brushes.noColor(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonInputQuietDisabledOffBorder: UIColor? {
        return brushes.noColor(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonInputQuietDisabledOffIcon: UIColor? {
        return brushes.textDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonInputQuietDisabledOffSeparator: UIColor? {
        return brushes.noColor(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonInputQuietDisabledOffText: UIColor? {
        return brushes.textDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonSecondaryArrow: UIColor? {
        return brushes.controlSecondaryText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonSecondaryBackground: UIColor? {
        return brushes.noColor(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonSecondaryBackgroundButtonDropdown: UIColor? {
        return brushes.controlSecondary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonSecondaryBorder: UIColor? {
        return brushes.noColor(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonSecondarySeparator: UIColor? {
        return brushes.controlSecondarySeparator(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonSecondaryOnBackgroundButtonAction: UIColor? {
        return brushes.controlPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonSecondaryOnIcon: UIColor? {
        return brushes.controlPrimaryText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonSecondaryOnText: UIColor? {
        return brushes.controlPrimaryText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonSecondaryOffBackgroundButtonAction: UIColor? {
        return brushes.controlSecondary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonSecondaryOffIcon: UIColor? {
        return brushes.controlSecondaryText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonSecondaryOffText: UIColor? {
        return brushes.controlSecondaryText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonSecondaryHoverArrow: UIColor? {
        return brushes.controlSecondaryText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonSecondaryHoverBackground: UIColor? {
        return brushes.noColor(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonSecondaryHoverBackgroundButtonDropdown: UIColor? {
        return brushes.controlSecondaryHover(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonSecondaryHoverBorder: UIColor? {
        return brushes.noColor(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonSecondaryHoverSeparator: UIColor? {
        return brushes.controlSecondarySeparator(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonSecondaryHoverOnBackgroundButtonAction: UIColor? {
        return brushes.controlPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonSecondaryHoverOnIcon: UIColor? {
        return brushes.controlPrimaryText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonSecondaryHoverOnText: UIColor? {
        return brushes.controlPrimaryText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonSecondaryHoverOffBackgroundButtonAction: UIColor? {
        return brushes.controlSecondaryHover(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonSecondaryHoverOffIcon: UIColor? {
        return brushes.controlSecondaryText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonSecondaryHoverOffText: UIColor? {
        return brushes.controlSecondaryText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonSecondaryFocusArrow: UIColor? {
        return brushes.controlSecondaryText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonSecondaryFocusBackground: UIColor? {
        return brushes.noColor(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonSecondaryFocusBackgroundButtonDropdown: UIColor? {
        return brushes.controlSecondary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonSecondaryFocusBorder: UIColor? {
        return brushes.controlSecondaryFocusBorder(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonSecondaryFocusSeparator: UIColor? {
        return brushes.controlSecondarySeparator(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonSecondaryFocusOnBackgroundButtonAction: UIColor? {
        return brushes.controlPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonSecondaryFocusOnIcon: UIColor? {
        return brushes.controlPrimaryText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonSecondaryFocusOnText: UIColor? {
        return brushes.controlPrimaryText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonSecondaryFocusOffBackgroundButtonAction: UIColor? {
        return brushes.controlSecondary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonSecondaryFocusOffIcon: UIColor? {
        return brushes.controlSecondaryText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonSecondaryFocusOffText: UIColor? {
        return brushes.controlSecondaryText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonSecondaryPressedArrow: UIColor? {
        return brushes.controlSecondaryText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonSecondaryPressedBackground: UIColor? {
        return brushes.noColor(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonSecondaryPressedBackgroundButtonDropdown: UIColor? {
        return brushes.controlSecondaryPressed(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonSecondaryPressedBorder: UIColor? {
        return brushes.noColor(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonSecondaryPressedSeparator: UIColor? {
        return brushes.controlSecondarySeparator(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonSecondaryPressedOnBackgroundButtonAction: UIColor? {
        return brushes.controlPrimaryPressed(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonSecondaryPressedOnIcon: UIColor? {
        return brushes.controlPrimaryText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonSecondaryPressedOnText: UIColor? {
        return brushes.controlPrimaryText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonSecondaryPressedOffBackgroundButtonAction: UIColor? {
        return brushes.controlSecondaryPressed(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonSecondaryPressedOffIcon: UIColor? {
        return brushes.controlSecondaryText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonSecondaryPressedOffText: UIColor? {
        return brushes.controlSecondaryText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonSecondaryDisabledArrow: UIColor? {
        return brushes.textDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonSecondaryDisabledBackground: UIColor? {
        return brushes.noColor(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonSecondaryDisabledBackgroundButtonDropdown: UIColor? {
        return brushes.controlSecondaryDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonSecondaryDisabledBorder: UIColor? {
        return brushes.noColor(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonSecondaryDisabledSeparator: UIColor? {
        return brushes.controlSecondarySeparator(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonSecondaryDisabledOnBackgroundButtonAction: UIColor? {
        return brushes.controlPrimaryDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonSecondaryDisabledOnIcon: UIColor? {
        return brushes.controlPrimaryTextDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonSecondaryDisabledOnText: UIColor? {
        return brushes.controlPrimaryTextDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonSecondaryDisabledOffBackgroundButtonAction: UIColor? {
        return brushes.controlSecondaryDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonSecondaryDisabledOffIcon: UIColor? {
        return brushes.textDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var splitToggleButtonSecondaryDisabledOffText: UIColor? {
        return brushes.textDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var springBoardDefaultBackground: UIColor? {
        return brushes.contentPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var springBoardDefaultIcon: UIColor? {
        return brushes.springboardIcon(tonalRange: tonalRange).color(in: colorRange)
    }
    public var springBoardDefaultText: UIColor? {
        return brushes.primaryText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var springBoardDefaultHoverBackground: UIColor? {
        return brushes.contentPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var springBoardDefaultFocusBackground: UIColor? {
        return brushes.springboardPressed(tonalRange: tonalRange).color(in: colorRange)
    }
    public var springBoardDefaultPressedBackground: UIColor? {
        return brushes.springboardPressed(tonalRange: tonalRange).color(in: colorRange)
    }
    public var springBoardDefaultDisabledBackground: UIColor? {
        return brushes.contentPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var springBoardDefaultDisabledIcon: UIColor? {
        return brushes.springboardIconDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var springBoardDefaultDisabledText: UIColor? {
        return brushes.primaryTextDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var springBoardQuietBackground: UIColor? {
        return brushes.noColor(tonalRange: tonalRange).color(in: colorRange)
    }
    public var springBoardQuietIcon: UIColor? {
        return brushes.springboardIcon(tonalRange: tonalRange).color(in: colorRange)
    }
    public var springBoardQuietText: UIColor? {
        return brushes.primaryText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var springBoardQuietHoverBackground: UIColor? {
        return brushes.noColor(tonalRange: tonalRange).color(in: colorRange)
    }
    public var springBoardQuietFocusBackground: UIColor? {
        return brushes.springboardHover(tonalRange: tonalRange).color(in: colorRange)
    }
    public var springBoardQuietPressedBackground: UIColor? {
        return brushes.springboardHover(tonalRange: tonalRange).color(in: colorRange)
    }
    public var springBoardQuietDisabledIcon: UIColor? {
        return brushes.springboardIconDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var springBoardQuietDisabledText: UIColor? {
        return brushes.primaryTextDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var statusBarAndroid6Background: UIColor? {
        return brushes.statusBarAndroid6(tonalRange: tonalRange).color(in: colorRange)
    }
    public var statusBarAndroid6BackgroundTop: UIColor? {
        return brushes.statusBarAndroid6Top(tonalRange: tonalRange).color(in: colorRange)
    }
    public var statusBarAndroid6Icon: UIColor? {
        return brushes.statusBarAndroid6Text(tonalRange: tonalRange).color(in: colorRange)
    }
    public var statusBarAndroid6Text: UIColor? {
        return brushes.statusBarAndroid6Text(tonalRange: tonalRange).color(in: colorRange)
    }
    public var statusBarIosBackground: UIColor? {
        return brushes.statusBarIos(tonalRange: tonalRange).color(in: colorRange)
    }
    public var statusBarIosIcon: UIColor? {
        return brushes.statusBarIosText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var statusBarIosText: UIColor? {
        return brushes.statusBarIosText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var stickyPanelContentBackground: UIColor? {
        return brushes.stickyPanel(tonalRange: tonalRange).color(in: colorRange)
    }
    public var stickyPanelThemedBackground: UIColor? {
        return brushes.controlPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var tabsDefaultOnBackground: UIColor? {
        return brushes.noColor(tonalRange: tonalRange).color(in: colorRange)
    }
    public var tabsDefaultOnIcon: UIColor? {
        return brushes.itemOn(tonalRange: tonalRange).color(in: colorRange)
    }
    public var tabsDefaultOnIndicator: UIColor? {
        return brushes.itemOn(tonalRange: tonalRange).color(in: colorRange)
    }
    public var tabsDefaultOnText: UIColor? {
        return brushes.itemOn(tonalRange: tonalRange).color(in: colorRange)
    }
    public var tabsDefaultOffBackground: UIColor? {
        return brushes.noColor(tonalRange: tonalRange).color(in: colorRange)
    }
    public var tabsDefaultOffIcon: UIColor? {
        return brushes.textTertiary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var tabsDefaultOffText: UIColor? {
        return brushes.textSecondary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var tabsDefaultHoverOffIcon: UIColor? {
        return brushes.textPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var tabsDefaultHoverOffText: UIColor? {
        return brushes.textPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var tabsDefaultFocusOnBackground: UIColor? {
        return brushes.listSelected(tonalRange: tonalRange).color(in: colorRange)
    }
    public var tabsDefaultFocusOffBackground: UIColor? {
        return brushes.listSelected(tonalRange: tonalRange).color(in: colorRange)
    }
    public var tabsDefaultPressedOffBackground: UIColor? {
        return brushes.listSelected(tonalRange: tonalRange).color(in: colorRange)
    }
    public var tabsDefaultPressedOffIcon: UIColor? {
        return brushes.textPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var tabsDefaultPressedOffText: UIColor? {
        return brushes.textPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var textBoxDefaultArrowIcon: UIColor? {
        return brushes.arrowIcon(tonalRange: tonalRange).color(in: colorRange)
    }
    public var textBoxDefaultBackground: UIColor? {
        return brushes.input(tonalRange: tonalRange).color(in: colorRange)
    }
    public var textBoxDefaultBorder: UIColor? {
        return brushes.inputBorder(tonalRange: tonalRange).color(in: colorRange)
    }
    public var textBoxDefaultButtonBackground: UIColor? {
        return brushes.noColor(tonalRange: tonalRange).color(in: colorRange)
    }
    public var textBoxDefaultClearIcon: UIColor? {
        return brushes.inputTextTertiary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var textBoxDefaultHintText: UIColor? {
        return brushes.inputHintText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var textBoxDefaultIcon: UIColor? {
        return brushes.inputTextPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var textBoxDefaultSeparator: UIColor? {
        return brushes.inputSeparatorV2(tonalRange: tonalRange).color(in: colorRange)
    }
    public var textBoxDefaultShowHideIcon: UIColor? {
        return brushes.inputTextSecondary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var textBoxDefaultText: UIColor? {
        return brushes.inputTextPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var textBoxDefaultHoverBackground: UIColor? {
        return brushes.inputHover(tonalRange: tonalRange).color(in: colorRange)
    }
    public var textBoxDefaultHoverBorder: UIColor? {
        return brushes.inputBorderHover(tonalRange: tonalRange).color(in: colorRange)
    }
    public var textBoxDefaultHoverButtonBackground: UIColor? {
        return brushes.inputButtonHover(tonalRange: tonalRange).color(in: colorRange)
    }
    public var textBoxDefaultFocusBackground: UIColor? {
        return brushes.inputFocus(tonalRange: tonalRange).color(in: colorRange)
    }
    public var textBoxDefaultFocusBorder: UIColor? {
        return brushes.inputBorderFocus(tonalRange: tonalRange).color(in: colorRange)
    }
    public var textBoxDefaultFocusButtonBackground: UIColor? {
        return brushes.noColor(tonalRange: tonalRange).color(in: colorRange)
    }
    public var textBoxDefaultFocusOutline: UIColor? {
        return brushes.inputOutline(tonalRange: tonalRange).color(in: colorRange)
    }
    public var textBoxDefaultFocusTextSelectionBackground: UIColor? {
        return brushes.inputTextSelectionBackground(tonalRange: tonalRange).color(in: colorRange)
    }
    public var textBoxDefaultValidatedBackground: UIColor? {
        return brushes.inputValidatedBackground(tonalRange: tonalRange).color(in: colorRange)
    }
    public var textBoxDefaultValidatedBorder: UIColor? {
        return brushes.inputValidatedBorder(tonalRange: tonalRange).color(in: colorRange)
    }
    public var textBoxDefaultValidatedText: UIColor? {
        return brushes.inputValidatedText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var textBoxDefaultPressedBackground: UIColor? {
        return brushes.inputFocus(tonalRange: tonalRange).color(in: colorRange)
    }
    public var textBoxDefaultPressedBorder: UIColor? {
        return brushes.inputBorderFocus(tonalRange: tonalRange).color(in: colorRange)
    }
    public var textBoxDefaultPressedButtonBackground: UIColor? {
        return brushes.inputButtonPressed(tonalRange: tonalRange).color(in: colorRange)
    }
    public var textBoxDefaultPressedOutline: UIColor? {
        return brushes.inputOutline(tonalRange: tonalRange).color(in: colorRange)
    }
    public var textBoxDefaultDisabledArrowIcon: UIColor? {
        return brushes.arrowIconDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var textBoxDefaultDisabledBackground: UIColor? {
        return brushes.inputDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var textBoxDefaultDisabledBorder: UIColor? {
        return brushes.inputBorderDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var textBoxDefaultDisabledButtonBackground: UIColor? {
        return brushes.inputDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var textBoxDefaultDisabledClearIcon: UIColor? {
        return brushes.inputTextDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var textBoxDefaultDisabledHintText: UIColor? {
        return brushes.inputTextDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var textBoxDefaultDisabledIcon: UIColor? {
        return brushes.inputTextDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var textBoxDefaultDisabledSeparator: UIColor? {
        return brushes.inputSeparatorDisabledV2(tonalRange: tonalRange).color(in: colorRange)
    }
    public var textBoxDefaultDisabledShowHideIcon: UIColor? {
        return brushes.inputTextDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var textBoxDefaultDisabledText: UIColor? {
        return brushes.inputTextDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var textBoxDigitTextBoxBullet: UIColor? {
        return brushes.inputTextPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var textBoxDigitTextBoxDisabledBullet: UIColor? {
        return brushes.inputTextDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var textBoxInlineLabel: UIColor? {
        return brushes.textTertiary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var textBoxInlineText: UIColor? {
        return brushes.textPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var textBoxInlineFocusText: UIColor? {
        return brushes.textPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var textBoxInlineDisabledText: UIColor? {
        return brushes.textDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var textBoxQuietArrowIcon: UIColor? {
        return brushes.arrowIconQuiet(tonalRange: tonalRange).color(in: colorRange)
    }
    public var textBoxQuietBackground: UIColor? {
        return brushes.noColor(tonalRange: tonalRange).color(in: colorRange)
    }
    public var textBoxQuietBorder: UIColor? {
        return brushes.noColor(tonalRange: tonalRange).color(in: colorRange)
    }
    public var textBoxQuietButtonBackground: UIColor? {
        return brushes.noColor(tonalRange: tonalRange).color(in: colorRange)
    }
    public var textBoxQuietHintText: UIColor? {
        return brushes.inputHintText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var textBoxQuietIcon: UIColor? {
        return brushes.textPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var textBoxQuietSeparator: UIColor? {
        return brushes.noColor(tonalRange: tonalRange).color(in: colorRange)
    }
    public var textBoxQuietText: UIColor? {
        return brushes.textPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var textBoxQuietHoverBackground: UIColor? {
        return brushes.inputV2(tonalRange: tonalRange).color(in: colorRange)
    }
    public var textBoxQuietHoverBorder: UIColor? {
        return brushes.inputBorderHoverV2(tonalRange: tonalRange).color(in: colorRange)
    }
    public var textBoxQuietHoverButtonBackground: UIColor? {
        return brushes.inputButtonQuietHover(tonalRange: tonalRange).color(in: colorRange)
    }
    public var textBoxQuietHoverSeparator: UIColor? {
        return brushes.inputSeparatorQuietV2(tonalRange: tonalRange).color(in: colorRange)
    }
    public var textBoxQuietFocusBackground: UIColor? {
        return brushes.inputV2(tonalRange: tonalRange).color(in: colorRange)
    }
    public var textBoxQuietFocusBorder: UIColor? {
        return brushes.inputBorderFocusV2(tonalRange: tonalRange).color(in: colorRange)
    }
    public var textBoxQuietFocusButtonBackground: UIColor? {
        return brushes.noColor(tonalRange: tonalRange).color(in: colorRange)
    }
    public var textBoxQuietFocusTextSelectionBackground: UIColor? {
        return brushes.textSelectionBackground(tonalRange: tonalRange).color(in: colorRange)
    }
    public var textBoxQuietPressedBackground: UIColor? {
        return brushes.inputV2(tonalRange: tonalRange).color(in: colorRange)
    }
    public var textBoxQuietPressedBorder: UIColor? {
        return brushes.inputBorderFocusV2(tonalRange: tonalRange).color(in: colorRange)
    }
    public var textBoxQuietPressedButtonBackground: UIColor? {
        return brushes.inputButtonQuietPressed(tonalRange: tonalRange).color(in: colorRange)
    }
    public var textBoxQuietDisabledArrowIcon: UIColor? {
        return brushes.arrowIconQuietDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var textBoxQuietDisabledBackground: UIColor? {
        return brushes.noColor(tonalRange: tonalRange).color(in: colorRange)
    }
    public var textBoxQuietDisabledBorder: UIColor? {
        return brushes.noColor(tonalRange: tonalRange).color(in: colorRange)
    }
    public var textBoxQuietDisabledButtonBackground: UIColor? {
        return brushes.noColor(tonalRange: tonalRange).color(in: colorRange)
    }
    public var textBoxQuietDisabledIcon: UIColor? {
        return brushes.textDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var textBoxQuietDisabledSeparator: UIColor? {
        return brushes.noColor(tonalRange: tonalRange).color(in: colorRange)
    }
    public var textBoxQuietDisabledText: UIColor? {
        return brushes.textDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var thumbDefaultBackground: UIColor? {
        return brushes.thumb(tonalRange: tonalRange).color(in: colorRange)
    }
    public var thumbDefaultBorder: UIColor? {
        return brushes.noColor(tonalRange: tonalRange).color(in: colorRange)
    }
    public var thumbDefaultFocusBorder: UIColor? {
        return brushes.controlPrimaryFocusBorder(tonalRange: tonalRange).color(in: colorRange)
    }
    public var thumbDefaultPressedBorder: UIColor? {
        return brushes.controlPrimaryFocusBorder(tonalRange: tonalRange).color(in: colorRange)
    }
    public var thumbDefaultDisabledBackground: UIColor? {
        return brushes.thumbDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var thumbScrollbarBackground: UIColor? {
        return brushes.scrollbar(tonalRange: tonalRange).color(in: colorRange)
    }
    public var thumbScrollbarHoverBackground: UIColor? {
        return brushes.scrollbarHover(tonalRange: tonalRange).color(in: colorRange)
    }
    public var thumbScrollbarPressedBackground: UIColor? {
        return brushes.scrollbarHover(tonalRange: tonalRange).color(in: colorRange)
    }
    public var thumbScrollbarDisabledBackground: UIColor? {
        return brushes.scrollbarDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var toggleButtonInputQuietOnBackground: UIColor? {
        return brushes.inputButtonQuietPressed(tonalRange: tonalRange).color(in: colorRange)
    }
    public var toggleButtonInputQuietOnBorder: UIColor? {
        return brushes.inputBorderHoverV2(tonalRange: tonalRange).color(in: colorRange)
    }
    public var toggleButtonInputQuietOnIcon: UIColor? {
        return brushes.textPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var toggleButtonInputQuietOnText: UIColor? {
        return brushes.textPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var toggleButtonInputQuietOffBackground: UIColor? {
        return brushes.noColor(tonalRange: tonalRange).color(in: colorRange)
    }
    public var toggleButtonInputQuietOffBorder: UIColor? {
        return brushes.noColor(tonalRange: tonalRange).color(in: colorRange)
    }
    public var toggleButtonInputQuietOffIcon: UIColor? {
        return brushes.textPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var toggleButtonInputQuietOffText: UIColor? {
        return brushes.textPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var toggleButtonInputQuietHoverOnBackground: UIColor? {
        return brushes.inputButtonQuietPressed(tonalRange: tonalRange).color(in: colorRange)
    }
    public var toggleButtonInputQuietHoverOnBorder: UIColor? {
        return brushes.inputBorderHoverV2(tonalRange: tonalRange).color(in: colorRange)
    }
    public var toggleButtonInputQuietHoverOnIcon: UIColor? {
        return brushes.textPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var toggleButtonInputQuietHoverOnText: UIColor? {
        return brushes.textPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var toggleButtonInputQuietHoverOffBackground: UIColor? {
        return brushes.noColor(tonalRange: tonalRange).color(in: colorRange)
    }
    public var toggleButtonInputQuietHoverOffBorder: UIColor? {
        return brushes.inputBorderHoverV2(tonalRange: tonalRange).color(in: colorRange)
    }
    public var toggleButtonInputQuietHoverOffIcon: UIColor? {
        return brushes.textPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var toggleButtonInputQuietHoverOffText: UIColor? {
        return brushes.textPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var toggleButtonInputQuietFocusOnBackground: UIColor? {
        return brushes.inputButtonQuietPressed(tonalRange: tonalRange).color(in: colorRange)
    }
    public var toggleButtonInputQuietFocusOnBorder: UIColor? {
        return brushes.inputBorderFocusV2(tonalRange: tonalRange).color(in: colorRange)
    }
    public var toggleButtonInputQuietFocusOnIcon: UIColor? {
        return brushes.textPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var toggleButtonInputQuietFocusOnText: UIColor? {
        return brushes.textPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var toggleButtonInputQuietFocusOffBackground: UIColor? {
        return brushes.noColor(tonalRange: tonalRange).color(in: colorRange)
    }
    public var toggleButtonInputQuietFocusOffBorder: UIColor? {
        return brushes.inputBorderFocusV2(tonalRange: tonalRange).color(in: colorRange)
    }
    public var toggleButtonInputQuietFocusOffIcon: UIColor? {
        return brushes.textPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var toggleButtonInputQuietFocusOffText: UIColor? {
        return brushes.textPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var toggleButtonInputQuietPressedOnBackground: UIColor? {
        return brushes.inputButtonQuietPressed(tonalRange: tonalRange).color(in: colorRange)
    }
    public var toggleButtonInputQuietPressedOnBorder: UIColor? {
        return brushes.inputBorderHoverV2(tonalRange: tonalRange).color(in: colorRange)
    }
    public var toggleButtonInputQuietPressedOnIcon: UIColor? {
        return brushes.textPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var toggleButtonInputQuietPressedOnText: UIColor? {
        return brushes.textPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var toggleButtonInputQuietPressedOffBackground: UIColor? {
        return brushes.inputButtonQuietHover(tonalRange: tonalRange).color(in: colorRange)
    }
    public var toggleButtonInputQuietPressedOffBorder: UIColor? {
        return brushes.inputBorderHoverV2(tonalRange: tonalRange).color(in: colorRange)
    }
    public var toggleButtonInputQuietPressedOffIcon: UIColor? {
        return brushes.textPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var toggleButtonInputQuietPressedOffText: UIColor? {
        return brushes.textPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var toggleButtonInputQuietDisabledOnBackground: UIColor? {
        return brushes.inputButtonQuietHover(tonalRange: tonalRange).color(in: colorRange)
    }
    public var toggleButtonInputQuietDisabledOnBorder: UIColor? {
        return brushes.inputBorderHoverV2(tonalRange: tonalRange).color(in: colorRange)
    }
    public var toggleButtonInputQuietDisabledOnIcon: UIColor? {
        return brushes.textDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var toggleButtonInputQuietDisabledOnText: UIColor? {
        return brushes.textDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var toggleButtonInputQuietDisabledOffBackground: UIColor? {
        return brushes.noColor(tonalRange: tonalRange).color(in: colorRange)
    }
    public var toggleButtonInputQuietDisabledOffBorder: UIColor? {
        return brushes.noColor(tonalRange: tonalRange).color(in: colorRange)
    }
    public var toggleButtonInputQuietDisabledOffIcon: UIColor? {
        return brushes.textDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var toggleButtonInputQuietDisabledOffText: UIColor? {
        return brushes.textDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var toggleButtonSecondaryOnBackground: UIColor? {
        return brushes.controlPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var toggleButtonSecondaryOnBorder: UIColor? {
        return brushes.noColor(tonalRange: tonalRange).color(in: colorRange)
    }
    public var toggleButtonSecondaryOnIcon: UIColor? {
        return brushes.controlPrimaryText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var toggleButtonSecondaryOnLedIndicator: UIColor? {
        return brushes.indicatorOn(tonalRange: tonalRange).color(in: colorRange)
    }
    public var toggleButtonSecondaryOnSeparator: UIColor? {
        return brushes.controlPrimarySeparator(tonalRange: tonalRange).color(in: colorRange)
    }
    public var toggleButtonSecondaryOnText: UIColor? {
        return brushes.controlPrimaryText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var toggleButtonSecondaryOffBackground: UIColor? {
        return brushes.controlSecondary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var toggleButtonSecondaryOffBorder: UIColor? {
        return brushes.noColor(tonalRange: tonalRange).color(in: colorRange)
    }
    public var toggleButtonSecondaryOffIcon: UIColor? {
        return brushes.controlSecondaryText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var toggleButtonSecondaryOffLedIndicator: UIColor? {
        return brushes.indicatorOff(tonalRange: tonalRange).color(in: colorRange)
    }
    public var toggleButtonSecondaryOffSeparator: UIColor? {
        return brushes.controlSecondarySeparator(tonalRange: tonalRange).color(in: colorRange)
    }
    public var toggleButtonSecondaryOffText: UIColor? {
        return brushes.controlSecondaryText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var toggleButtonSecondaryHoverOnBackground: UIColor? {
        return brushes.controlPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var toggleButtonSecondaryHoverOnBorder: UIColor? {
        return brushes.noColor(tonalRange: tonalRange).color(in: colorRange)
    }
    public var toggleButtonSecondaryHoverOnIcon: UIColor? {
        return brushes.controlPrimaryText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var toggleButtonSecondaryHoverOnLedIndicator: UIColor? {
        return brushes.indicatorOn(tonalRange: tonalRange).color(in: colorRange)
    }
    public var toggleButtonSecondaryHoverOnSeparator: UIColor? {
        return brushes.controlPrimarySeparator(tonalRange: tonalRange).color(in: colorRange)
    }
    public var toggleButtonSecondaryHoverOnText: UIColor? {
        return brushes.controlPrimaryText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var toggleButtonSecondaryHoverOffBackground: UIColor? {
        return brushes.controlSecondaryHover(tonalRange: tonalRange).color(in: colorRange)
    }
    public var toggleButtonSecondaryHoverOffBorder: UIColor? {
        return brushes.noColor(tonalRange: tonalRange).color(in: colorRange)
    }
    public var toggleButtonSecondaryHoverOffIcon: UIColor? {
        return brushes.controlSecondaryText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var toggleButtonSecondaryHoverOffLedIndicator: UIColor? {
        return brushes.indicatorOff(tonalRange: tonalRange).color(in: colorRange)
    }
    public var toggleButtonSecondaryHoverOffSeparator: UIColor? {
        return brushes.controlSecondarySeparator(tonalRange: tonalRange).color(in: colorRange)
    }
    public var toggleButtonSecondaryHoverOffText: UIColor? {
        return brushes.controlSecondaryText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var toggleButtonSecondaryFocusOnBackground: UIColor? {
        return brushes.controlPrimaryFocus(tonalRange: tonalRange).color(in: colorRange)
    }
    public var toggleButtonSecondaryFocusOnBorder: UIColor? {
        return brushes.controlPrimaryFocusBorder(tonalRange: tonalRange).color(in: colorRange)
    }
    public var toggleButtonSecondaryFocusOnIcon: UIColor? {
        return brushes.controlPrimaryText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var toggleButtonSecondaryFocusOnLedIndicator: UIColor? {
        return brushes.indicatorOn(tonalRange: tonalRange).color(in: colorRange)
    }
    public var toggleButtonSecondaryFocusOnSeparator: UIColor? {
        return brushes.controlPrimarySeparator(tonalRange: tonalRange).color(in: colorRange)
    }
    public var toggleButtonSecondaryFocusOnText: UIColor? {
        return brushes.controlPrimaryText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var toggleButtonSecondaryFocusOffBackground: UIColor? {
        return brushes.controlSecondary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var toggleButtonSecondaryFocusOffBorder: UIColor? {
        return brushes.controlSecondaryFocusBorder(tonalRange: tonalRange).color(in: colorRange)
    }
    public var toggleButtonSecondaryFocusOffIcon: UIColor? {
        return brushes.controlSecondaryText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var toggleButtonSecondaryFocusOffLedIndicator: UIColor? {
        return brushes.indicatorOff(tonalRange: tonalRange).color(in: colorRange)
    }
    public var toggleButtonSecondaryFocusOffSeparator: UIColor? {
        return brushes.controlSecondarySeparator(tonalRange: tonalRange).color(in: colorRange)
    }
    public var toggleButtonSecondaryFocusOffText: UIColor? {
        return brushes.controlSecondaryText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var toggleButtonSecondaryPressedOnBackground: UIColor? {
        return brushes.controlPrimaryPressed(tonalRange: tonalRange).color(in: colorRange)
    }
    public var toggleButtonSecondaryPressedOnBorder: UIColor? {
        return brushes.noColor(tonalRange: tonalRange).color(in: colorRange)
    }
    public var toggleButtonSecondaryPressedOnIcon: UIColor? {
        return brushes.controlPrimaryText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var toggleButtonSecondaryPressedOnLedIndicator: UIColor? {
        return brushes.indicatorOn(tonalRange: tonalRange).color(in: colorRange)
    }
    public var toggleButtonSecondaryPressedOnSeparator: UIColor? {
        return brushes.controlPrimarySeparator(tonalRange: tonalRange).color(in: colorRange)
    }
    public var toggleButtonSecondaryPressedOnText: UIColor? {
        return brushes.controlPrimaryText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var toggleButtonSecondaryPressedOffBackground: UIColor? {
        return brushes.controlSecondaryPressed(tonalRange: tonalRange).color(in: colorRange)
    }
    public var toggleButtonSecondaryPressedOffBorder: UIColor? {
        return brushes.noColor(tonalRange: tonalRange).color(in: colorRange)
    }
    public var toggleButtonSecondaryPressedOffIcon: UIColor? {
        return brushes.controlSecondaryText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var toggleButtonSecondaryPressedOffLedIndicator: UIColor? {
        return brushes.indicatorOff(tonalRange: tonalRange).color(in: colorRange)
    }
    public var toggleButtonSecondaryPressedOffSeparator: UIColor? {
        return brushes.controlSecondarySeparator(tonalRange: tonalRange).color(in: colorRange)
    }
    public var toggleButtonSecondaryPressedOffText: UIColor? {
        return brushes.controlSecondaryText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var toggleButtonSecondaryDisabledOnBackground: UIColor? {
        return brushes.controlPrimaryDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var toggleButtonSecondaryDisabledOnBorder: UIColor? {
        return brushes.noColor(tonalRange: tonalRange).color(in: colorRange)
    }
    public var toggleButtonSecondaryDisabledOnIcon: UIColor? {
        return brushes.controlPrimaryTextDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var toggleButtonSecondaryDisabledOnLedIndicator: UIColor? {
        return brushes.indicatorDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var toggleButtonSecondaryDisabledOnSeparator: UIColor? {
        return brushes.buttonSeparatorDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var toggleButtonSecondaryDisabledOnText: UIColor? {
        return brushes.controlPrimaryTextDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var toggleButtonSecondaryDisabledOffBackground: UIColor? {
        return brushes.controlSecondaryDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var toggleButtonSecondaryDisabledOffBorder: UIColor? {
        return brushes.noColor(tonalRange: tonalRange).color(in: colorRange)
    }
    public var toggleButtonSecondaryDisabledOffIcon: UIColor? {
        return brushes.controlSecondaryTextDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var toggleButtonSecondaryDisabledOffLedIndicator: UIColor? {
        return brushes.indicatorDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var toggleButtonSecondaryDisabledOffSeparator: UIColor? {
        return brushes.controlSecondarySeparator(tonalRange: tonalRange).color(in: colorRange)
    }
    public var toggleButtonSecondaryDisabledOffText: UIColor? {
        return brushes.controlSecondaryTextDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var tokenDefaultBackground: UIColor? {
        return brushes.tokenBackgroundNormal(tonalRange: tonalRange).color(in: colorRange)
    }
    public var tokenDefaultCircleBackground: UIColor? {
        return brushes.tokenCircleBackground(tonalRange: tonalRange).color(in: colorRange)
    }
    public var tokenDefaultCircleText: UIColor? {
        return brushes.controlPrimaryText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var tokenDefaultCloseIcon: UIColor? {
        return brushes.tokenCloseIconNormal(tonalRange: tonalRange).color(in: colorRange)
    }
    public var tokenDefaultText: UIColor? {
        return brushes.textPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var tokenDefaultHoverBackground: UIColor? {
        return brushes.tokenBackgroundHover(tonalRange: tonalRange).color(in: colorRange)
    }
    public var tokenDefaultHoverCloseIcon: UIColor? {
        return brushes.tokenCloseIconHover(tonalRange: tonalRange).color(in: colorRange)
    }
    public var tokenDefaultFocusBackground: UIColor? {
        return brushes.controlPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var tokenDefaultFocusCircleText: UIColor? {
        return brushes.controlPrimaryText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var tokenDefaultFocusCloseIcon: UIColor? {
        return brushes.controlPrimaryText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var tokenDefaultFocusText: UIColor? {
        return brushes.controlPrimaryText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var tokenDefaultPressedBackground: UIColor? {
        return brushes.tokenBackgroundHover(tonalRange: tonalRange).color(in: colorRange)
    }
    public var tokenDefaultPressedCloseIcon: UIColor? {
        return brushes.tokenCloseIconHover(tonalRange: tonalRange).color(in: colorRange)
    }
    public var tokenDefaultDisabledBackground: UIColor? {
        return brushes.tokenBackgroundDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var tokenDefaultDisabledCircleBackground: UIColor? {
        return brushes.tokenCircleBackgroundDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var tokenDefaultDisabledCircleText: UIColor? {
        return brushes.controlPrimaryTextDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var tokenDefaultDisabledCloseIcon: UIColor? {
        return brushes.textPrimaryDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var tokenDefaultDisabledText: UIColor? {
        return brushes.textPrimaryDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var toolbarInputBackground: UIColor? {
        return brushes.inputToolbar(tonalRange: tonalRange).color(in: colorRange)
    }
    public var toolbarOnImageBackground: UIColor? {
        return brushes.toolbarOnImage(tonalRange: tonalRange).color(in: colorRange)
    }
    public var tooltipDarkBackground: UIColor? {
        return brushes.tooltipDark(tonalRange: tonalRange).color(in: colorRange)
    }
    public var tooltipDarkIcon: UIColor? {
        return brushes.lightTextPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var tooltipDarkText: UIColor? {
        return brushes.lightTextPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var tooltipLightBackground: UIColor? {
        return brushes.tooltipLight(tonalRange: tonalRange).color(in: colorRange)
    }
    public var tooltipLightIcon: UIColor? {
        return brushes.colorTextDark(tonalRange: tonalRange).color(in: colorRange)
    }
    public var tooltipLightText: UIColor? {
        return brushes.colorTextDark(tonalRange: tonalRange).color(in: colorRange)
    }
    public var tooltipValidatedBackground: UIColor? {
        return brushes.tooltipValidated(tonalRange: tonalRange).color(in: colorRange)
    }
    public var tooltipValidatedIcon: UIColor? {
        return brushes.tooltipValidatedText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var tooltipValidatedText: UIColor? {
        return brushes.tooltipValidatedText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var trackDangerOnBackground: UIColor? {
        return brushes.signalError(tonalRange: tonalRange).color(in: colorRange)
    }
    public var trackDefaultOnBackground: UIColor? {
        return brushes.controlPrimaryOnVdg(tonalRange: tonalRange).color(in: colorRange)
    }
    public var trackDefaultOffBackground: UIColor? {
        return brushes.controlPrimaryTrackOff(tonalRange: tonalRange).color(in: colorRange)
    }
    public var trackDefaultDisabledBackground: UIColor? {
        return brushes.controlTrackDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var trackDetailOnBackground: UIColor? {
        return brushes.controlPrimaryDetail(tonalRange: tonalRange).color(in: colorRange)
    }
    public var trackDetailOffBackground: UIColor? {
        return brushes.controlTrackOff(tonalRange: tonalRange).color(in: colorRange)
    }
    public var trackDetailBufferBackground: UIColor? {
        return brushes.controlBuffer(tonalRange: tonalRange).color(in: colorRange)
    }
    public var trackScrollbarBackground: UIColor? {
        return brushes.scrollbarTrack(tonalRange: tonalRange).color(in: colorRange)
    }
    public var trackScrollbarDisabledBackground: UIColor? {
        return brushes.scrollbarTrackDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var trackWarningOnBackground: UIColor? {
        return brushes.signalWarning(tonalRange: tonalRange).color(in: colorRange)
    }
    public var treeViewDefaultOnArrowIcon: UIColor? {
        return brushes.textTertiary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var treeViewDefaultOnBackground: UIColor? {
        return brushes.listSelected(tonalRange: tonalRange).color(in: colorRange)
    }
    public var treeViewDefaultOnIcon: UIColor? {
        return brushes.iconOn(tonalRange: tonalRange).color(in: colorRange)
    }
    public var treeViewDefaultOnText: UIColor? {
        return brushes.itemOn(tonalRange: tonalRange).color(in: colorRange)
    }
    public var treeViewDefaultOffArrowIcon: UIColor? {
        return brushes.textTertiary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var treeViewDefaultOffBackground: UIColor? {
        return brushes.noColor(tonalRange: tonalRange).color(in: colorRange)
    }
    public var treeViewDefaultOffIcon: UIColor? {
        return brushes.textSecondary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var treeViewDefaultOffText: UIColor? {
        return brushes.textPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var treeViewDefaultHoverOnBackground: UIColor? {
        return brushes.listSelected(tonalRange: tonalRange).color(in: colorRange)
    }
    public var treeViewDefaultHoverOffBackground: UIColor? {
        return brushes.listHover(tonalRange: tonalRange).color(in: colorRange)
    }
    public var treeViewDefaultFocusOnBackground: UIColor? {
        return brushes.listSelected(tonalRange: tonalRange).color(in: colorRange)
    }
    public var treeViewDefaultFocusOffBackground: UIColor? {
        return brushes.listFocus(tonalRange: tonalRange).color(in: colorRange)
    }
    public var treeViewDefaultPressedOnBackground: UIColor? {
        return brushes.listSelected(tonalRange: tonalRange).color(in: colorRange)
    }
    public var treeViewDefaultPressedOffBackground: UIColor? {
        return brushes.listSelected(tonalRange: tonalRange).color(in: colorRange)
    }
    public var treeViewDefaultDisabledOnArrowIcon: UIColor? {
        return brushes.textDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var treeViewDefaultDisabledOnBackground: UIColor? {
        return brushes.noColor(tonalRange: tonalRange).color(in: colorRange)
    }
    public var treeViewDefaultDisabledOnIcon: UIColor? {
        return brushes.textDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var treeViewDefaultDisabledOnText: UIColor? {
        return brushes.textDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var treeViewDefaultDisabledOffArrowIcon: UIColor? {
        return brushes.textDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var treeViewDefaultDisabledOffBackground: UIColor? {
        return brushes.noColor(tonalRange: tonalRange).color(in: colorRange)
    }
    public var treeViewDefaultDisabledOffIcon: UIColor? {
        return brushes.textDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var treeViewDefaultDisabledOffText: UIColor? {
        return brushes.textDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var typographyDefaultTextSelectionBackground: UIColor? {
        return brushes.textSelectionBackground(tonalRange: tonalRange).color(in: colorRange)
    }
    public var typographyDisabledText: UIColor? {
        return brushes.textDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var typographyEmphasisText: UIColor? {
        return brushes.textEmphasis(tonalRange: tonalRange).color(in: colorRange)
    }
    public var typographyEmphasisDisabledText: UIColor? {
        return brushes.textEmphasisDisabled(tonalRange: tonalRange).color(in: colorRange)
    }
    public var typographyPrimaryText: UIColor? {
        return brushes.textPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var typographySecondaryText: UIColor? {
        return brushes.textSecondary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var typographyTertiaryText: UIColor? {
        return brushes.textTertiary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var typographyValidationIcon: UIColor? {
        return brushes.validatedMessageText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var typographyValidationText: UIColor? {
        return brushes.validatedMessageText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var viewContainerDefaultViewportBackground: UIColor? {
        return brushes.viewPort(tonalRange: tonalRange).color(in: colorRange)
    }
    public var viewContainerDefaultOnBorder: UIColor? {
        return brushes.viewContainerBorder(tonalRange: tonalRange).color(in: colorRange)
    }
    public var viewContainerDefaultOnTabBackground: UIColor? {
        return brushes.viewContainerTabOn(tonalRange: tonalRange).color(in: colorRange)
    }
    public var viewContainerDefaultOffBorder: UIColor? {
        return brushes.noColor(tonalRange: tonalRange).color(in: colorRange)
    }
    public var viewContainerDefaultOffTabBackground: UIColor? {
        return brushes.viewContainerTabOff(tonalRange: tonalRange).color(in: colorRange)
    }
    public var wizardDefaultOnCircleBackground: UIColor? {
        return brushes.wizardOn(tonalRange: tonalRange).color(in: colorRange)
    }
    public var wizardDefaultOnCircleIcon: UIColor? {
        return brushes.wizardOnText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var wizardDefaultOnCircleText: UIColor? {
        return brushes.wizardOnText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var wizardDefaultOnSubtitleText: UIColor? {
        return brushes.textSecondary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var wizardDefaultOnTitleText: UIColor? {
        return brushes.textPrimary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var wizardDefaultOnTrack: UIColor? {
        return brushes.wizardOn(tonalRange: tonalRange).color(in: colorRange)
    }
    public var wizardDefaultOffCircleBackground: UIColor? {
        return brushes.wizardOff(tonalRange: tonalRange).color(in: colorRange)
    }
    public var wizardDefaultOffCircleIcon: UIColor? {
        return brushes.wizardOffText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var wizardDefaultOffCircleText: UIColor? {
        return brushes.wizardOffText(tonalRange: tonalRange).color(in: colorRange)
    }
    public var wizardDefaultOffSubtitleText: UIColor? {
        return brushes.textTertiary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var wizardDefaultOffTitleText: UIColor? {
        return brushes.textTertiary(tonalRange: tonalRange).color(in: colorRange)
    }
    public var wizardDefaultOffTrack: UIColor? {
        return brushes.separator(tonalRange: tonalRange).color(in: colorRange)
    }
    //swiftlint:enable variable_name
}
