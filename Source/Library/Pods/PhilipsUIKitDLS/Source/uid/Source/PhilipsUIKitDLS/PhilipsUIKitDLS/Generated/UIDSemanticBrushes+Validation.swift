//  Copyright Â© 2018 Philips. All rights reserved.

/// This file is auto-generated from a json file.
/// Do not edit this file directly, but change the generation process whenever needed.
/// Generation on 11/09/2018 from git revision revision

import Foundation
import UIKit

// swiftlint:disable type_body_length
// swiftlint:disable file_length
// swiftlint:disable cyclomatic_complexity
// swiftlint:disable control_statement
// swiftlint:disable function_body_length

/// A generated PhilipsUIKitDLS list of semantic brushes. Maps Validation colors and UIDTonalRange to UIDColorLevel.
extension UIDSemanticBrushes {
    func validationValidationMessage(components: UIDBrushComponents) -> UIDBrush {
        switch theme.colorRange {
            case .groupBlue:
                switch(theme.tonalRange) {
					case .ultraLight: return UIDBrush(fixedColorRange: .signalOrange, components: components)
					case .veryLight: return UIDBrush(fixedColorRange: .signalRed, components: components)
					case .bright: return UIDBrush(fixedColorRange: .signalOrange, components: components)
					case .veryDark: return UIDBrush(fixedColorRange: .signalOrange, components: components)
                }
            case .blue:
                switch(theme.tonalRange) {
					case .ultraLight: return UIDBrush(fixedColorRange: .signalOrange, components: components)
					case .veryLight: return UIDBrush(fixedColorRange: .signalRed, components: components)
					case .bright: return UIDBrush(fixedColorRange: .signalOrange, components: components)
					case .veryDark: return UIDBrush(fixedColorRange: .signalOrange, components: components)
                }
            case .aqua:
                switch(theme.tonalRange) {
					case .ultraLight: return UIDBrush(fixedColorRange: .signalOrange, components: components)
					case .veryLight: return UIDBrush(fixedColorRange: .signalRed, components: components)
					case .bright: return UIDBrush(fixedColorRange: .signalYellow, components: components)
					case .veryDark: return UIDBrush(fixedColorRange: .signalOrange, components: components)
                }
            case .green:
                switch(theme.tonalRange) {
					case .ultraLight: return UIDBrush(fixedColorRange: .signalOrange, components: components)
					case .veryLight: return UIDBrush(fixedColorRange: .signalRed, components: components)
					case .bright: return UIDBrush(fixedColorRange: .signalYellow, components: components)
					case .veryDark: return UIDBrush(fixedColorRange: .signalOrange, components: components)
                }
            case .orange:
                switch(theme.tonalRange) {
					case .ultraLight: return UIDBrush(fixedColorRange: .signalRed, components: components)
					case .veryLight: return UIDBrush(fixedColorRange: .signalRed, components: components)
					case .bright: return UIDBrush(fixedColorRange: .signalYellow, components: components)
					case .veryDark: return UIDBrush(fixedColorRange: .signalRed, components: components)
                }
            case .pink:
                switch(theme.tonalRange) {
					case .ultraLight: return UIDBrush(fixedColorRange: .signalOrange, components: components)
					case .veryLight: return UIDBrush(fixedColorRange: .signalRed, components: components)
					case .bright: return UIDBrush(fixedColorRange: .signalYellow, components: components)
					case .veryDark: return UIDBrush(fixedColorRange: .signalOrange, components: components)
                }
            case .purple:
                switch(theme.tonalRange) {
					case .ultraLight: return UIDBrush(fixedColorRange: .signalOrange, components: components)
					case .veryLight: return UIDBrush(fixedColorRange: .signalRed, components: components)
					case .bright: return UIDBrush(fixedColorRange: .signalOrange, components: components)
					case .veryDark: return UIDBrush(fixedColorRange: .signalOrange, components: components)
                }
            case .gray:
                switch(theme.tonalRange) {
					case .ultraLight: return UIDBrush(fixedColorRange: .signalOrange, components: components)
					case .veryLight: return UIDBrush(fixedColorRange: .signalRed, components: components)
					case .bright: return UIDBrush(fixedColorRange: .signalOrange, components: components)
					case .veryDark: return UIDBrush(fixedColorRange: .signalOrange, components: components)
                }
             default: return UIDBrush()
        }
    }

    func validationInputValidatedBackground(components: UIDBrushComponents) -> UIDBrush {
        switch theme.colorRange {
            case .groupBlue:
                switch(theme.tonalRange) {
					case .ultraLight: return UIDBrush(hexColorStr: "#FFF1D3", alpha: 1)
					case .veryLight: return UIDBrush(hexColorStr: "#FFF1D3", alpha: 1)
					case .bright: return UIDBrush(hexColorStr: "#FFF1D3", alpha: 1)
					case .veryDark: return UIDBrush(hexColorStr: "#FFF1D3", alpha: 1)
                }
            case .blue:
                switch(theme.tonalRange) {
					case .ultraLight: return UIDBrush(hexColorStr: "#FFF1D3", alpha: 1)
					case .veryLight: return UIDBrush(hexColorStr: "#FFF1D3", alpha: 1)
					case .bright: return UIDBrush(hexColorStr: "#FFF1D3", alpha: 1)
					case .veryDark: return UIDBrush(hexColorStr: "#FFF1D3", alpha: 1)
                }
            case .aqua:
                switch(theme.tonalRange) {
					case .ultraLight: return UIDBrush(hexColorStr: "#FFF1D3", alpha: 1)
					case .veryLight: return UIDBrush(hexColorStr: "#FFF1D3", alpha: 1)
					case .bright: return UIDBrush(hexColorStr: "#FFF1D3", alpha: 1)
					case .veryDark: return UIDBrush(hexColorStr: "#FFF1D3", alpha: 1)
                }
            case .green:
                switch(theme.tonalRange) {
					case .ultraLight: return UIDBrush(hexColorStr: "#FFF1D3", alpha: 1)
					case .veryLight: return UIDBrush(hexColorStr: "#FFF1D3", alpha: 1)
					case .bright: return UIDBrush(hexColorStr: "#FFF1D3", alpha: 1)
					case .veryDark: return UIDBrush(hexColorStr: "#FFF1D3", alpha: 1)
                }
            case .orange:
                switch(theme.tonalRange) {
					case .ultraLight: return UIDBrush(hexColorStr: "#FFDCDC", alpha: 1)
					case .veryLight: return UIDBrush(hexColorStr: "#FFDCDC", alpha: 1)
					case .bright: return UIDBrush(hexColorStr: "#FFDCDC", alpha: 1)
					case .veryDark: return UIDBrush(hexColorStr: "#FFDCDC", alpha: 1)
                }
            case .pink:
                switch(theme.tonalRange) {
					case .ultraLight: return UIDBrush(hexColorStr: "#FFF1D3", alpha: 1)
					case .veryLight: return UIDBrush(hexColorStr: "#FFF1D3", alpha: 1)
					case .bright: return UIDBrush(hexColorStr: "#FFF1D3", alpha: 1)
					case .veryDark: return UIDBrush(hexColorStr: "#FFF1D3", alpha: 1)
                }
            case .purple:
                switch(theme.tonalRange) {
					case .ultraLight: return UIDBrush(hexColorStr: "#FFF1D3", alpha: 1)
					case .veryLight: return UIDBrush(hexColorStr: "#FFF1D3", alpha: 1)
					case .bright: return UIDBrush(hexColorStr: "#FFF1D3", alpha: 1)
					case .veryDark: return UIDBrush(hexColorStr: "#FFF1D3", alpha: 1)
                }
            case .gray:
                switch(theme.tonalRange) {
					case .ultraLight: return UIDBrush(hexColorStr: "#FFF1D3", alpha: 1)
					case .veryLight: return UIDBrush(hexColorStr: "#FFF1D3", alpha: 1)
					case .bright: return UIDBrush(hexColorStr: "#FFF1D3", alpha: 1)
					case .veryDark: return UIDBrush(hexColorStr: "#FFF1D3", alpha: 1)
                }
             default: return UIDBrush()
        }
    }

    func validationControlNotification(components: UIDBrushComponents) -> UIDBrush {
        switch theme.colorRange {
            case .groupBlue:
                switch(theme.tonalRange) {
					case .ultraLight: return UIDBrush(fixedColorRange: .signalRed, components: components)
					case .veryLight: return UIDBrush(fixedColorRange: .signalRed, components: components)
					case .bright: return UIDBrush(fixedColorRange: .signalRed, components: components)
					case .veryDark: return UIDBrush(fixedColorRange: .signalRed, components: components)
                }
            case .blue:
                switch(theme.tonalRange) {
					case .ultraLight: return UIDBrush(fixedColorRange: .signalRed, components: components)
					case .veryLight: return UIDBrush(fixedColorRange: .signalRed, components: components)
					case .bright: return UIDBrush(fixedColorRange: .signalRed, components: components)
					case .veryDark: return UIDBrush(fixedColorRange: .signalRed, components: components)
                }
            case .aqua:
                switch(theme.tonalRange) {
					case .ultraLight: return UIDBrush(fixedColorRange: .signalRed, components: components)
					case .veryLight: return UIDBrush(fixedColorRange: .signalRed, components: components)
					case .bright: return UIDBrush(fixedColorRange: .signalRed, components: components)
					case .veryDark: return UIDBrush(fixedColorRange: .signalRed, components: components)
                }
            case .green:
                switch(theme.tonalRange) {
					case .ultraLight: return UIDBrush(fixedColorRange: .signalRed, components: components)
					case .veryLight: return UIDBrush(fixedColorRange: .signalRed, components: components)
					case .bright: return UIDBrush(fixedColorRange: .signalRed, components: components)
					case .veryDark: return UIDBrush(fixedColorRange: .signalRed, components: components)
                }
            case .orange:
                switch(theme.tonalRange) {
					case .ultraLight: return UIDBrush(fixedColorRange: .signalRed, components: components)
					case .veryLight: return UIDBrush(fixedColorRange: .signalRed, components: components)
					case .bright: return UIDBrush(fixedColorRange: .signalRed, components: components)
					case .veryDark: return UIDBrush(fixedColorRange: .signalRed, components: components)
                }
            case .pink:
                switch(theme.tonalRange) {
					case .ultraLight: return UIDBrush(fixedColorRange: .signalOrange, components: components)
					case .veryLight: return UIDBrush(fixedColorRange: .signalOrange, components: components)
					case .bright: return UIDBrush(fixedColorRange: .signalOrange, components: components)
					case .veryDark: return UIDBrush(fixedColorRange: .signalOrange, components: components)
                }
            case .purple:
                switch(theme.tonalRange) {
					case .ultraLight: return UIDBrush(fixedColorRange: .signalRed, components: components)
					case .veryLight: return UIDBrush(fixedColorRange: .signalRed, components: components)
					case .bright: return UIDBrush(fixedColorRange: .signalRed, components: components)
					case .veryDark: return UIDBrush(fixedColorRange: .signalRed, components: components)
                }
            case .gray:
                switch(theme.tonalRange) {
					case .ultraLight: return UIDBrush(fixedColorRange: .signalRed, components: components)
					case .veryLight: return UIDBrush(fixedColorRange: .signalRed, components: components)
					case .bright: return UIDBrush(fixedColorRange: .signalRed, components: components)
					case .veryDark: return UIDBrush(fixedColorRange: .signalRed, components: components)
                }
             default: return UIDBrush()
        }
    }

    func validationInputValidatedBorder(components: UIDBrushComponents) -> UIDBrush {
        switch theme.colorRange {
            case .groupBlue:
                switch(theme.tonalRange) {
					case .ultraLight: return UIDBrush(fixedColorRange: .signalOrange, components: components)
 					default: return UIDBrush()
                }
            case .blue:
                switch(theme.tonalRange) {
					case .ultraLight: return UIDBrush(fixedColorRange: .signalOrange, components: components)
 					default: return UIDBrush()
                }
            case .aqua:
                switch(theme.tonalRange) {
					case .ultraLight: return UIDBrush(fixedColorRange: .signalOrange, components: components)
 					default: return UIDBrush()
                }
            case .green:
                switch(theme.tonalRange) {
					case .ultraLight: return UIDBrush(fixedColorRange: .signalOrange, components: components)
 					default: return UIDBrush()
                }
            case .orange:
                switch(theme.tonalRange) {
					case .ultraLight: return UIDBrush(fixedColorRange: .signalRed, components: components)
 					default: return UIDBrush()
                }
            case .pink:
                switch(theme.tonalRange) {
					case .ultraLight: return UIDBrush(fixedColorRange: .signalOrange, components: components)
 					default: return UIDBrush()
                }
            case .purple:
                switch(theme.tonalRange) {
					case .ultraLight: return UIDBrush(fixedColorRange: .signalOrange, components: components)
 					default: return UIDBrush()
                }
            case .gray:
                switch(theme.tonalRange) {
					case .ultraLight: return UIDBrush(fixedColorRange: .signalOrange, components: components)
 					default: return UIDBrush()
                }
             default: return UIDBrush()
        }
    }

    func validationInputValidatedText(components: UIDBrushComponents) -> UIDBrush {
        switch theme.colorRange {
            case .groupBlue:
                switch(theme.tonalRange) {
					case .ultraLight: return UIDBrush(fixedColorRange: .signalOrange, components: components)
					case .veryLight: return UIDBrush(fixedColorRange: .signalOrange, components: components)
					case .bright: return UIDBrush(fixedColorRange: .signalOrange, components: components)
					case .veryDark: return UIDBrush(fixedColorRange: .signalOrange, components: components)
                }
            case .blue:
                switch(theme.tonalRange) {
					case .ultraLight: return UIDBrush(fixedColorRange: .signalOrange, components: components)
					case .veryLight: return UIDBrush(fixedColorRange: .signalOrange, components: components)
					case .bright: return UIDBrush(fixedColorRange: .signalOrange, components: components)
					case .veryDark: return UIDBrush(fixedColorRange: .signalOrange, components: components)
                }
            case .aqua:
                switch(theme.tonalRange) {
					case .ultraLight: return UIDBrush(fixedColorRange: .signalOrange, components: components)
					case .veryLight: return UIDBrush(fixedColorRange: .signalOrange, components: components)
					case .bright: return UIDBrush(fixedColorRange: .signalOrange, components: components)
					case .veryDark: return UIDBrush(fixedColorRange: .signalOrange, components: components)
                }
            case .green:
                switch(theme.tonalRange) {
					case .ultraLight: return UIDBrush(fixedColorRange: .signalOrange, components: components)
					case .veryLight: return UIDBrush(fixedColorRange: .signalOrange, components: components)
					case .bright: return UIDBrush(fixedColorRange: .signalOrange, components: components)
					case .veryDark: return UIDBrush(fixedColorRange: .signalOrange, components: components)
                }
            case .orange:
                switch(theme.tonalRange) {
					case .ultraLight: return UIDBrush(fixedColorRange: .signalRed, components: components)
					case .veryLight: return UIDBrush(fixedColorRange: .signalRed, components: components)
					case .bright: return UIDBrush(fixedColorRange: .signalRed, components: components)
					case .veryDark: return UIDBrush(fixedColorRange: .signalRed, components: components)
                }
            case .pink:
                switch(theme.tonalRange) {
					case .ultraLight: return UIDBrush(fixedColorRange: .signalOrange, components: components)
					case .veryLight: return UIDBrush(fixedColorRange: .signalOrange, components: components)
					case .bright: return UIDBrush(fixedColorRange: .signalOrange, components: components)
					case .veryDark: return UIDBrush(fixedColorRange: .signalOrange, components: components)
                }
            case .purple:
                switch(theme.tonalRange) {
					case .ultraLight: return UIDBrush(fixedColorRange: .signalOrange, components: components)
					case .veryLight: return UIDBrush(fixedColorRange: .signalOrange, components: components)
					case .bright: return UIDBrush(fixedColorRange: .signalOrange, components: components)
					case .veryDark: return UIDBrush(fixedColorRange: .signalOrange, components: components)
                }
            case .gray:
                switch(theme.tonalRange) {
					case .ultraLight: return UIDBrush(fixedColorRange: .signalOrange, components: components)
					case .veryLight: return UIDBrush(fixedColorRange: .signalOrange, components: components)
					case .bright: return UIDBrush(fixedColorRange: .signalOrange, components: components)
					case .veryDark: return UIDBrush(fixedColorRange: .signalOrange, components: components)
                }
             default: return UIDBrush()
        }
    }

    func validationTooltipValidated(components: UIDBrushComponents) -> UIDBrush {
        switch theme.colorRange {
            case .groupBlue:
                switch(theme.tonalRange) {
					case .ultraLight: return UIDBrush(fixedColorRange: .signalOrange, components: components)
					case .veryLight: return UIDBrush(fixedColorRange: .signalOrange, components: components)
					case .bright: return UIDBrush(fixedColorRange: .signalOrange, components: components)
					case .veryDark: return UIDBrush(fixedColorRange: .signalOrange, components: components)
                }
            case .blue:
                switch(theme.tonalRange) {
					case .ultraLight: return UIDBrush(fixedColorRange: .signalOrange, components: components)
					case .veryLight: return UIDBrush(fixedColorRange: .signalOrange, components: components)
					case .bright: return UIDBrush(fixedColorRange: .signalOrange, components: components)
					case .veryDark: return UIDBrush(fixedColorRange: .signalOrange, components: components)
                }
            case .aqua:
                switch(theme.tonalRange) {
					case .ultraLight: return UIDBrush(fixedColorRange: .signalOrange, components: components)
					case .veryLight: return UIDBrush(fixedColorRange: .signalOrange, components: components)
					case .bright: return UIDBrush(fixedColorRange: .signalOrange, components: components)
					case .veryDark: return UIDBrush(fixedColorRange: .signalOrange, components: components)
                }
            case .green:
                switch(theme.tonalRange) {
					case .ultraLight: return UIDBrush(fixedColorRange: .signalOrange, components: components)
					case .veryLight: return UIDBrush(fixedColorRange: .signalOrange, components: components)
					case .bright: return UIDBrush(fixedColorRange: .signalOrange, components: components)
					case .veryDark: return UIDBrush(fixedColorRange: .signalOrange, components: components)
                }
            case .orange:
                switch(theme.tonalRange) {
					case .ultraLight: return UIDBrush(fixedColorRange: .signalRed, components: components)
					case .veryLight: return UIDBrush(fixedColorRange: .signalRed, components: components)
					case .bright: return UIDBrush(fixedColorRange: .signalRed, components: components)
					case .veryDark: return UIDBrush(fixedColorRange: .signalRed, components: components)
                }
            case .pink:
                switch(theme.tonalRange) {
					case .ultraLight: return UIDBrush(fixedColorRange: .signalOrange, components: components)
					case .veryLight: return UIDBrush(fixedColorRange: .signalOrange, components: components)
					case .bright: return UIDBrush(fixedColorRange: .signalOrange, components: components)
					case .veryDark: return UIDBrush(fixedColorRange: .signalOrange, components: components)
                }
            case .purple:
                switch(theme.tonalRange) {
					case .ultraLight: return UIDBrush(fixedColorRange: .signalOrange, components: components)
					case .veryLight: return UIDBrush(fixedColorRange: .signalOrange, components: components)
					case .bright: return UIDBrush(fixedColorRange: .signalOrange, components: components)
					case .veryDark: return UIDBrush(fixedColorRange: .signalOrange, components: components)
                }
            case .gray:
                switch(theme.tonalRange) {
					case .ultraLight: return UIDBrush(fixedColorRange: .signalOrange, components: components)
					case .veryLight: return UIDBrush(fixedColorRange: .signalOrange, components: components)
					case .bright: return UIDBrush(fixedColorRange: .signalOrange, components: components)
					case .veryDark: return UIDBrush(fixedColorRange: .signalOrange, components: components)
                }
             default: return UIDBrush()
        }
    }

    func validationValidatedMessageText(components: UIDBrushComponents) -> UIDBrush {
        switch theme.colorRange {
            case .groupBlue:
                switch(theme.tonalRange) {
					case .ultraLight: return UIDBrush(fixedColorRange: .signalOrange, components: components)
					case .veryLight: return UIDBrush(fixedColorRange: .signalRed, components: components)
					case .bright: return UIDBrush(fixedColorRange: .signalOrange, components: components)
					case .veryDark: return UIDBrush(fixedColorRange: .signalOrange, components: components)
                }
            case .blue:
                switch(theme.tonalRange) {
					case .ultraLight: return UIDBrush(fixedColorRange: .signalOrange, components: components)
					case .veryLight: return UIDBrush(fixedColorRange: .signalRed, components: components)
					case .bright: return UIDBrush(fixedColorRange: .signalOrange, components: components)
					case .veryDark: return UIDBrush(fixedColorRange: .signalOrange, components: components)
                }
            case .aqua:
                switch(theme.tonalRange) {
					case .ultraLight: return UIDBrush(fixedColorRange: .signalOrange, components: components)
					case .veryLight: return UIDBrush(fixedColorRange: .signalRed, components: components)
					case .bright: return UIDBrush(fixedColorRange: .signalOrange, components: components)
					case .veryDark: return UIDBrush(fixedColorRange: .signalOrange, components: components)
                }
            case .green:
                switch(theme.tonalRange) {
					case .ultraLight: return UIDBrush(fixedColorRange: .signalOrange, components: components)
					case .veryLight: return UIDBrush(fixedColorRange: .signalOrange, components: components)
					case .bright: return UIDBrush(fixedColorRange: .signalOrange, components: components)
					case .veryDark: return UIDBrush(fixedColorRange: .signalOrange, components: components)
                }
            case .orange:
                switch(theme.tonalRange) {
					case .ultraLight: return UIDBrush(fixedColorRange: .signalOrange, components: components)
					case .veryLight: return UIDBrush(fixedColorRange: .signalRed, components: components)
					case .bright: return UIDBrush(fixedColorRange: .signalYellow, components: components)
					case .veryDark: return UIDBrush(fixedColorRange: .signalOrange, components: components)
                }
            case .pink:
                switch(theme.tonalRange) {
					case .ultraLight: return UIDBrush(fixedColorRange: .signalOrange, components: components)
					case .veryLight: return UIDBrush(fixedColorRange: .signalRed, components: components)
					case .bright: return UIDBrush(fixedColorRange: .signalYellow, components: components)
					case .veryDark: return UIDBrush(fixedColorRange: .signalOrange, components: components)
                }
            case .purple:
                switch(theme.tonalRange) {
					case .ultraLight: return UIDBrush(fixedColorRange: .signalOrange, components: components)
					case .veryLight: return UIDBrush(fixedColorRange: .signalRed, components: components)
					case .bright: return UIDBrush(fixedColorRange: .signalOrange, components: components)
					case .veryDark: return UIDBrush(fixedColorRange: .signalOrange, components: components)
                }
            case .gray:
                switch(theme.tonalRange) {
					case .ultraLight: return UIDBrush(fixedColorRange: .signalOrange, components: components)
					case .veryLight: return UIDBrush(fixedColorRange: .signalRed, components: components)
					case .bright: return UIDBrush(fixedColorRange: .signalOrange, components: components)
					case .veryDark: return UIDBrush(fixedColorRange: .signalOrange, components: components)
                }
             default: return UIDBrush()
        }
    }
}